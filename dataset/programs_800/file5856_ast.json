{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "require"
        },
        "arguments": [
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "jquery"
              },
              {
                "type": "Literal",
                "value": "oae.core"
              },
              {
                "type": "Literal",
                "value": "/tests/qunit/js/util.js"
              }
            ]
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "$"
              },
              {
                "type": "Identifier",
                "name": "oae"
              },
              {
                "type": "Identifier",
                "name": "util"
              }
            ],
            "defaults": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "module"
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "JavaScript Formatting"
                      }
                    ]
                  }
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "doRegexTest"
                      },
                      "init": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "path"
                          },
                          {
                            "type": "Identifier",
                            "name": "jsFile"
                          },
                          {
                            "type": "Identifier",
                            "name": "regex"
                          },
                          {
                            "type": "Identifier",
                            "name": "description"
                          }
                        ],
                        "defaults": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "testFile"
                                  },
                                  "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "jsFile"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "replace"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": {}
                                      },
                                      {
                                        "type": "Literal",
                                        "value": ""
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "match"
                                  },
                                  "init": {
                                    "type": "Literal",
                                    "value": ""
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "errorString"
                                  },
                                  "init": {
                                    "type": "Literal",
                                    "value": ""
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "count"
                                  },
                                  "init": {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "test"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "testFile"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "WhileStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "match"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "regex"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "exec"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "jsFile"
                                            }
                                          ]
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": null
                                      }
                                    },
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "beforeMatch"
                                              },
                                              "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "jsFile"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "substring"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": 0
                                                  },
                                                  {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "match"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "index"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "matchLine"
                                              },
                                              "init": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "beforeMatch"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "split"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": {}
                                                    }
                                                  ]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "length"
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "UpdateExpression",
                                            "operator": "++",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "count"
                                            },
                                            "prefix": false
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "errorString"
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "BinaryExpression",
                                                          "operator": "+",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "errorString"
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": "\n\nPath: "
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "path"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "\nLine: "
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "matchLine"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "\nString:\n"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "match"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": ""
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "===",
                                "left": {
                                  "type": "Identifier",
                                  "name": "count"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "ok"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": true
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "description"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "ok"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": false
                                        },
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "description"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": ", "
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "count"
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": " error(s): "
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "errorString"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "rest": null,
                        "generator": false,
                        "expression": false
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "checkJs"
                      },
                      "init": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "path"
                          },
                          {
                            "type": "Identifier",
                            "name": "jsFile"
                          }
                        ],
                        "defaults": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  "init": {
                                    "type": "Literal",
                                    "value": {}
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "description"
                                  },
                                  "init": {
                                    "type": "Literal",
                                    "value": "Double quotes should only be used within single quotes"
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Use \"var <functionName> = function() {\""
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Put opening braces on the same line as the statement"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Use exactly one space before an opening brace"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Don't put whitespace after an opening brace"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Don't put whitespace after a closing brace"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Use literal notation"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Use \"var <ALLCAPS>\" instead of \"const\""
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Use \".on()\" and \".off()\" to attach event handlers"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Do not extend prototypes"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Avoid using Object.freeze, Object.preventExtensions, Object.seal, with, eval"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "regex"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "description"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "Use jquery or underscore for type checking"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "doRegexTest"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "path"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "jsFile"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "regex"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "description"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "rest": null,
                        "generator": false,
                        "expression": false
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "jsFormattingTest"
                      },
                      "init": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "testData"
                          }
                        ],
                        "defaults": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "$"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "each"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "testData"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "mainJS"
                                    }
                                  },
                                  {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "Identifier",
                                        "name": "mainJSPath"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "mainJS"
                                      }
                                    ],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "test"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "mainJSPath"
                                              },
                                              {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [],
                                                "defaults": [],
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "checkJs"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "mainJSPath"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "mainJS"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "rest": null,
                                                "generator": false,
                                                "expression": false
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "$"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "each"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "testData"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "apiJS"
                                    }
                                  },
                                  {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "Identifier",
                                        "name": "mainApiJSPath"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "apiJS"
                                      }
                                    ],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "test"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "mainApiJSPath"
                                              },
                                              {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [],
                                                "defaults": [],
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "checkJs"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "mainApiJSPath"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "apiJS"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "rest": null,
                                                "generator": false,
                                                "expression": false
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "$"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "each"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "testData"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "oaePlugins"
                                    }
                                  },
                                  {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "Identifier",
                                        "name": "oaePluginJSPath"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "oaePluginJS"
                                      }
                                    ],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "test"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "oaePluginJSPath"
                                              },
                                              {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [],
                                                "defaults": [],
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "checkJs"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "oaePluginJSPath"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "oaePluginJS"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "rest": null,
                                                "generator": false,
                                                "expression": false
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "$"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "each"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "testData"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "widgetData"
                                    }
                                  },
                                  {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "Identifier",
                                        "name": "widgetJSPath"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "widget"
                                      }
                                    ],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "$"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "each"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "widget"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "js"
                                                }
                                              },
                                              {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "widgetJSIndex"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "widgetJS"
                                                  }
                                                ],
                                                "defaults": [],
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "test"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "widgetJSIndex"
                                                          },
                                                          {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "checkJs"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "widgetJSIndex"
                                                                      },
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "widgetJS"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "rest": null,
                                                "generator": false,
                                                "expression": false
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "QUnit"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "start"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Literal",
                                    "value": 2
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "rest": null,
                        "generator": false,
                        "expression": false
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "QUnit"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "stop"
                      }
                    },
                    "arguments": []
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "util"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "loadTestData"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "jsFormattingTest"
                      }
                    ]
                  }
                }
              ]
            },
            "rest": null,
            "generator": false,
            "expression": false
          }
        ]
      }
    }
  ]
}