{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "FunctionExpression",
          "id": null,
          "params": [],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "doT"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "version"
                          },
                          "value": {
                            "type": "Literal",
                            "value": "0.1.7"
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  }
                ],
                "kind": "var"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!==",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "module"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Literal",
                      "value": "undefined"
                    }
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "module"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "exports"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "module"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "exports"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "doT"
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "doT"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "doT"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "doT"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "templateSettings"
                    }
                  },
                  "right": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "evaluate"
                        },
                        "value": {
                          "type": "Literal",
                          "value": {}
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "interpolate"
                        },
                        "value": {
                          "type": "Literal",
                          "value": {}
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "encode"
                        },
                        "value": {
                          "type": "Literal",
                          "value": {}
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "use"
                        },
                        "value": {
                          "type": "Literal",
                          "value": {}
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "define"
                        },
                        "value": {
                          "type": "Literal",
                          "value": {}
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "conditionalStart"
                        },
                        "value": {
                          "type": "Literal",
                          "value": {}
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "conditionalEnd"
                        },
                        "value": {
                          "type": "Literal",
                          "value": {}
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "varname"
                        },
                        "value": {
                          "type": "Literal",
                          "value": "it"
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "strip"
                        },
                        "value": {
                          "type": "Literal",
                          "value": true
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "append"
                        },
                        "value": {
                          "type": "Literal",
                          "value": true
                        },
                        "kind": "init"
                      }
                    ]
                  }
                }
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "resolveDefs"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "c"
                  },
                  {
                    "type": "Identifier",
                    "name": "block"
                  },
                  {
                    "type": "Identifier",
                    "name": "def"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "block"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "string"
                                  }
                                },
                                "consequent": {
                                  "type": "Identifier",
                                  "name": "block"
                                },
                                "alternate": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "block"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "toString"
                                    }
                                  },
                                  "arguments": []
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "replace"
                              }
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "c"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "define"
                                }
                              },
                              {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "match"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "code"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "assign"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "code"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "indexOf"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Literal",
                                              "value": "def."
                                            }
                                          ]
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "code"
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "code"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "substring"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": 4
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "UnaryExpression",
                                        "operator": "!",
                                        "argument": {
                                          "type": "BinaryExpression",
                                          "operator": "in",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "code"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "def"
                                          }
                                        },
                                        "prefix": true
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "assign"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": ":"
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "def"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "code"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "value"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "eval"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": "def[code]="
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "value"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Literal",
                                        "value": ""
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              }
                            ]
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "replace"
                          }
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "c"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "use"
                            }
                          },
                          {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "match"
                              },
                              {
                                "type": "Identifier",
                                "name": "code"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "v"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "eval"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "code"
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "v"
                                    },
                                    "consequent": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "resolveDefs"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "c"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "v"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "def"
                                        }
                                      ]
                                    },
                                    "alternate": {
                                      "type": "Identifier",
                                      "name": "v"
                                    }
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "doT"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "template"
                    }
                  },
                  "right": {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "tmpl"
                      },
                      {
                        "type": "Identifier",
                        "name": "c"
                      },
                      {
                        "type": "Identifier",
                        "name": "def"
                      }
                    ],
                    "defaults": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "c"
                            },
                            "right": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "Identifier",
                                "name": "c"
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "doT"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "templateSettings"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "cstart"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "c"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "append"
                                  }
                                },
                                "consequent": {
                                  "type": "Literal",
                                  "value": "'+("
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": "';out+=("
                                }
                              }
                            },
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "cend"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "c"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "append"
                                  }
                                },
                                "consequent": {
                                  "type": "Literal",
                                  "value": ")+'"
                                },
                                "alternate": {
                                  "type": "Literal",
                                  "value": ");out+='"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "str"
                              },
                              "init": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "LogicalExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "c"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "use"
                                    }
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "c"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "define"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "resolveDefs"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "c"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "tmpl"
                                    },
                                    {
                                      "type": "LogicalExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "def"
                                      },
                                      "right": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "tmpl"
                                }
                              }
                            }
                          ],
                          "kind": "var"
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "str"
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "BinaryExpression",
                                                          "operator": "+",
                                                          "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "Literal",
                                                              "value": "var out='"
                                                            },
                                                            "right": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "CallExpression",
                                                                                  "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                      "type": "CallExpression",
                                                                                      "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                          "type": "ConditionalExpression",
                                                                                          "test": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                              "type": "Identifier",
                                                                                              "name": "c"
                                                                                            },
                                                                                            "property": {
                                                                                              "type": "Identifier",
                                                                                              "name": "strip"
                                                                                            }
                                                                                          },
                                                                                          "consequent": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                              "type": "MemberExpression",
                                                                                              "computed": false,
                                                                                              "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "str"
                                                                                              },
                                                                                              "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "replace"
                                                                                              }
                                                                                            },
                                                                                            "arguments": [
                                                                                              {
                                                                                                "type": "Literal",
                                                                                                "value": {}
                                                                                              },
                                                                                              {
                                                                                                "type": "Literal",
                                                                                                "value": ""
                                                                                              }
                                                                                            ]
                                                                                          },
                                                                                          "alternate": {
                                                                                            "type": "Identifier",
                                                                                            "name": "str"
                                                                                          }
                                                                                        },
                                                                                        "property": {
                                                                                          "type": "Identifier",
                                                                                          "name": "replace"
                                                                                        }
                                                                                      },
                                                                                      "arguments": [
                                                                                        {
                                                                                          "type": "Literal",
                                                                                          "value": {}
                                                                                        },
                                                                                        {
                                                                                          "type": "Literal",
                                                                                          "value": "\\\\"
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    "property": {
                                                                                      "type": "Identifier",
                                                                                      "name": "replace"
                                                                                    }
                                                                                  },
                                                                                  "arguments": [
                                                                                    {
                                                                                      "type": "Literal",
                                                                                      "value": {}
                                                                                    },
                                                                                    {
                                                                                      "type": "Literal",
                                                                                      "value": "\\'"
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "replace"
                                                                                }
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "c"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "interpolate"
                                                                                  }
                                                                                },
                                                                                {
                                                                                  "type": "FunctionExpression",
                                                                                  "id": null,
                                                                                  "params": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "name": "match"
                                                                                    },
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "name": "code"
                                                                                    }
                                                                                  ],
                                                                                  "defaults": [],
                                                                                  "body": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                      {
                                                                                        "type": "ReturnStatement",
                                                                                        "argument": {
                                                                                          "type": "BinaryExpression",
                                                                                          "operator": "+",
                                                                                          "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                              "type": "Identifier",
                                                                                              "name": "cstart"
                                                                                            },
                                                                                            "right": {
                                                                                              "type": "CallExpression",
                                                                                              "callee": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": false,
                                                                                                "object": {
                                                                                                  "type": "CallExpression",
                                                                                                  "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                      "type": "CallExpression",
                                                                                                      "callee": {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": false,
                                                                                                        "object": {
                                                                                                          "type": "Identifier",
                                                                                                          "name": "code"
                                                                                                        },
                                                                                                        "property": {
                                                                                                          "type": "Identifier",
                                                                                                          "name": "replace"
                                                                                                        }
                                                                                                      },
                                                                                                      "arguments": [
                                                                                                        {
                                                                                                          "type": "Literal",
                                                                                                          "value": {}
                                                                                                        },
                                                                                                        {
                                                                                                          "type": "Literal",
                                                                                                          "value": "'"
                                                                                                        }
                                                                                                      ]
                                                                                                    },
                                                                                                    "property": {
                                                                                                      "type": "Identifier",
                                                                                                      "name": "replace"
                                                                                                    }
                                                                                                  },
                                                                                                  "arguments": [
                                                                                                    {
                                                                                                      "type": "Literal",
                                                                                                      "value": {}
                                                                                                    },
                                                                                                    {
                                                                                                      "type": "Literal",
                                                                                                      "value": "\\"
                                                                                                    }
                                                                                                  ]
                                                                                                },
                                                                                                "property": {
                                                                                                  "type": "Identifier",
                                                                                                  "name": "replace"
                                                                                                }
                                                                                              },
                                                                                              "arguments": [
                                                                                                {
                                                                                                  "type": "Literal",
                                                                                                  "value": {}
                                                                                                },
                                                                                                {
                                                                                                  "type": "Literal",
                                                                                                  "value": " "
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          },
                                                                                          "right": {
                                                                                            "type": "Identifier",
                                                                                            "name": "cend"
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    ]
                                                                                  },
                                                                                  "rest": null,
                                                                                  "generator": false,
                                                                                  "expression": false
                                                                                }
                                                                              ]
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "replace"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "c"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "encode"
                                                                              }
                                                                            },
                                                                            {
                                                                              "type": "FunctionExpression",
                                                                              "id": null,
                                                                              "params": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "name": "match"
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "name": "code"
                                                                                }
                                                                              ],
                                                                              "defaults": [],
                                                                              "body": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                  {
                                                                                    "type": "ReturnStatement",
                                                                                    "argument": {
                                                                                      "type": "BinaryExpression",
                                                                                      "operator": "+",
                                                                                      "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                          "type": "BinaryExpression",
                                                                                          "operator": "+",
                                                                                          "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                              "type": "BinaryExpression",
                                                                                              "operator": "+",
                                                                                              "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                  "type": "BinaryExpression",
                                                                                                  "operator": "+",
                                                                                                  "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                      "type": "BinaryExpression",
                                                                                                      "operator": "+",
                                                                                                      "left": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "cstart"
                                                                                                      },
                                                                                                      "right": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                          "type": "MemberExpression",
                                                                                                          "computed": false,
                                                                                                          "object": {
                                                                                                            "type": "CallExpression",
                                                                                                            "callee": {
                                                                                                              "type": "MemberExpression",
                                                                                                              "computed": false,
                                                                                                              "object": {
                                                                                                                "type": "CallExpression",
                                                                                                                "callee": {
                                                                                                                  "type": "MemberExpression",
                                                                                                                  "computed": false,
                                                                                                                  "object": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "code"
                                                                                                                  },
                                                                                                                  "property": {
                                                                                                                    "type": "Identifier",
                                                                                                                    "name": "replace"
                                                                                                                  }
                                                                                                                },
                                                                                                                "arguments": [
                                                                                                                  {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": {}
                                                                                                                  },
                                                                                                                  {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "'"
                                                                                                                  }
                                                                                                                ]
                                                                                                              },
                                                                                                              "property": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "replace"
                                                                                                              }
                                                                                                            },
                                                                                                            "arguments": [
                                                                                                              {
                                                                                                                "type": "Literal",
                                                                                                                "value": {}
                                                                                                              },
                                                                                                              {
                                                                                                                "type": "Literal",
                                                                                                                "value": "\\"
                                                                                                              }
                                                                                                            ]
                                                                                                          },
                                                                                                          "property": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "replace"
                                                                                                          }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                          {
                                                                                                            "type": "Literal",
                                                                                                            "value": {}
                                                                                                          },
                                                                                                          {
                                                                                                            "type": "Literal",
                                                                                                            "value": " "
                                                                                                          }
                                                                                                        ]
                                                                                                      }
                                                                                                    },
                                                                                                    "right": {
                                                                                                      "type": "Literal",
                                                                                                      "value": ").toString().replace(/&(?!\\w+;)/g, '&#38;').split('<').join('&#60;').split('>').join('&#62;').split('"
                                                                                                    }
                                                                                                  },
                                                                                                  "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "\""
                                                                                                  }
                                                                                                },
                                                                                                "right": {
                                                                                                  "type": "Literal",
                                                                                                  "value": "').join('&#34;').split("
                                                                                                }
                                                                                              },
                                                                                              "right": {
                                                                                                "type": "Literal",
                                                                                                "value": "\""
                                                                                              }
                                                                                            },
                                                                                            "right": {
                                                                                              "type": "Literal",
                                                                                              "value": "'"
                                                                                            }
                                                                                          },
                                                                                          "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "\""
                                                                                          }
                                                                                        },
                                                                                        "right": {
                                                                                          "type": "Literal",
                                                                                          "value": ").join('&#39;').split('/').join('&#47;'"
                                                                                        }
                                                                                      },
                                                                                      "right": {
                                                                                        "type": "Identifier",
                                                                                        "name": "cend"
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                ]
                                                                              },
                                                                              "rest": null,
                                                                              "generator": false,
                                                                              "expression": false
                                                                            }
                                                                          ]
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "replace"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "c"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "conditionalEnd"
                                                                          }
                                                                        },
                                                                        {
                                                                          "type": "FunctionExpression",
                                                                          "id": null,
                                                                          "params": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "name": "match"
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "name": "expression"
                                                                            }
                                                                          ],
                                                                          "defaults": [],
                                                                          "body": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                              {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                  "type": "Literal",
                                                                                  "value": "';}out+='"
                                                                                }
                                                                              }
                                                                            ]
                                                                          },
                                                                          "rest": null,
                                                                          "generator": false,
                                                                          "expression": false
                                                                        }
                                                                      ]
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "replace"
                                                                    }
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "c"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "conditionalStart"
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "FunctionExpression",
                                                                      "id": null,
                                                                      "params": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "name": "match"
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "name": "expression"
                                                                        }
                                                                      ],
                                                                      "defaults": [],
                                                                      "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                          {
                                                                            "type": "VariableDeclaration",
                                                                            "declarations": [
                                                                              {
                                                                                "type": "VariableDeclarator",
                                                                                "id": {
                                                                                  "type": "Identifier",
                                                                                  "name": "code"
                                                                                },
                                                                                "init": {
                                                                                  "type": "BinaryExpression",
                                                                                  "operator": "+",
                                                                                  "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                      "type": "Literal",
                                                                                      "value": "if("
                                                                                    },
                                                                                    "right": {
                                                                                      "type": "Identifier",
                                                                                      "name": "expression"
                                                                                    }
                                                                                  },
                                                                                  "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "){"
                                                                                  }
                                                                                }
                                                                              }
                                                                            ],
                                                                            "kind": "var"
                                                                          },
                                                                          {
                                                                            "type": "ReturnStatement",
                                                                            "argument": {
                                                                              "type": "BinaryExpression",
                                                                              "operator": "+",
                                                                              "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                  "type": "Literal",
                                                                                  "value": "';"
                                                                                },
                                                                                "right": {
                                                                                  "type": "CallExpression",
                                                                                  "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                      "type": "CallExpression",
                                                                                      "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                          "type": "CallExpression",
                                                                                          "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                              "type": "Identifier",
                                                                                              "name": "code"
                                                                                            },
                                                                                            "property": {
                                                                                              "type": "Identifier",
                                                                                              "name": "replace"
                                                                                            }
                                                                                          },
                                                                                          "arguments": [
                                                                                            {
                                                                                              "type": "Literal",
                                                                                              "value": {}
                                                                                            },
                                                                                            {
                                                                                              "type": "Literal",
                                                                                              "value": "'"
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        "property": {
                                                                                          "type": "Identifier",
                                                                                          "name": "replace"
                                                                                        }
                                                                                      },
                                                                                      "arguments": [
                                                                                        {
                                                                                          "type": "Literal",
                                                                                          "value": {}
                                                                                        },
                                                                                        {
                                                                                          "type": "Literal",
                                                                                          "value": "\\"
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    "property": {
                                                                                      "type": "Identifier",
                                                                                      "name": "replace"
                                                                                    }
                                                                                  },
                                                                                  "arguments": [
                                                                                    {
                                                                                      "type": "Literal",
                                                                                      "value": {}
                                                                                    },
                                                                                    {
                                                                                      "type": "Literal",
                                                                                      "value": " "
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              },
                                                                              "right": {
                                                                                "type": "Literal",
                                                                                "value": "out+='"
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      },
                                                                      "rest": null,
                                                                      "generator": false,
                                                                      "expression": false
                                                                    }
                                                                  ]
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "replace"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "c"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "evaluate"
                                                                  }
                                                                },
                                                                {
                                                                  "type": "FunctionExpression",
                                                                  "id": null,
                                                                  "params": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "match"
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "code"
                                                                    }
                                                                  ],
                                                                  "defaults": [],
                                                                  "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "ReturnStatement",
                                                                        "argument": {
                                                                          "type": "BinaryExpression",
                                                                          "operator": "+",
                                                                          "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                              "type": "Literal",
                                                                              "value": "';"
                                                                            },
                                                                            "right": {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "CallExpression",
                                                                                  "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                      "type": "CallExpression",
                                                                                      "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                          "type": "Identifier",
                                                                                          "name": "code"
                                                                                        },
                                                                                        "property": {
                                                                                          "type": "Identifier",
                                                                                          "name": "replace"
                                                                                        }
                                                                                      },
                                                                                      "arguments": [
                                                                                        {
                                                                                          "type": "Literal",
                                                                                          "value": {}
                                                                                        },
                                                                                        {
                                                                                          "type": "Literal",
                                                                                          "value": "'"
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    "property": {
                                                                                      "type": "Identifier",
                                                                                      "name": "replace"
                                                                                    }
                                                                                  },
                                                                                  "arguments": [
                                                                                    {
                                                                                      "type": "Literal",
                                                                                      "value": {}
                                                                                    },
                                                                                    {
                                                                                      "type": "Literal",
                                                                                      "value": "\\"
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "replace"
                                                                                }
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": {}
                                                                                },
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": " "
                                                                                }
                                                                              ]
                                                                            }
                                                                          },
                                                                          "right": {
                                                                            "type": "Literal",
                                                                            "value": "out+='"
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "rest": null,
                                                                  "generator": false,
                                                                  "expression": false
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": "';return out;"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "replace"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Literal",
                                                          "value": {}
                                                        },
                                                        {
                                                          "type": "Literal",
                                                          "value": "\\n"
                                                        }
                                                      ]
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "replace"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": {}
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "\\t"
                                                    }
                                                  ]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "replace"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": {}
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "\\r"
                                                }
                                              ]
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "split"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Literal",
                                              "value": "out+='';"
                                            }
                                          ]
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "join"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": ""
                                        }
                                      ]
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "split"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "var out='';out+="
                                    }
                                  ]
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "join"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Literal",
                                  "value": "var out="
                                }
                              ]
                            }
                          }
                        },
                        {
                          "type": "TryStatement",
                          "block": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Function"
                                  },
                                  "arguments": [
                                    {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "c"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "varname"
                                      }
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "str"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "guardedHandlers": [],
                          "handlers": [
                            {
                              "type": "CatchClause",
                              "param": {
                                "type": "Identifier",
                                "name": "e"
                              },
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "console"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "undefined"
                                      }
                                    },
                                    "consequent": {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "console"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "log"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "Literal",
                                              "value": "Could not create a template function: "
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "str"
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "e"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "finalizer": null
                        }
                      ]
                    },
                    "rest": null,
                    "generator": false,
                    "expression": false
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "doT"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "compile"
                    }
                  },
                  "right": {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "tmpl"
                      },
                      {
                        "type": "Identifier",
                        "name": "def"
                      }
                    ],
                    "defaults": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "doT"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "template"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "tmpl"
                              },
                              {
                                "type": "Literal",
                                "value": null
                              },
                              {
                                "type": "Identifier",
                                "name": "def"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "rest": null,
                    "generator": false,
                    "expression": false
                  }
                }
              }
            ]
          },
          "rest": null,
          "generator": false,
          "expression": false
        },
        "arguments": []
      }
    }
  ]
}