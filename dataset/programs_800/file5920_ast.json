{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "angular"
              },
              "property": {
                "type": "Identifier",
                "name": "module"
              }
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "pascalprecht.translate"
              },
              {
                "type": "ArrayExpression",
                "elements": [
                  {
                    "type": "Literal",
                    "value": "ng"
                  }
                ]
              }
            ]
          },
          "property": {
            "type": "Identifier",
            "name": "run"
          }
        },
        "arguments": [
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "$translate"
              },
              {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "$translate"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "$translate"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "storageKey"
                              }
                            },
                            "arguments": []
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "storage"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "$translate"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "storage"
                              }
                            },
                            "arguments": []
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "storage"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "storage"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "get"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "angular"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "isString"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "$translate"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "preferredLanguage"
                                          }
                                        },
                                        "arguments": []
                                      }
                                    ]
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "$translate"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "use"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "$translate"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "preferredLanguage"
                                                }
                                              },
                                              "arguments": []
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "storage"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "set"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "key"
                                            },
                                            {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "$translate"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "use"
                                                }
                                              },
                                              "arguments": []
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "$translate"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "use"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "storage"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "get"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "key"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "angular"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "isString"
                            }
                          },
                          "arguments": [
                            {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "$translate"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "preferredLanguage"
                                }
                              },
                              "arguments": []
                            }
                          ]
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "$translate"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "use"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "$translate"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "preferredLanguage"
                                      }
                                    },
                                    "arguments": []
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "alternate": null
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              }
            ]
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "angular"
              },
              "property": {
                "type": "Identifier",
                "name": "module"
              }
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "pascalprecht.translate"
              }
            ]
          },
          "property": {
            "type": "Identifier",
            "name": "provider"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "$translate"
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "$STORAGE_KEY"
              },
              {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "$STORAGE_KEY"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$translationTable"
                          },
                          "init": {
                            "type": "ObjectExpression",
                            "properties": []
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$preferredLanguage"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$availableLanguageKeys"
                          },
                          "init": {
                            "type": "ArrayExpression",
                            "elements": []
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$languageKeyAliases"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$fallbackLanguage"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$fallbackWasString"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$uses"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$nextLang"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$storageFactory"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$storageKey"
                          },
                          "init": {
                            "type": "Identifier",
                            "name": "$STORAGE_KEY"
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$storagePrefix"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$missingTranslationHandlerFactory"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$interpolationFactory"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$interpolatorFactories"
                          },
                          "init": {
                            "type": "ArrayExpression",
                            "elements": []
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$interpolationSanitizationStrategy"
                          },
                          "init": {
                            "type": "Literal",
                            "value": false
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$loaderFactory"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$cloakClassName"
                          },
                          "init": {
                            "type": "Literal",
                            "value": "translate-cloak"
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$loaderOptions"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$notFoundIndicatorLeft"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$notFoundIndicatorRight"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$postCompilingEnabled"
                          },
                          "init": {
                            "type": "Literal",
                            "value": false
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "NESTED_OBJECT_DELIMITER"
                          },
                          "init": {
                            "type": "Literal",
                            "value": "."
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "loaderCache"
                          },
                          "init": null
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "version"
                          },
                          "init": {
                            "type": "Literal",
                            "value": "2.4.2"
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "getLocale"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "nav"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "window"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "navigator"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "LogicalExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "ConditionalExpression",
                                              "test": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "angular"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "isArray"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "nav"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "languages"
                                                    }
                                                  }
                                                ]
                                              },
                                              "consequent": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "nav"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "languages"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 0
                                                }
                                              },
                                              "alternate": {
                                                "type": "LogicalExpression",
                                                "operator": "||",
                                                "left": {
                                                  "type": "LogicalExpression",
                                                  "operator": "||",
                                                  "left": {
                                                    "type": "LogicalExpression",
                                                    "operator": "||",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "nav"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "language"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "nav"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "browserLanguage"
                                                      }
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "nav"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "systemLanguage"
                                                    }
                                                  }
                                                },
                                                "right": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "nav"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "userLanguage"
                                                  }
                                                }
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": ""
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "split"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "-"
                                          }
                                        ]
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "join"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "_"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "indexOf"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "array"
                              },
                              {
                                "type": "Identifier",
                                "name": "searchElement"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ForStatement",
                                  "init": {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "init": {
                                          "type": "Literal",
                                          "value": 0
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "len"
                                        },
                                        "init": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "array"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "length"
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "len"
                                    }
                                  },
                                  "update": {
                                    "type": "UpdateExpression",
                                    "operator": "++",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "prefix": false
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "array"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "i"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "searchElement"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "i"
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "UnaryExpression",
                                    "operator": "-",
                                    "argument": {
                                      "type": "Literal",
                                      "value": 1
                                    },
                                    "prefix": true
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "trim"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "ThisExpression"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "replace"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": {}
                                      },
                                      {
                                        "type": "Literal",
                                        "value": ""
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "negotiateLocale"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "preferred"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "avail"
                                      },
                                      "init": {
                                        "type": "ArrayExpression",
                                        "elements": []
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "locale"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "angular"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "lowercase"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "preferred"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "i"
                                      },
                                      "init": {
                                        "type": "Literal",
                                        "value": 0
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "n"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$availableLanguageKeys"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "length"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ForStatement",
                                  "init": null,
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "n"
                                    }
                                  },
                                  "update": {
                                    "type": "UpdateExpression",
                                    "operator": "++",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "prefix": false
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "avail"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "push"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "angular"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "lowercase"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "$availableLanguageKeys"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": ">",
                                    "left": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "indexOf"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "avail"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "locale"
                                        }
                                      ]
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "-",
                                      "argument": {
                                        "type": "Literal",
                                        "value": 1
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "preferred"
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "$languageKeyAliases"
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "alias"
                                            },
                                            "init": null
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ForInStatement",
                                        "left": {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "langKeyAlias"
                                              },
                                              "init": null
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "$languageKeyAliases"
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "hasWildcardKey"
                                                  },
                                                  "init": {
                                                    "type": "Literal",
                                                    "value": false
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "hasExactKey"
                                                  },
                                                  "init": {
                                                    "type": "LogicalExpression",
                                                    "operator": "&&",
                                                    "left": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "Object"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "prototype"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "hasOwnProperty"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "call"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "$languageKeyAliases"
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "langKeyAlias"
                                                        }
                                                      ]
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "===",
                                                      "left": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "angular"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "lowercase"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "langKeyAlias"
                                                          }
                                                        ]
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "angular"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "lowercase"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "preferred"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "langKeyAlias"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "slice"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "UnaryExpression",
                                                      "operator": "-",
                                                      "argument": {
                                                        "type": "Literal",
                                                        "value": 1
                                                      },
                                                      "prefix": true
                                                    }
                                                  ]
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "*"
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "hasWildcardKey"
                                                      },
                                                      "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "langKeyAlias"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "slice"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": 0
                                                            },
                                                            {
                                                              "type": "UnaryExpression",
                                                              "operator": "-",
                                                              "argument": {
                                                                "type": "Literal",
                                                                "value": 1
                                                              },
                                                              "prefix": true
                                                            }
                                                          ]
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "preferred"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "slice"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": 0
                                                            },
                                                            {
                                                              "type": "BinaryExpression",
                                                              "operator": "-",
                                                              "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "langKeyAlias"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "length"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": 1
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "||",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "hasExactKey"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "hasWildcardKey"
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "alias"
                                                      },
                                                      "right": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$languageKeyAliases"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "langKeyAlias"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": ">",
                                                      "left": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "indexOf"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "avail"
                                                          },
                                                          {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "angular"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "lowercase"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "alias"
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "-",
                                                        "argument": {
                                                          "type": "Literal",
                                                          "value": 1
                                                        },
                                                        "prefix": true
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ReturnStatement",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "alias"
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        },
                                        "each": false
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "parts"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "preferred"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "split"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "_"
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": ">",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "parts"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "length"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": 1
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": ">",
                                      "left": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "indexOf"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "avail"
                                          },
                                          {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "angular"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "lowercase"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "parts"
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 0
                                                }
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "right": {
                                        "type": "UnaryExpression",
                                        "operator": "-",
                                        "argument": {
                                          "type": "Literal",
                                          "value": 1
                                        },
                                        "prefix": true
                                      }
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "parts"
                                          },
                                          "property": {
                                            "type": "Literal",
                                            "value": 0
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "preferred"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "translations"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "langKey"
                              },
                              {
                                "type": "Identifier",
                                "name": "translationTable"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "langKey"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "translationTable"
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "$translationTable"
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "langKey"
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "translationTable"
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "angular"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "isString"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "langKey"
                                            }
                                          ]
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "$translationTable"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "langKey"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "angular"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "isObject"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "$translationTable"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "langKey"
                                                }
                                              }
                                            ]
                                          },
                                          "prefix": true
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "$translationTable"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "langKey"
                                                  }
                                                },
                                                "right": {
                                                  "type": "ObjectExpression",
                                                  "properties": []
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "angular"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "extend"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "$translationTable"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "langKey"
                                              }
                                            },
                                            {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "flatObject"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "translationTable"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "ThisExpression"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "translations"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "translations"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "cloakClassName"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "name"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "name"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "$cloakClassName"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$cloakClassName"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "name"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "flatObject"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "data"
                              },
                              {
                                "type": "Identifier",
                                "name": "path"
                              },
                              {
                                "type": "Identifier",
                                "name": "result"
                              },
                              {
                                "type": "Identifier",
                                "name": "prevKey"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      "init": null
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "keyWithPath"
                                      },
                                      "init": null
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "keyWithShortPath"
                                      },
                                      "init": null
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "val"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "path"
                                    },
                                    "prefix": true
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "path"
                                          },
                                          "right": {
                                            "type": "ArrayExpression",
                                            "elements": []
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "prefix": true
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "result"
                                          },
                                          "right": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ForInStatement",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "data"
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "Object"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "prototype"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "hasOwnProperty"
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "call"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "data"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "key"
                                              }
                                            ]
                                          },
                                          "prefix": true
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ContinueStatement",
                                              "label": null
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "val"
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "data"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "key"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "angular"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "isObject"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "val"
                                            }
                                          ]
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "flatObject"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "val"
                                                  },
                                                  {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "path"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "concat"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "key"
                                                      }
                                                    ]
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "result"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "keyWithPath"
                                                },
                                                "right": {
                                                  "type": "ConditionalExpression",
                                                  "test": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "path"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "length"
                                                    }
                                                  },
                                                  "consequent": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": ""
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "path"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "join"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "NESTED_OBJECT_DELIMITER"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "NESTED_OBJECT_DELIMITER"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "key"
                                                    }
                                                  },
                                                  "alternate": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "path"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "length"
                                                  }
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "prevKey"
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "keyWithShortPath"
                                                      },
                                                      "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": ""
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "path"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "join"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "NESTED_OBJECT_DELIMITER"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "result"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "keyWithShortPath"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": "@:"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "keyWithPath"
                                                        }
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "result"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "keyWithPath"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "val"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "each": false
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "result"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "addInterpolation"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "factory"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "$interpolatorFactories"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "push"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "factory"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useMessageFormatInterpolation"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useInterpolation"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "$translateMessageFormatInterpolation"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useInterpolation"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "factory"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$interpolationFactory"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "factory"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useSanitizeValueStrategy"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$interpolationSanitizationStrategy"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "preferredLanguage"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "langKey"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "setupPreferredLanguage"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "langKey"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "setupPreferredLanguage"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "langKey"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "langKey"
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "$preferredLanguage"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "langKey"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "$preferredLanguage"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "translationNotFoundIndicator"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "indicator"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "translationNotFoundIndicatorLeft"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "indicator"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "translationNotFoundIndicatorRight"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "indicator"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "translationNotFoundIndicatorLeft"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "indicator"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "indicator"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "$notFoundIndicatorLeft"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$notFoundIndicatorLeft"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "indicator"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "translationNotFoundIndicatorRight"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "indicator"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "indicator"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "$notFoundIndicatorRight"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$notFoundIndicatorRight"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "indicator"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "fallbackLanguage"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "langKey"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "fallbackStack"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "langKey"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "fallbackStack"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "langKey"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "langKey"
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "angular"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "isString"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "langKey"
                                            }
                                          ]
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "$fallbackWasString"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": true
                                                }
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "$fallbackLanguage"
                                                },
                                                "right": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "langKey"
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "angular"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "isArray"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "langKey"
                                              }
                                            ]
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "$fallbackWasString"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": false
                                                  }
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "$fallbackLanguage"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "langKey"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "LogicalExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "angular"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "isString"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "$preferredLanguage"
                                              }
                                            ]
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "<",
                                            "left": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "indexOf"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "$fallbackLanguage"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "$preferredLanguage"
                                                }
                                              ]
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": 0
                                            }
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "$fallbackLanguage"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "push"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "$preferredLanguage"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "ThisExpression"
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "$fallbackWasString"
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "$fallbackLanguage"
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 0
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "$fallbackLanguage"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "use"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "langKey"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "langKey"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "$translationTable"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "langKey"
                                            }
                                          },
                                          "prefix": true
                                        },
                                        "right": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "$loaderFactory"
                                          },
                                          "prefix": true
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ThrowStatement",
                                            "argument": {
                                              "type": "NewExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "Error"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "$translateProvider couldn't find translationTable for langKey: '"
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "langKey"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "'"
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "$uses"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "langKey"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "ThisExpression"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "$uses"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "storageKey"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "key"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    "prefix": true
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "$storagePrefix"
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "$storagePrefix"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "$storageKey"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "$storageKey"
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "$storageKey"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "key"
                                    }
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "storageKey"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "storageKey"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useUrlLoader"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "url"
                            },
                            {
                              "type": "Identifier",
                              "name": "options"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useLoader"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "$translateUrlLoader"
                                    },
                                    {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "angular"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "extend"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "ObjectExpression",
                                          "properties": [
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "url"
                                              },
                                              "value": {
                                                "type": "Identifier",
                                                "name": "url"
                                              },
                                              "kind": "init"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "options"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useStaticFilesLoader"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "options"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useLoader"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "$translateStaticFilesLoader"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "options"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useLoader"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "loaderFactory"
                            },
                            {
                              "type": "Identifier",
                              "name": "options"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$loaderFactory"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "loaderFactory"
                                  }
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$loaderOptions"
                                  },
                                  "right": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "options"
                                    },
                                    "right": {
                                      "type": "ObjectExpression",
                                      "properties": []
                                    }
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useLocalStorage"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useStorage"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "$translateLocalStorage"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useCookieStorage"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useStorage"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "$translateCookieStorage"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useStorage"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "storageFactory"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$storageFactory"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "storageFactory"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "storagePrefix"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "prefix"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "prefix"
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "prefix"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$storagePrefix"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "prefix"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useMissingTranslationHandlerLog"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "useMissingTranslationHandler"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "$translateMissingTranslationHandlerLog"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useMissingTranslationHandler"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "factory"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$missingTranslationHandlerFactory"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "factory"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "usePostCompiling"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$postCompilingEnabled"
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "value"
                                      },
                                      "prefix": true
                                    },
                                    "prefix": true
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "determinePreferredLanguage"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "fn"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "Identifier",
                                      "name": "locale"
                                    },
                                    "init": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "fn"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "angular"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "isFunction"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "fn"
                                            }
                                          ]
                                        }
                                      },
                                      "consequent": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "fn"
                                        },
                                        "arguments": []
                                      },
                                      "alternate": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "getLocale"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  }
                                ],
                                "kind": "var"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "$availableLanguageKeys"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  },
                                  "prefix": true
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "$preferredLanguage"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "locale"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "$preferredLanguage"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "negotiateLocale"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "locale"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "registerAvailableLanguageKeys"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "languageKeys"
                            },
                            {
                              "type": "Identifier",
                              "name": "aliases"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "languageKeys"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "$availableLanguageKeys"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "languageKeys"
                                        }
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "aliases"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "$languageKeyAliases"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "aliases"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "ThisExpression"
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "$availableLanguageKeys"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useLoaderCache"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "cache"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "cache"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": false
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "loaderCache"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "undefined"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "cache"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "loaderCache"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": true
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "cache"
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "undefined"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "loaderCache"
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "$translationCache"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "cache"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "loaderCache"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "cache"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "$get"
                          }
                        },
                        "right": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "$log"
                            },
                            {
                              "type": "Literal",
                              "value": "$injector"
                            },
                            {
                              "type": "Literal",
                              "value": "$rootScope"
                            },
                            {
                              "type": "Literal",
                              "value": "$q"
                            },
                            {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "$log"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "$injector"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "$rootScope"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "$q"
                                }
                              ],
                              "defaults": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "Storage"
                                        },
                                        "init": null
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "defaultInterpolator"
                                        },
                                        "init": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "$injector"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "get"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "LogicalExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "$interpolationFactory"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "$translateDefaultInterpolation"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "pendingLoader"
                                        },
                                        "init": {
                                          "type": "Literal",
                                          "value": false
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "interpolatorHashMap"
                                        },
                                        "init": {
                                          "type": "ObjectExpression",
                                          "properties": []
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "langPromises"
                                        },
                                        "init": {
                                          "type": "ObjectExpression",
                                          "properties": []
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "fallbackIndex"
                                        },
                                        "init": null
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "startFallbackIteration"
                                        },
                                        "init": null
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolationId"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "angular"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "isArray"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    }
                                                  ]
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "translateAll"
                                                          },
                                                          "init": {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "translationIds"
                                                              }
                                                            ],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "declarations": [
                                                                    {
                                                                      "type": "VariableDeclarator",
                                                                      "id": {
                                                                        "type": "Identifier",
                                                                        "name": "results"
                                                                      },
                                                                      "init": {
                                                                        "type": "ObjectExpression",
                                                                        "properties": []
                                                                      }
                                                                    }
                                                                  ],
                                                                  "kind": "var"
                                                                },
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "declarations": [
                                                                    {
                                                                      "type": "VariableDeclarator",
                                                                      "id": {
                                                                        "type": "Identifier",
                                                                        "name": "promises"
                                                                      },
                                                                      "init": {
                                                                        "type": "ArrayExpression",
                                                                        "elements": []
                                                                      }
                                                                    }
                                                                  ],
                                                                  "kind": "var"
                                                                },
                                                                {
                                                                  "type": "VariableDeclaration",
                                                                  "declarations": [
                                                                    {
                                                                      "type": "VariableDeclarator",
                                                                      "id": {
                                                                        "type": "Identifier",
                                                                        "name": "translate"
                                                                      },
                                                                      "init": {
                                                                        "type": "FunctionExpression",
                                                                        "id": null,
                                                                        "params": [
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "translationId"
                                                                          }
                                                                        ],
                                                                        "defaults": [],
                                                                        "body": {
                                                                          "type": "BlockStatement",
                                                                          "body": [
                                                                            {
                                                                              "type": "VariableDeclaration",
                                                                              "declarations": [
                                                                                {
                                                                                  "type": "VariableDeclarator",
                                                                                  "id": {
                                                                                    "type": "Identifier",
                                                                                    "name": "deferred"
                                                                                  },
                                                                                  "init": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                      "type": "MemberExpression",
                                                                                      "computed": false,
                                                                                      "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "$q"
                                                                                      },
                                                                                      "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "defer"
                                                                                      }
                                                                                    },
                                                                                    "arguments": []
                                                                                  }
                                                                                }
                                                                              ],
                                                                              "kind": "var"
                                                                            },
                                                                            {
                                                                              "type": "VariableDeclaration",
                                                                              "declarations": [
                                                                                {
                                                                                  "type": "VariableDeclarator",
                                                                                  "id": {
                                                                                    "type": "Identifier",
                                                                                    "name": "regardless"
                                                                                  },
                                                                                  "init": {
                                                                                    "type": "FunctionExpression",
                                                                                    "id": null,
                                                                                    "params": [
                                                                                      {
                                                                                        "type": "Identifier",
                                                                                        "name": "value"
                                                                                      }
                                                                                    ],
                                                                                    "defaults": [],
                                                                                    "body": {
                                                                                      "type": "BlockStatement",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "ExpressionStatement",
                                                                                          "expression": {
                                                                                            "type": "AssignmentExpression",
                                                                                            "operator": "=",
                                                                                            "left": {
                                                                                              "type": "MemberExpression",
                                                                                              "computed": true,
                                                                                              "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "results"
                                                                                              },
                                                                                              "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "translationId"
                                                                                              }
                                                                                            },
                                                                                            "right": {
                                                                                              "type": "Identifier",
                                                                                              "name": "value"
                                                                                            }
                                                                                          }
                                                                                        },
                                                                                        {
                                                                                          "type": "ExpressionStatement",
                                                                                          "expression": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                              "type": "MemberExpression",
                                                                                              "computed": false,
                                                                                              "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "deferred"
                                                                                              },
                                                                                              "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "resolve"
                                                                                              }
                                                                                            },
                                                                                            "arguments": [
                                                                                              {
                                                                                                "type": "ArrayExpression",
                                                                                                "elements": [
                                                                                                  {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "translationId"
                                                                                                  },
                                                                                                  {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "value"
                                                                                                  }
                                                                                                ]
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    "rest": null,
                                                                                    "generator": false,
                                                                                    "expression": false
                                                                                  }
                                                                                }
                                                                              ],
                                                                              "kind": "var"
                                                                            },
                                                                            {
                                                                              "type": "ExpressionStatement",
                                                                              "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                      "type": "Identifier",
                                                                                      "name": "$translate"
                                                                                    },
                                                                                    "arguments": [
                                                                                      {
                                                                                        "type": "Identifier",
                                                                                        "name": "translationId"
                                                                                      },
                                                                                      {
                                                                                        "type": "Identifier",
                                                                                        "name": "interpolateParams"
                                                                                      },
                                                                                      {
                                                                                        "type": "Identifier",
                                                                                        "name": "interpolationId"
                                                                                      }
                                                                                    ]
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "then"
                                                                                  }
                                                                                },
                                                                                "arguments": [
                                                                                  {
                                                                                    "type": "Identifier",
                                                                                    "name": "regardless"
                                                                                  },
                                                                                  {
                                                                                    "type": "Identifier",
                                                                                    "name": "regardless"
                                                                                  }
                                                                                ]
                                                                              }
                                                                            },
                                                                            {
                                                                              "type": "ReturnStatement",
                                                                              "argument": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "deferred"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "promise"
                                                                                }
                                                                              }
                                                                            }
                                                                          ]
                                                                        },
                                                                        "rest": null,
                                                                        "generator": false,
                                                                        "expression": false
                                                                      }
                                                                    }
                                                                  ],
                                                                  "kind": "var"
                                                                },
                                                                {
                                                                  "type": "ForStatement",
                                                                  "init": {
                                                                    "type": "VariableDeclaration",
                                                                    "declarations": [
                                                                      {
                                                                        "type": "VariableDeclarator",
                                                                        "id": {
                                                                          "type": "Identifier",
                                                                          "name": "i"
                                                                        },
                                                                        "init": {
                                                                          "type": "Literal",
                                                                          "value": 0
                                                                        }
                                                                      },
                                                                      {
                                                                        "type": "VariableDeclarator",
                                                                        "id": {
                                                                          "type": "Identifier",
                                                                          "name": "c"
                                                                        },
                                                                        "init": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "translationIds"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "length"
                                                                          }
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "var"
                                                                  },
                                                                  "test": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "<",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "i"
                                                                    },
                                                                    "right": {
                                                                      "type": "Identifier",
                                                                      "name": "c"
                                                                    }
                                                                  },
                                                                  "update": {
                                                                    "type": "UpdateExpression",
                                                                    "operator": "++",
                                                                    "argument": {
                                                                      "type": "Identifier",
                                                                      "name": "i"
                                                                    },
                                                                    "prefix": false
                                                                  },
                                                                  "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "promises"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "push"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "translate"
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": true,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "translationIds"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                  }
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ReturnStatement",
                                                                  "argument": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "$q"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "all"
                                                                          }
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "promises"
                                                                          }
                                                                        ]
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "then"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "FunctionExpression",
                                                                        "id": null,
                                                                        "params": [],
                                                                        "defaults": [],
                                                                        "body": {
                                                                          "type": "BlockStatement",
                                                                          "body": [
                                                                            {
                                                                              "type": "ReturnStatement",
                                                                              "argument": {
                                                                                "type": "Identifier",
                                                                                "name": "results"
                                                                              }
                                                                            }
                                                                          ]
                                                                        },
                                                                        "rest": null,
                                                                        "generator": false,
                                                                        "expression": false
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "ReturnStatement",
                                                      "argument": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "translateAll"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "translationId"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "deferred"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$q"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "defer"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "Identifier",
                                                  "name": "translationId"
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "translationId"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "trim"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "apply"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "translationId"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "promiseToWaitFor"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "FunctionExpression",
                                                        "id": null,
                                                        "params": [],
                                                        "defaults": [],
                                                        "body": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "VariableDeclaration",
                                                              "declarations": [
                                                                {
                                                                  "type": "VariableDeclarator",
                                                                  "id": {
                                                                    "type": "Identifier",
                                                                    "name": "promise"
                                                                  },
                                                                  "init": {
                                                                    "type": "ConditionalExpression",
                                                                    "test": {
                                                                      "type": "Identifier",
                                                                      "name": "$preferredLanguage"
                                                                    },
                                                                    "consequent": {
                                                                      "type": "MemberExpression",
                                                                      "computed": true,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "langPromises"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "$preferredLanguage"
                                                                      }
                                                                    },
                                                                    "alternate": {
                                                                      "type": "MemberExpression",
                                                                      "computed": true,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "langPromises"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "$uses"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "kind": "var"
                                                            },
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "fallbackIndex"
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": 0
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "type": "IfStatement",
                                                              "test": {
                                                                "type": "LogicalExpression",
                                                                "operator": "&&",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "$storageFactory"
                                                                },
                                                                "right": {
                                                                  "type": "UnaryExpression",
                                                                  "operator": "!",
                                                                  "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "promise"
                                                                  },
                                                                  "prefix": true
                                                                }
                                                              },
                                                              "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                  {
                                                                    "type": "VariableDeclaration",
                                                                    "declarations": [
                                                                      {
                                                                        "type": "VariableDeclarator",
                                                                        "id": {
                                                                          "type": "Identifier",
                                                                          "name": "langKey"
                                                                        },
                                                                        "init": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "Storage"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "get"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "name": "$storageKey"
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "var"
                                                                  },
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "AssignmentExpression",
                                                                      "operator": "=",
                                                                      "left": {
                                                                        "type": "Identifier",
                                                                        "name": "promise"
                                                                      },
                                                                      "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "langPromises"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "langKey"
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "IfStatement",
                                                                    "test": {
                                                                      "type": "LogicalExpression",
                                                                      "operator": "&&",
                                                                      "left": {
                                                                        "type": "Identifier",
                                                                        "name": "$fallbackLanguage"
                                                                      },
                                                                      "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "$fallbackLanguage"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "length"
                                                                        }
                                                                      }
                                                                    },
                                                                    "consequent": {
                                                                      "type": "BlockStatement",
                                                                      "body": [
                                                                        {
                                                                          "type": "VariableDeclaration",
                                                                          "declarations": [
                                                                            {
                                                                              "type": "VariableDeclarator",
                                                                              "id": {
                                                                                "type": "Identifier",
                                                                                "name": "index"
                                                                              },
                                                                              "init": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                  "type": "Identifier",
                                                                                  "name": "indexOf"
                                                                                },
                                                                                "arguments": [
                                                                                  {
                                                                                    "type": "Identifier",
                                                                                    "name": "$fallbackLanguage"
                                                                                  },
                                                                                  {
                                                                                    "type": "Identifier",
                                                                                    "name": "langKey"
                                                                                  }
                                                                                ]
                                                                              }
                                                                            }
                                                                          ],
                                                                          "kind": "var"
                                                                        },
                                                                        {
                                                                          "type": "ExpressionStatement",
                                                                          "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                              "type": "Identifier",
                                                                              "name": "fallbackIndex"
                                                                            },
                                                                            "right": {
                                                                              "type": "ConditionalExpression",
                                                                              "test": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                  "type": "Identifier",
                                                                                  "name": "index"
                                                                                },
                                                                                "right": {
                                                                                  "type": "Literal",
                                                                                  "value": 0
                                                                                }
                                                                              },
                                                                              "consequent": {
                                                                                "type": "Literal",
                                                                                "value": 1
                                                                              },
                                                                              "alternate": {
                                                                                "type": "Literal",
                                                                                "value": 0
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        {
                                                                          "type": "IfStatement",
                                                                          "test": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "<",
                                                                            "left": {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "indexOf"
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "name": "$fallbackLanguage"
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "name": "$preferredLanguage"
                                                                                }
                                                                              ]
                                                                            },
                                                                            "right": {
                                                                              "type": "Literal",
                                                                              "value": 0
                                                                            }
                                                                          },
                                                                          "consequent": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                              {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                  "type": "CallExpression",
                                                                                  "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                      "type": "Identifier",
                                                                                      "name": "$fallbackLanguage"
                                                                                    },
                                                                                    "property": {
                                                                                      "type": "Identifier",
                                                                                      "name": "push"
                                                                                    }
                                                                                  },
                                                                                  "arguments": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "name": "$preferredLanguage"
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              }
                                                                            ]
                                                                          },
                                                                          "alternate": null
                                                                        }
                                                                      ]
                                                                    },
                                                                    "alternate": null
                                                                  }
                                                                ]
                                                              },
                                                              "alternate": null
                                                            },
                                                            {
                                                              "type": "ReturnStatement",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "promise"
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "rest": null,
                                                        "generator": false,
                                                        "expression": false
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "UnaryExpression",
                                                  "operator": "!",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "promiseToWaitFor"
                                                  },
                                                  "prefix": true
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "determineTranslation"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "translationId"
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "interpolateParams"
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "interpolationId"
                                                              }
                                                            ]
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "then"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "deferred"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "resolve"
                                                            }
                                                          },
                                                          {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "deferred"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "reject"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "promiseToWaitFor"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "then"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "determineTranslation"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "translationId"
                                                                          },
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "interpolateParams"
                                                                          },
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "interpolationId"
                                                                          }
                                                                        ]
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "then"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "deferred"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "resolve"
                                                                        }
                                                                      },
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "deferred"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "reject"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          },
                                                          {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "deferred"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "reject"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "deferred"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "promise"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "applyNotFoundIndicators"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "Identifier",
                                                  "name": "$notFoundIndicatorLeft"
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "translationId"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "ArrayExpression",
                                                              "elements": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "$notFoundIndicatorLeft"
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "translationId"
                                                                }
                                                              ]
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "join"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": " "
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "Identifier",
                                                  "name": "$notFoundIndicatorRight"
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "translationId"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "ArrayExpression",
                                                              "elements": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "translationId"
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "$notFoundIndicatorRight"
                                                                }
                                                              ]
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "join"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": " "
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "translationId"
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "useLanguage"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "key"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "$uses"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "$rootScope"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "$emit"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "$translateChangeSuccess"
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "language"
                                                          },
                                                          "value": {
                                                            "type": "Identifier",
                                                            "name": "key"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "Identifier",
                                                  "name": "$storageFactory"
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "Storage"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "set"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "$translate"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "storageKey"
                                                              }
                                                            },
                                                            "arguments": []
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "$uses"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "defaultInterpolator"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "setLocale"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "$uses"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "angular"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "forEach"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "interpolatorHashMap"
                                                    },
                                                    {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "interpolator"
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "id"
                                                        }
                                                      ],
                                                      "defaults": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "MemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "interpolatorHashMap"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "id"
                                                                  }
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "setLocale"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "$uses"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "rest": null,
                                                      "generator": false,
                                                      "expression": false
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "$rootScope"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "$emit"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "$translateChangeEnd"
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "language"
                                                          },
                                                          "value": {
                                                            "type": "Identifier",
                                                            "name": "key"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "loadAsync"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "key"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "UnaryExpression",
                                                  "operator": "!",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  },
                                                  "prefix": true
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ThrowStatement",
                                                      "argument": {
                                                        "type": "Literal",
                                                        "value": "No language key specified for loading."
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "deferred"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$q"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "defer"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "$rootScope"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "$emit"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "$translateLoadingStart"
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "language"
                                                          },
                                                          "value": {
                                                            "type": "Identifier",
                                                            "name": "key"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "pendingLoader"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": true
                                                  }
                                                }
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "cache"
                                                    },
                                                    "init": {
                                                      "type": "Identifier",
                                                      "name": "loaderCache"
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "UnaryExpression",
                                                    "operator": "typeof",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "cache"
                                                    },
                                                    "prefix": true
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "string"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "cache"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "$injector"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "get"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "cache"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "loaderOptions"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "angular"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "extend"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "ObjectExpression",
                                                          "properties": []
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "$loaderOptions"
                                                        },
                                                        {
                                                          "type": "ObjectExpression",
                                                          "properties": [
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                              },
                                                              "value": {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                              },
                                                              "kind": "init"
                                                            },
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "$http"
                                                              },
                                                              "value": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "angular"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "extend"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "ObjectExpression",
                                                                    "properties": []
                                                                  },
                                                                  {
                                                                    "type": "ObjectExpression",
                                                                    "properties": [
                                                                      {
                                                                        "type": "Property",
                                                                        "key": {
                                                                          "type": "Identifier",
                                                                          "name": "cache"
                                                                        },
                                                                        "value": {
                                                                          "type": "Identifier",
                                                                          "name": "cache"
                                                                        },
                                                                        "kind": "init"
                                                                      }
                                                                    ]
                                                                  },
                                                                  {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "$loaderOptions"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "$http"
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "kind": "init"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "$injector"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "get"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "$loaderFactory"
                                                          }
                                                        ]
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "loaderOptions"
                                                        }
                                                      ]
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "then"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "data"
                                                        }
                                                      ],
                                                      "defaults": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                              {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                  "type": "Identifier",
                                                                  "name": "translationTable"
                                                                },
                                                                "init": {
                                                                  "type": "ObjectExpression",
                                                                  "properties": []
                                                                }
                                                              }
                                                            ],
                                                            "kind": "var"
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "$rootScope"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "$emit"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "$translateLoadingSuccess"
                                                                },
                                                                {
                                                                  "type": "ObjectExpression",
                                                                  "properties": [
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "language"
                                                                      },
                                                                      "value": {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                      },
                                                                      "kind": "init"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "angular"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "isArray"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "data"
                                                                }
                                                              ]
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "angular"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "forEach"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "data"
                                                                      },
                                                                      {
                                                                        "type": "FunctionExpression",
                                                                        "id": null,
                                                                        "params": [
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "table"
                                                                          }
                                                                        ],
                                                                        "defaults": [],
                                                                        "body": {
                                                                          "type": "BlockStatement",
                                                                          "body": [
                                                                            {
                                                                              "type": "ExpressionStatement",
                                                                              "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "angular"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "extend"
                                                                                  }
                                                                                },
                                                                                "arguments": [
                                                                                  {
                                                                                    "type": "Identifier",
                                                                                    "name": "translationTable"
                                                                                  },
                                                                                  {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                      "type": "Identifier",
                                                                                      "name": "flatObject"
                                                                                    },
                                                                                    "arguments": [
                                                                                      {
                                                                                        "type": "Identifier",
                                                                                        "name": "table"
                                                                                      }
                                                                                    ]
                                                                                  }
                                                                                ]
                                                                              }
                                                                            }
                                                                          ]
                                                                        },
                                                                        "rest": null,
                                                                        "generator": false,
                                                                        "expression": false
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "angular"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "extend"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "translationTable"
                                                                      },
                                                                      {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "flatObject"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "data"
                                                                          }
                                                                        ]
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "pendingLoader"
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": false
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "deferred"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "resolve"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "ObjectExpression",
                                                                  "properties": [
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                      },
                                                                      "value": {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                      },
                                                                      "kind": "init"
                                                                    },
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "table"
                                                                      },
                                                                      "value": {
                                                                        "type": "Identifier",
                                                                        "name": "translationTable"
                                                                      },
                                                                      "kind": "init"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "$rootScope"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "$emit"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "$translateLoadingEnd"
                                                                },
                                                                {
                                                                  "type": "ObjectExpression",
                                                                  "properties": [
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "language"
                                                                      },
                                                                      "value": {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                      },
                                                                      "kind": "init"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "rest": null,
                                                      "generator": false,
                                                      "expression": false
                                                    },
                                                    {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "key"
                                                        }
                                                      ],
                                                      "defaults": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "$rootScope"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "$emit"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "$translateLoadingError"
                                                                },
                                                                {
                                                                  "type": "ObjectExpression",
                                                                  "properties": [
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "language"
                                                                      },
                                                                      "value": {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                      },
                                                                      "kind": "init"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "deferred"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "reject"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "key"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "$rootScope"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "$emit"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "$translateLoadingEnd"
                                                                },
                                                                {
                                                                  "type": "ObjectExpression",
                                                                  "properties": [
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "language"
                                                                      },
                                                                      "value": {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                      },
                                                                      "kind": "init"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "rest": null,
                                                      "generator": false,
                                                      "expression": false
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "deferred"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "promise"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "$storageFactory"
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "Storage"
                                            },
                                            "right": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "$injector"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "get"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "$storageFactory"
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "LogicalExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "Storage"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "get"
                                                }
                                              },
                                              "prefix": true
                                            },
                                            "right": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "Storage"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "set"
                                                }
                                              },
                                              "prefix": true
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ThrowStatement",
                                                "argument": {
                                                  "type": "NewExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "Error"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": "Couldn't use storage '"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "$storageFactory"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "', missing get() or set() method!"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "angular"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "isFunction"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "defaultInterpolator"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "useSanitizeValueStrategy"
                                          }
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "defaultInterpolator"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "useSanitizeValueStrategy"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "$interpolationSanitizationStrategy"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "$interpolatorFactories"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "angular"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "forEach"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "$interpolatorFactories"
                                              },
                                              {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "interpolatorFactory"
                                                  }
                                                ],
                                                "defaults": [],
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "interpolator"
                                                          },
                                                          "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "$injector"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "get"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "interpolatorFactory"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "interpolator"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "setLocale"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "LogicalExpression",
                                                            "operator": "||",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "$preferredLanguage"
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "$uses"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "angular"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "isFunction"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "interpolator"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "useSanitizeValueStrategy"
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "interpolator"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "useSanitizeValueStrategy"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "$interpolationSanitizationStrategy"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "MemberExpression",
                                                          "computed": true,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "interpolatorHashMap"
                                                          },
                                                          "property": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "interpolator"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "getInterpolationIdentifier"
                                                              }
                                                            },
                                                            "arguments": []
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "interpolator"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "rest": null,
                                                "generator": false,
                                                "expression": false
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "getTranslationTable"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "langKey"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "deferred"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$q"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "defer"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "Object"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "prototype"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "hasOwnProperty"
                                                      }
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "call"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "$translationTable"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "langKey"
                                                    }
                                                  ]
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "deferred"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "resolve"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "$translationTable"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "langKey"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "langPromises"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "langKey"
                                                    }
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "MemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "langPromises"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "langKey"
                                                              }
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "then"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "FunctionExpression",
                                                              "id": null,
                                                              "params": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "data"
                                                                }
                                                              ],
                                                              "defaults": [],
                                                              "body": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "translations"
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "data"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "key"
                                                                          }
                                                                        },
                                                                        {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "data"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "table"
                                                                          }
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "deferred"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "resolve"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "data"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "table"
                                                                          }
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "rest": null,
                                                              "generator": false,
                                                              "expression": false
                                                            },
                                                            {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "deferred"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "reject"
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "alternate": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "deferred"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "reject"
                                                            }
                                                          },
                                                          "arguments": []
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "deferred"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "promise"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "getFallbackTranslation"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "langKey"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "Interpolator"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "deferred"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$q"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "defer"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "getTranslationTable"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "langKey"
                                                        }
                                                      ]
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "then"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "translationTable"
                                                        }
                                                      ],
                                                      "defaults": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "Object"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "prototype"
                                                                    }
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "hasOwnProperty"
                                                                  }
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "call"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "translationTable"
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "translationId"
                                                                }
                                                              ]
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "Interpolator"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "setLocale"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "langKey"
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "deferred"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "resolve"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "Interpolator"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "interpolate"
                                                                          }
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "translationTable"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "translationId"
                                                                            }
                                                                          },
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "interpolateParams"
                                                                          }
                                                                        ]
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "Interpolator"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "setLocale"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "$uses"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "deferred"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "reject"
                                                                      }
                                                                    },
                                                                    "arguments": []
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "rest": null,
                                                      "generator": false,
                                                      "expression": false
                                                    },
                                                    {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "deferred"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "reject"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "deferred"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "promise"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "getFallbackTranslationInstant"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "langKey"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "Interpolator"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "result"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "translationTable"
                                                    },
                                                    "init": {
                                                      "type": "MemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "$translationTable"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "langKey"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "Object"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "prototype"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "hasOwnProperty"
                                                      }
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "call"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "translationTable"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    }
                                                  ]
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "Interpolator"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "setLocale"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "langKey"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "result"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "Interpolator"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "interpolate"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "MemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "translationTable"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "translationId"
                                                              }
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "interpolateParams"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "Interpolator"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "setLocale"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "$uses"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "result"
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "translateByHandler"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "Identifier",
                                                  "name": "$missingTranslationHandlerFactory"
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "resultString"
                                                          },
                                                          "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "$injector"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "get"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "$missingTranslationHandlerFactory"
                                                                }
                                                              ]
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "translationId"
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "$uses"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!==",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "resultString"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "undefined"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "resultString"
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "translationId"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ReturnStatement",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "translationId"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "resolveForFallbackLanguage"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "fallbackLanguageIndex"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "Interpolator"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "deferred"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$q"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "defer"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "<",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "fallbackLanguageIndex"
                                                  },
                                                  "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "$fallbackLanguage"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "length"
                                                    }
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "langKey"
                                                          },
                                                          "init": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "$fallbackLanguage"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "fallbackLanguageIndex"
                                                            }
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "getFallbackTranslation"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "langKey"
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "translationId"
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "interpolateParams"
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "Interpolator"
                                                              }
                                                            ]
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "then"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "deferred"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "resolve"
                                                            }
                                                          },
                                                          {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "resolveForFallbackLanguage"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                              "type": "Identifier",
                                                                              "name": "fallbackLanguageIndex"
                                                                            },
                                                                            "right": {
                                                                              "type": "Literal",
                                                                              "value": 1
                                                                            }
                                                                          },
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "translationId"
                                                                          },
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "interpolateParams"
                                                                          },
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "Interpolator"
                                                                          }
                                                                        ]
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "then"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "deferred"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "resolve"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "deferred"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "resolve"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "translateByHandler"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "translationId"
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "deferred"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "promise"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "resolveForFallbackLanguageInstant"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "fallbackLanguageIndex"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "Interpolator"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "result"
                                                    },
                                                    "init": null
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "<",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "fallbackLanguageIndex"
                                                  },
                                                  "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "$fallbackLanguage"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "length"
                                                    }
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "langKey"
                                                          },
                                                          "init": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "$fallbackLanguage"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "fallbackLanguageIndex"
                                                            }
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "result"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "getFallbackTranslationInstant"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "langKey"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "translationId"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "interpolateParams"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "Interpolator"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "result"
                                                        },
                                                        "prefix": true
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "result"
                                                              },
                                                              "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "resolveForFallbackLanguageInstant"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "fallbackLanguageIndex"
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": 1
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "translationId"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "interpolateParams"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "Interpolator"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "result"
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "fallbackTranslation"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "Interpolator"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "resolveForFallbackLanguage"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "startFallbackIteration"
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": 0
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "Identifier",
                                                        "name": "startFallbackIteration"
                                                      },
                                                      "alternate": {
                                                        "type": "Identifier",
                                                        "name": "fallbackIndex"
                                                      }
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "interpolateParams"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "Interpolator"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "fallbackTranslationInstant"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "Interpolator"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "resolveForFallbackLanguageInstant"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "startFallbackIteration"
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": 0
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "Identifier",
                                                        "name": "startFallbackIteration"
                                                      },
                                                      "alternate": {
                                                        "type": "Identifier",
                                                        "name": "fallbackIndex"
                                                      }
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "interpolateParams"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "Interpolator"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "determineTranslation"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolationId"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "deferred"
                                                    },
                                                    "init": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$q"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "defer"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "table"
                                                    },
                                                    "init": {
                                                      "type": "ConditionalExpression",
                                                      "test": {
                                                        "type": "Identifier",
                                                        "name": "$uses"
                                                      },
                                                      "consequent": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$translationTable"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "$uses"
                                                        }
                                                      },
                                                      "alternate": {
                                                        "type": "Identifier",
                                                        "name": "$translationTable"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "Interpolator"
                                                    },
                                                    "init": {
                                                      "type": "ConditionalExpression",
                                                      "test": {
                                                        "type": "Identifier",
                                                        "name": "interpolationId"
                                                      },
                                                      "consequent": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "interpolatorHashMap"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "interpolationId"
                                                        }
                                                      },
                                                      "alternate": {
                                                        "type": "Identifier",
                                                        "name": "defaultInterpolator"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "LogicalExpression",
                                                  "operator": "&&",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "table"
                                                  },
                                                  "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "Object"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "prototype"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "hasOwnProperty"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "call"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "table"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "translationId"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "translation"
                                                          },
                                                          "init": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "table"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "translationId"
                                                            }
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "translation"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "substr"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": 0
                                                            },
                                                            {
                                                              "type": "Literal",
                                                              "value": 2
                                                            }
                                                          ]
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "@:"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "$translate"
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "translation"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "substr"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "Literal",
                                                                          "value": 2
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "interpolateParams"
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "interpolationId"
                                                                    }
                                                                  ]
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "then"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "deferred"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "resolve"
                                                                  }
                                                                },
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "deferred"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "reject"
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "deferred"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "resolve"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "Interpolator"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "interpolate"
                                                                    }
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "translation"
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "interpolateParams"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "missingTranslationHandlerTranslation"
                                                          },
                                                          "init": null
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "$missingTranslationHandlerFactory"
                                                        },
                                                        "right": {
                                                          "type": "UnaryExpression",
                                                          "operator": "!",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "pendingLoader"
                                                          },
                                                          "prefix": true
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "missingTranslationHandlerTranslation"
                                                              },
                                                              "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "translateByHandler"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "translationId"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                          "type": "LogicalExpression",
                                                          "operator": "&&",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "$uses"
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "$fallbackLanguage"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "$fallbackLanguage"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "length"
                                                          }
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "fallbackTranslation"
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "translationId"
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "interpolateParams"
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "Interpolator"
                                                                    }
                                                                  ]
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "then"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "FunctionExpression",
                                                                  "id": null,
                                                                  "params": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "translation"
                                                                    }
                                                                  ],
                                                                  "defaults": [],
                                                                  "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "deferred"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "resolve"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "name": "translation"
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "rest": null,
                                                                  "generator": false,
                                                                  "expression": false
                                                                },
                                                                {
                                                                  "type": "FunctionExpression",
                                                                  "id": null,
                                                                  "params": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "_translationId"
                                                                    }
                                                                  ],
                                                                  "defaults": [],
                                                                  "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "deferred"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "reject"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "applyNotFoundIndicators"
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "name": "_translationId"
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "rest": null,
                                                                  "generator": false,
                                                                  "expression": false
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "LogicalExpression",
                                                          "operator": "&&",
                                                          "left": {
                                                            "type": "LogicalExpression",
                                                            "operator": "&&",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "$missingTranslationHandlerFactory"
                                                            },
                                                            "right": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "pendingLoader"
                                                              },
                                                              "prefix": true
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "missingTranslationHandlerTranslation"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "deferred"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "resolve"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "missingTranslationHandlerTranslation"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "deferred"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "reject"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "applyNotFoundIndicators"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "translationId"
                                                                      }
                                                                    ]
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "deferred"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "promise"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "determineTranslationInstant"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "translationId"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "interpolationId"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "result"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "table"
                                                    },
                                                    "init": {
                                                      "type": "ConditionalExpression",
                                                      "test": {
                                                        "type": "Identifier",
                                                        "name": "$uses"
                                                      },
                                                      "consequent": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$translationTable"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "$uses"
                                                        }
                                                      },
                                                      "alternate": {
                                                        "type": "Identifier",
                                                        "name": "$translationTable"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "Interpolator"
                                                    },
                                                    "init": {
                                                      "type": "ConditionalExpression",
                                                      "test": {
                                                        "type": "Identifier",
                                                        "name": "interpolationId"
                                                      },
                                                      "consequent": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "interpolatorHashMap"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "interpolationId"
                                                        }
                                                      },
                                                      "alternate": {
                                                        "type": "Identifier",
                                                        "name": "defaultInterpolator"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "LogicalExpression",
                                                  "operator": "&&",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "table"
                                                  },
                                                  "right": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "Object"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "prototype"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "hasOwnProperty"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "call"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "table"
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "translationId"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "translation"
                                                          },
                                                          "init": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "table"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "translationId"
                                                            }
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "translation"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "substr"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": 0
                                                            },
                                                            {
                                                              "type": "Literal",
                                                              "value": 2
                                                            }
                                                          ]
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "@:"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "result"
                                                              },
                                                              "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "determineTranslationInstant"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "translation"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "substr"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Literal",
                                                                        "value": 2
                                                                      }
                                                                    ]
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "interpolateParams"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "interpolationId"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "result"
                                                              },
                                                              "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "Interpolator"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "interpolate"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "translation"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "interpolateParams"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "missingTranslationHandlerTranslation"
                                                          },
                                                          "init": null
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "$missingTranslationHandlerFactory"
                                                        },
                                                        "right": {
                                                          "type": "UnaryExpression",
                                                          "operator": "!",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "pendingLoader"
                                                          },
                                                          "prefix": true
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "missingTranslationHandlerTranslation"
                                                              },
                                                              "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "translateByHandler"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "translationId"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                          "type": "LogicalExpression",
                                                          "operator": "&&",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "$uses"
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "$fallbackLanguage"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "$fallbackLanguage"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "length"
                                                          }
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "fallbackIndex"
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": 0
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "result"
                                                              },
                                                              "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "fallbackTranslationInstant"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "translationId"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "interpolateParams"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "Interpolator"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "LogicalExpression",
                                                          "operator": "&&",
                                                          "left": {
                                                            "type": "LogicalExpression",
                                                            "operator": "&&",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "$missingTranslationHandlerFactory"
                                                            },
                                                            "right": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "pendingLoader"
                                                              },
                                                              "prefix": true
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "missingTranslationHandlerTranslation"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "result"
                                                                },
                                                                "right": {
                                                                  "type": "Identifier",
                                                                  "name": "missingTranslationHandlerTranslation"
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "result"
                                                                },
                                                                "right": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "applyNotFoundIndicators"
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "translationId"
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "result"
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "preferredLanguage"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                          {
                                            "type": "Identifier",
                                            "name": "langKey"
                                          }
                                        ],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "langKey"
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "setupPreferredLanguage"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "langKey"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "$preferredLanguage"
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "cloakClassName"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "$cloakClassName"
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "fallbackLanguage"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                          {
                                            "type": "Identifier",
                                            "name": "langKey"
                                          }
                                        ],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!==",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "langKey"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "undefined"
                                                  }
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!==",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "langKey"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": null
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "fallbackStack"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "langKey"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "Identifier",
                                                      "name": "$loaderFactory"
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "IfStatement",
                                                          "test": {
                                                            "type": "LogicalExpression",
                                                            "operator": "&&",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "$fallbackLanguage"
                                                            },
                                                            "right": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "$fallbackLanguage"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "length"
                                                              }
                                                            }
                                                          },
                                                          "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ForStatement",
                                                                "init": {
                                                                  "type": "VariableDeclaration",
                                                                  "declarations": [
                                                                    {
                                                                      "type": "VariableDeclarator",
                                                                      "id": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                      },
                                                                      "init": {
                                                                        "type": "Literal",
                                                                        "value": 0
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "VariableDeclarator",
                                                                      "id": {
                                                                        "type": "Identifier",
                                                                        "name": "len"
                                                                      },
                                                                      "init": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "$fallbackLanguage"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "length"
                                                                        }
                                                                      }
                                                                    }
                                                                  ],
                                                                  "kind": "var"
                                                                },
                                                                "test": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "<",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "i"
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "len"
                                                                  }
                                                                },
                                                                "update": {
                                                                  "type": "UpdateExpression",
                                                                  "operator": "++",
                                                                  "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "i"
                                                                  },
                                                                  "prefix": false
                                                                },
                                                                "body": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "IfStatement",
                                                                      "test": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "!",
                                                                        "argument": {
                                                                          "type": "MemberExpression",
                                                                          "computed": true,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "langPromises"
                                                                          },
                                                                          "property": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "$fallbackLanguage"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "i"
                                                                            }
                                                                          }
                                                                        },
                                                                        "prefix": true
                                                                      },
                                                                      "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                          {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                              "type": "AssignmentExpression",
                                                                              "operator": "=",
                                                                              "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "langPromises"
                                                                                },
                                                                                "property": {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": true,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "$fallbackLanguage"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                  }
                                                                                }
                                                                              },
                                                                              "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                  "type": "Identifier",
                                                                                  "name": "loadAsync"
                                                                                },
                                                                                "arguments": [
                                                                                  {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                      "type": "Identifier",
                                                                                      "name": "$fallbackLanguage"
                                                                                    },
                                                                                    "property": {
                                                                                      "type": "Identifier",
                                                                                      "name": "i"
                                                                                    }
                                                                                  }
                                                                                ]
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      },
                                                                      "alternate": null
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "alternate": null
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$translate"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "use"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "$translate"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "use"
                                                            }
                                                          },
                                                          "arguments": []
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "$fallbackWasString"
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                      "type": "MemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "$fallbackLanguage"
                                                      },
                                                      "property": {
                                                        "type": "Literal",
                                                        "value": 0
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "$fallbackLanguage"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "useFallbackLanguage"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                          {
                                            "type": "Identifier",
                                            "name": "langKey"
                                          }
                                        ],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!==",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "langKey"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "undefined"
                                                  }
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!==",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "langKey"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": null
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "UnaryExpression",
                                                      "operator": "!",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "langKey"
                                                      },
                                                      "prefix": true
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "startFallbackIteration"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": 0
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "VariableDeclaration",
                                                          "declarations": [
                                                            {
                                                              "type": "VariableDeclarator",
                                                              "id": {
                                                                "type": "Identifier",
                                                                "name": "langKeyPosition"
                                                              },
                                                              "init": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "indexOf"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "$fallbackLanguage"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "langKey"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ],
                                                          "kind": "var"
                                                        },
                                                        {
                                                          "type": "IfStatement",
                                                          "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": ">",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "langKeyPosition"
                                                            },
                                                            "right": {
                                                              "type": "UnaryExpression",
                                                              "operator": "-",
                                                              "argument": {
                                                                "type": "Literal",
                                                                "value": 1
                                                              },
                                                              "prefix": true
                                                            }
                                                          },
                                                          "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "startFallbackIteration"
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "langKeyPosition"
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "alternate": null
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "proposedLanguage"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "$nextLang"
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "storage"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "Storage"
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "use"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                          {
                                            "type": "Identifier",
                                            "name": "key"
                                          }
                                        ],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "key"
                                                },
                                                "prefix": true
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "$uses"
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "deferred"
                                                  },
                                                  "init": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "$q"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "defer"
                                                      }
                                                    },
                                                    "arguments": []
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "$rootScope"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "$emit"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": "$translateChangeStart"
                                                  },
                                                  {
                                                    "type": "ObjectExpression",
                                                    "properties": [
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Identifier",
                                                          "name": "language"
                                                        },
                                                        "value": {
                                                          "type": "Identifier",
                                                          "name": "key"
                                                        },
                                                        "kind": "init"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "aliasedKey"
                                                  },
                                                  "init": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "negotiateLocale"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "key"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "aliasedKey"
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "key"
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "aliasedKey"
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "LogicalExpression",
                                                  "operator": "&&",
                                                  "left": {
                                                    "type": "UnaryExpression",
                                                    "operator": "!",
                                                    "argument": {
                                                      "type": "MemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "$translationTable"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "key"
                                                      }
                                                    },
                                                    "prefix": true
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "$loaderFactory"
                                                  }
                                                },
                                                "right": {
                                                  "type": "UnaryExpression",
                                                  "operator": "!",
                                                  "argument": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "langPromises"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "key"
                                                    }
                                                  },
                                                  "prefix": true
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "$nextLang"
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "key"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "langPromises"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "key"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "loadAsync"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                              }
                                                            ]
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "then"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "translation"
                                                              }
                                                            ],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "translations"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "translation"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "key"
                                                                        }
                                                                      },
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "translation"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "table"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "deferred"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "resolve"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "translation"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "key"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "useLanguage"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "translation"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "key"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "IfStatement",
                                                                  "test": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "$nextLang"
                                                                    },
                                                                    "right": {
                                                                      "type": "Identifier",
                                                                      "name": "key"
                                                                    }
                                                                  },
                                                                  "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "AssignmentExpression",
                                                                          "operator": "=",
                                                                          "left": {
                                                                            "type": "Identifier",
                                                                            "name": "$nextLang"
                                                                          },
                                                                          "right": {
                                                                            "type": "Identifier",
                                                                            "name": "undefined"
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "alternate": null
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          },
                                                          {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "key"
                                                              }
                                                            ],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "IfStatement",
                                                                  "test": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "$nextLang"
                                                                    },
                                                                    "right": {
                                                                      "type": "Identifier",
                                                                      "name": "key"
                                                                    }
                                                                  },
                                                                  "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "AssignmentExpression",
                                                                          "operator": "=",
                                                                          "left": {
                                                                            "type": "Identifier",
                                                                            "name": "$nextLang"
                                                                          },
                                                                          "right": {
                                                                            "type": "Identifier",
                                                                            "name": "undefined"
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "alternate": null
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "$rootScope"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "$emit"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Literal",
                                                                        "value": "$translateChangeError"
                                                                      },
                                                                      {
                                                                        "type": "ObjectExpression",
                                                                        "properties": [
                                                                          {
                                                                            "type": "Property",
                                                                            "key": {
                                                                              "type": "Identifier",
                                                                              "name": "language"
                                                                            },
                                                                            "value": {
                                                                              "type": "Identifier",
                                                                              "name": "key"
                                                                            },
                                                                            "kind": "init"
                                                                          }
                                                                        ]
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "deferred"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "reject"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "key"
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "$rootScope"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "$emit"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Literal",
                                                                        "value": "$translateChangeEnd"
                                                                      },
                                                                      {
                                                                        "type": "ObjectExpression",
                                                                        "properties": [
                                                                          {
                                                                            "type": "Property",
                                                                            "key": {
                                                                              "type": "Identifier",
                                                                              "name": "language"
                                                                            },
                                                                            "value": {
                                                                              "type": "Identifier",
                                                                              "name": "key"
                                                                            },
                                                                            "kind": "init"
                                                                          }
                                                                        ]
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "deferred"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "resolve"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "key"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "useLanguage"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "key"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "deferred"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "promise"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "storageKey"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "storageKey"
                                                },
                                                "arguments": []
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "isPostCompilingEnabled"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "$postCompilingEnabled"
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "refresh"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                          {
                                            "type": "Identifier",
                                            "name": "langKey"
                                          }
                                        ],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "$loaderFactory"
                                                },
                                                "prefix": true
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ThrowStatement",
                                                    "argument": {
                                                      "type": "NewExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "Error"
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Literal",
                                                          "value": "Couldn't refresh translation table, no loader registered!"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "deferred"
                                                  },
                                                  "init": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "$q"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "defer"
                                                      }
                                                    },
                                                    "arguments": []
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "FunctionDeclaration",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "resolve"
                                              },
                                              "params": [],
                                              "defaults": [],
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "deferred"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "resolve"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$rootScope"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "$emit"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Literal",
                                                          "value": "$translateRefreshEnd"
                                                        },
                                                        {
                                                          "type": "ObjectExpression",
                                                          "properties": [
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "language"
                                                              },
                                                              "value": {
                                                                "type": "Identifier",
                                                                "name": "langKey"
                                                              },
                                                              "kind": "init"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "rest": null,
                                              "generator": false,
                                              "expression": false
                                            },
                                            {
                                              "type": "FunctionDeclaration",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "reject"
                                              },
                                              "params": [],
                                              "defaults": [],
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "deferred"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "reject"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$rootScope"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "$emit"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Literal",
                                                          "value": "$translateRefreshEnd"
                                                        },
                                                        {
                                                          "type": "ObjectExpression",
                                                          "properties": [
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "language"
                                                              },
                                                              "value": {
                                                                "type": "Identifier",
                                                                "name": "langKey"
                                                              },
                                                              "kind": "init"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "rest": null,
                                              "generator": false,
                                              "expression": false
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "$rootScope"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "$emit"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": "$translateRefreshStart"
                                                  },
                                                  {
                                                    "type": "ObjectExpression",
                                                    "properties": [
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Identifier",
                                                          "name": "language"
                                                        },
                                                        "value": {
                                                          "type": "Identifier",
                                                          "name": "langKey"
                                                        },
                                                        "kind": "init"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "langKey"
                                                },
                                                "prefix": true
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                      {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                          "type": "Identifier",
                                                          "name": "tables"
                                                        },
                                                        "init": {
                                                          "type": "ArrayExpression",
                                                          "elements": []
                                                        }
                                                      },
                                                      {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                          "type": "Identifier",
                                                          "name": "loadingKeys"
                                                        },
                                                        "init": {
                                                          "type": "ObjectExpression",
                                                          "properties": []
                                                        }
                                                      }
                                                    ],
                                                    "kind": "var"
                                                  },
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "LogicalExpression",
                                                      "operator": "&&",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "$fallbackLanguage"
                                                      },
                                                      "right": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$fallbackLanguage"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "length"
                                                        }
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ForStatement",
                                                          "init": {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                              {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                  "type": "Identifier",
                                                                  "name": "i"
                                                                },
                                                                "init": {
                                                                  "type": "Literal",
                                                                  "value": 0
                                                                }
                                                              },
                                                              {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                  "type": "Identifier",
                                                                  "name": "len"
                                                                },
                                                                "init": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "$fallbackLanguage"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            "kind": "var"
                                                          },
                                                          "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "<",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "i"
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "len"
                                                            }
                                                          },
                                                          "update": {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "i"
                                                            },
                                                            "prefix": false
                                                          },
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "tables"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "push"
                                                                    }
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "loadAsync"
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "MemberExpression",
                                                                          "computed": true,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "$fallbackLanguage"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                          }
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "loadingKeys"
                                                                    },
                                                                    "property": {
                                                                      "type": "MemberExpression",
                                                                      "computed": true,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "$fallbackLanguage"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                      }
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": true
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  },
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "LogicalExpression",
                                                      "operator": "&&",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "$uses"
                                                      },
                                                      "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                          "type": "MemberExpression",
                                                          "computed": true,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "loadingKeys"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "$uses"
                                                          }
                                                        },
                                                        "prefix": true
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "tables"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "push"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "loadAsync"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "$uses"
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "$q"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "all"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "tables"
                                                            }
                                                          ]
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "then"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "FunctionExpression",
                                                          "id": null,
                                                          "params": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "tableData"
                                                            }
                                                          ],
                                                          "defaults": [],
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "angular"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "forEach"
                                                                    }
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "tableData"
                                                                    },
                                                                    {
                                                                      "type": "FunctionExpression",
                                                                      "id": null,
                                                                      "params": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "name": "data"
                                                                        }
                                                                      ],
                                                                      "defaults": [],
                                                                      "body": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                          {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                              "type": "MemberExpression",
                                                                              "computed": true,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "$translationTable"
                                                                              },
                                                                              "property": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "data"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "key"
                                                                                }
                                                                              }
                                                                            },
                                                                            "consequent": {
                                                                              "type": "BlockStatement",
                                                                              "body": [
                                                                                {
                                                                                  "type": "ExpressionStatement",
                                                                                  "expression": {
                                                                                    "type": "UnaryExpression",
                                                                                    "operator": "delete",
                                                                                    "argument": {
                                                                                      "type": "MemberExpression",
                                                                                      "computed": true,
                                                                                      "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "$translationTable"
                                                                                      },
                                                                                      "property": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                          "type": "Identifier",
                                                                                          "name": "data"
                                                                                        },
                                                                                        "property": {
                                                                                          "type": "Identifier",
                                                                                          "name": "key"
                                                                                        }
                                                                                      }
                                                                                    },
                                                                                    "prefix": true
                                                                                  }
                                                                                }
                                                                              ]
                                                                            },
                                                                            "alternate": null
                                                                          },
                                                                          {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "translations"
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "data"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "key"
                                                                                  }
                                                                                },
                                                                                {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "data"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "table"
                                                                                  }
                                                                                }
                                                                              ]
                                                                            }
                                                                          }
                                                                        ]
                                                                      },
                                                                      "rest": null,
                                                                      "generator": false,
                                                                      "expression": false
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                  "type": "Identifier",
                                                                  "name": "$uses"
                                                                },
                                                                "consequent": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "useLanguage"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Identifier",
                                                                            "name": "$uses"
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "alternate": null
                                                              },
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "resolve"
                                                                  },
                                                                  "arguments": []
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "rest": null,
                                                          "generator": false,
                                                          "expression": false
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "$translationTable"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "langKey"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "loadAsync"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "langKey"
                                                              }
                                                            ]
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "then"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "data"
                                                              }
                                                            ],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "translations"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "data"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "key"
                                                                        }
                                                                      },
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "data"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "table"
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                },
                                                                {
                                                                  "type": "IfStatement",
                                                                  "test": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "langKey"
                                                                    },
                                                                    "right": {
                                                                      "type": "Identifier",
                                                                      "name": "$uses"
                                                                    }
                                                                  },
                                                                  "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "useLanguage"
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Identifier",
                                                                              "name": "$uses"
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "alternate": null
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "resolve"
                                                                    },
                                                                    "arguments": []
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "reject"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "reject"
                                                        },
                                                        "arguments": []
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "deferred"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "promise"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "instant"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                          {
                                            "type": "Identifier",
                                            "name": "translationId"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "interpolateParams"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "interpolationId"
                                          }
                                        ],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "||",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "translationId"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": null
                                                  }
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "angular"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "isUndefined"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    }
                                                  ]
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "angular"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "isArray"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "translationId"
                                                  }
                                                ]
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                      {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                          "type": "Identifier",
                                                          "name": "results"
                                                        },
                                                        "init": {
                                                          "type": "ObjectExpression",
                                                          "properties": []
                                                        }
                                                      }
                                                    ],
                                                    "kind": "var"
                                                  },
                                                  {
                                                    "type": "ForStatement",
                                                    "init": {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "i"
                                                          },
                                                          "init": {
                                                            "type": "Literal",
                                                            "value": 0
                                                          }
                                                        },
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "c"
                                                          },
                                                          "init": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "translationId"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "length"
                                                            }
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": "<",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "c"
                                                      }
                                                    },
                                                    "update": {
                                                      "type": "UpdateExpression",
                                                      "operator": "++",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                      },
                                                      "prefix": false
                                                    },
                                                    "body": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "MemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "results"
                                                              },
                                                              "property": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "translationId"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "i"
                                                                }
                                                              }
                                                            },
                                                            "right": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "$translate"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "instant"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "translationId"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "i"
                                                                  }
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "interpolateParams"
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "interpolationId"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "results"
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "angular"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "isString"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    }
                                                  ]
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "<",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "length"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": 1
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "translationId"
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "translationId"
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "trim"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "apply"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "translationId"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "result"
                                                  },
                                                  "init": null
                                                },
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "possibleLangKeys"
                                                  },
                                                  "init": {
                                                    "type": "ArrayExpression",
                                                    "elements": []
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "$preferredLanguage"
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "possibleLangKeys"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "push"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "$preferredLanguage"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "$uses"
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "possibleLangKeys"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "push"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "$uses"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "$fallbackLanguage"
                                                },
                                                "right": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "$fallbackLanguage"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "length"
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "possibleLangKeys"
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "possibleLangKeys"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "concat"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "$fallbackLanguage"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "ForStatement",
                                              "init": {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "j"
                                                    },
                                                    "init": {
                                                      "type": "Literal",
                                                      "value": 0
                                                    }
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "d"
                                                    },
                                                    "init": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "possibleLangKeys"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              "test": {
                                                "type": "BinaryExpression",
                                                "operator": "<",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "j"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "d"
                                                }
                                              },
                                              "update": {
                                                "type": "UpdateExpression",
                                                "operator": "++",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "j"
                                                },
                                                "prefix": false
                                              },
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                      {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                          "type": "Identifier",
                                                          "name": "possibleLangKey"
                                                        },
                                                        "init": {
                                                          "type": "MemberExpression",
                                                          "computed": true,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "possibleLangKeys"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "j"
                                                          }
                                                        }
                                                      }
                                                    ],
                                                    "kind": "var"
                                                  },
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "MemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "$translationTable"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "possibleLangKey"
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "IfStatement",
                                                          "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                              "type": "UnaryExpression",
                                                              "operator": "typeof",
                                                              "argument": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                  "type": "MemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "$translationTable"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "possibleLangKey"
                                                                  }
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "translationId"
                                                                }
                                                              },
                                                              "prefix": true
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "undefined"
                                                            }
                                                          },
                                                          "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "result"
                                                                  },
                                                                  "right": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "determineTranslationInstant"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "translationId"
                                                                      },
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "interpolateParams"
                                                                      },
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "interpolationId"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "alternate": null
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  },
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": "!==",
                                                      "left": {
                                                        "type": "UnaryExpression",
                                                        "operator": "typeof",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "result"
                                                        },
                                                        "prefix": true
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "undefined"
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "BreakStatement",
                                                          "label": null
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "UnaryExpression",
                                                  "operator": "!",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "result"
                                                  },
                                                  "prefix": true
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!==",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "result"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": ""
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "result"
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "defaultInterpolator"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "interpolate"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "translationId"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "interpolateParams"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "LogicalExpression",
                                                      "operator": "&&",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "$missingTranslationHandlerFactory"
                                                      },
                                                      "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "pendingLoader"
                                                        },
                                                        "prefix": true
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "result"
                                                            },
                                                            "right": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "translateByHandler"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "translationId"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "result"
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "versionInfo"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "version"
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "$translate"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "loaderCache"
                                        }
                                      },
                                      "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "loaderCache"
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "$loaderFactory"
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "angular"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "equals"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "$translationTable"
                                              },
                                              {
                                                "type": "ObjectExpression",
                                                "properties": []
                                              }
                                            ]
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "$translate"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "use"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$translate"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "use"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "$fallbackLanguage"
                                            },
                                            "right": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "$fallbackLanguage"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "length"
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "processAsyncResult"
                                                    },
                                                    "init": {
                                                      "type": "FunctionExpression",
                                                      "id": null,
                                                      "params": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "translation"
                                                        }
                                                      ],
                                                      "defaults": [],
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "translations"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "translation"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "key"
                                                                  }
                                                                },
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "translation"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "table"
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "$rootScope"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "$emit"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "$translateChangeEnd"
                                                                },
                                                                {
                                                                  "type": "ObjectExpression",
                                                                  "properties": [
                                                                    {
                                                                      "type": "Property",
                                                                      "key": {
                                                                        "type": "Identifier",
                                                                        "name": "language"
                                                                      },
                                                                      "value": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "translation"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "key"
                                                                        }
                                                                      },
                                                                      "kind": "init"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "rest": null,
                                                      "generator": false,
                                                      "expression": false
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "ForStatement",
                                                "init": {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                      },
                                                      "init": {
                                                        "type": "Literal",
                                                        "value": 0
                                                      }
                                                    },
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "Identifier",
                                                        "name": "len"
                                                      },
                                                      "init": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$fallbackLanguage"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "length"
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "<",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "len"
                                                  }
                                                },
                                                "update": {
                                                  "type": "UpdateExpression",
                                                  "operator": "++",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  },
                                                  "prefix": false
                                                },
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "MemberExpression",
                                                          "computed": true,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "langPromises"
                                                          },
                                                          "property": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "$fallbackLanguage"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "i"
                                                            }
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "loadAsync"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "$fallbackLanguage"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "i"
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "then"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "processAsyncResult"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "$translate"
                                    }
                                  }
                                ]
                              },
                              "rest": null,
                              "generator": false,
                              "expression": false
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              }
            ]
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "angular"
              },
              "property": {
                "type": "Identifier",
                "name": "module"
              }
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "pascalprecht.translate"
              }
            ]
          },
          "property": {
            "type": "Identifier",
            "name": "factory"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "$translateDefaultInterpolation"
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "$interpolate"
              },
              {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "$interpolate"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$translateInterpolator"
                          },
                          "init": {
                            "type": "ObjectExpression",
                            "properties": []
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$locale"
                          },
                          "init": null
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$identifier"
                          },
                          "init": {
                            "type": "Literal",
                            "value": "default"
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "$sanitizeValueStrategy"
                          },
                          "init": {
                            "type": "Literal",
                            "value": null
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "sanitizeValueStrategies"
                          },
                          "init": {
                            "type": "ObjectExpression",
                            "properties": [
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Identifier",
                                  "name": "escaped"
                                },
                                "value": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "Identifier",
                                      "name": "params"
                                    }
                                  ],
                                  "defaults": [],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "result"
                                            },
                                            "init": {
                                              "type": "ObjectExpression",
                                              "properties": []
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ForInStatement",
                                        "left": {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              "init": null
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "params"
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "Object"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "prototype"
                                                      }
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "hasOwnProperty"
                                                    }
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "call"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "params"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                ]
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "result"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "key"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "angular"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "element"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Literal",
                                                                    "value": "<div></div>"
                                                                  }
                                                                ]
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "text"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "params"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "key"
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "html"
                                                          }
                                                        },
                                                        "arguments": []
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        },
                                        "each": false
                                      },
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "result"
                                        }
                                      }
                                    ]
                                  },
                                  "rest": null,
                                  "generator": false,
                                  "expression": false
                                },
                                "kind": "init"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "sanitizeParams"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "params"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "angular"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "isFunction"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "sanitizeValueStrategies"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "$sanitizeValueStrategy"
                                        }
                                      }
                                    ]
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "result"
                                          },
                                          "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "sanitizeValueStrategies"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "$sanitizeValueStrategy"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "params"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "result"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "params"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "result"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "$translateInterpolator"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "setLocale"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "locale"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$locale"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "locale"
                                  }
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "$translateInterpolator"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "getInterpolationIdentifier"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "$identifier"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "$translateInterpolator"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "useSanitizeValueStrategy"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "$sanitizeValueStrategy"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                }
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ThisExpression"
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "$translateInterpolator"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "interpolate"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "string"
                            },
                            {
                              "type": "Identifier",
                              "name": "interpolateParams"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "$sanitizeValueStrategy"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "interpolateParams"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "sanitizeParams"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "interpolateParams"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "$interpolate"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "string"
                                      }
                                    ]
                                  },
                                  "arguments": [
                                    {
                                      "type": "LogicalExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "interpolateParams"
                                      },
                                      "right": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "$translateInterpolator"
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              }
            ]
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "angular"
              },
              "property": {
                "type": "Identifier",
                "name": "module"
              }
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "pascalprecht.translate"
              }
            ]
          },
          "property": {
            "type": "Identifier",
            "name": "constant"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "$STORAGE_KEY"
          },
          {
            "type": "Literal",
            "value": "NG_TRANSLATE_LANG_KEY"
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "angular"
              },
              "property": {
                "type": "Identifier",
                "name": "module"
              }
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "pascalprecht.translate"
              }
            ]
          },
          "property": {
            "type": "Identifier",
            "name": "directive"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "translate"
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "$translate"
              },
              {
                "type": "Literal",
                "value": "$q"
              },
              {
                "type": "Literal",
                "value": "$interpolate"
              },
              {
                "type": "Literal",
                "value": "$compile"
              },
              {
                "type": "Literal",
                "value": "$parse"
              },
              {
                "type": "Literal",
                "value": "$rootScope"
              },
              {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "$translate"
                  },
                  {
                    "type": "Identifier",
                    "name": "$q"
                  },
                  {
                    "type": "Identifier",
                    "name": "$interpolate"
                  },
                  {
                    "type": "Identifier",
                    "name": "$compile"
                  },
                  {
                    "type": "Identifier",
                    "name": "$parse"
                  },
                  {
                    "type": "Identifier",
                    "name": "$rootScope"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "restrict"
                            },
                            "value": {
                              "type": "Literal",
                              "value": "AE"
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "scope"
                            },
                            "value": {
                              "type": "Literal",
                              "value": true
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "compile"
                            },
                            "value": {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "tElement"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "tAttr"
                                }
                              ],
                              "defaults": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "translateValuesExist"
                                        },
                                        "init": {
                                          "type": "ConditionalExpression",
                                          "test": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "tAttr"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "translateValues"
                                            }
                                          },
                                          "consequent": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "tAttr"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "translateValues"
                                            }
                                          },
                                          "alternate": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "translateInterpolation"
                                        },
                                        "init": {
                                          "type": "ConditionalExpression",
                                          "test": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "tAttr"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "translateInterpolation"
                                            }
                                          },
                                          "consequent": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "tAttr"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "translateInterpolation"
                                            }
                                          },
                                          "alternate": {
                                            "type": "Identifier",
                                            "name": "undefined"
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "translateValueExist"
                                        },
                                        "init": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "tElement"
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 0
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "outerHTML"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "match"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Literal",
                                              "value": {}
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "interpolateRegExp"
                                        },
                                        "init": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "^(.*)("
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "$interpolate"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "startSymbol"
                                                    }
                                                  },
                                                  "arguments": []
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": ".*"
                                              }
                                            },
                                            "right": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "$interpolate"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "endSymbol"
                                                }
                                              },
                                              "arguments": []
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": ")(.*)"
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "FunctionExpression",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "linkFn"
                                      },
                                      "params": [
                                        {
                                          "type": "Identifier",
                                          "name": "scope"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "iElement"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "iAttr"
                                        }
                                      ],
                                      "defaults": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "scope"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "interpolateParams"
                                                }
                                              },
                                              "right": {
                                                "type": "ObjectExpression",
                                                "properties": []
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "scope"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "preText"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": ""
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "scope"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "postText"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": ""
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "iAttr"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "$observe"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "translate"
                                                },
                                                {
                                                  "type": "FunctionExpression",
                                                  "id": null,
                                                  "params": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "translationId"
                                                    }
                                                  ],
                                                  "defaults": [],
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "LogicalExpression",
                                                          "operator": "||",
                                                          "left": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "angular"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "equals"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "translationId"
                                                              },
                                                              {
                                                                "type": "Literal",
                                                                "value": ""
                                                              }
                                                            ]
                                                          },
                                                          "right": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "angular"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "isDefined"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "translationId"
                                                                }
                                                              ]
                                                            },
                                                            "prefix": true
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "VariableDeclaration",
                                                              "declarations": [
                                                                {
                                                                  "type": "VariableDeclarator",
                                                                  "id": {
                                                                    "type": "Identifier",
                                                                    "name": "interpolateMatches"
                                                                  },
                                                                  "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "iElement"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "text"
                                                                          }
                                                                        },
                                                                        "arguments": []
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "match"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "interpolateRegExp"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ],
                                                              "kind": "var"
                                                            },
                                                            {
                                                              "type": "IfStatement",
                                                              "test": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "angular"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "isArray"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "interpolateMatches"
                                                                  }
                                                                ]
                                                              },
                                                              "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "AssignmentExpression",
                                                                      "operator": "=",
                                                                      "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "scope"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "preText"
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "interpolateMatches"
                                                                        },
                                                                        "property": {
                                                                          "type": "Literal",
                                                                          "value": 1
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "AssignmentExpression",
                                                                      "operator": "=",
                                                                      "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "scope"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "postText"
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "interpolateMatches"
                                                                        },
                                                                        "property": {
                                                                          "type": "Literal",
                                                                          "value": 3
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "AssignmentExpression",
                                                                      "operator": "=",
                                                                      "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "scope"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "translationId"
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "$interpolate"
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "MemberExpression",
                                                                              "computed": true,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "interpolateMatches"
                                                                              },
                                                                              "property": {
                                                                                "type": "Literal",
                                                                                "value": 2
                                                                              }
                                                                            }
                                                                          ]
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "scope"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "$parent"
                                                                            }
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "alternate": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "AssignmentExpression",
                                                                      "operator": "=",
                                                                      "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "scope"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "translationId"
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "iElement"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "text"
                                                                              }
                                                                            },
                                                                            "arguments": []
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "replace"
                                                                          }
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": {}
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": ""
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "scope"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "translationId"
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "Identifier",
                                                                  "name": "translationId"
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "rest": null,
                                                  "generator": false,
                                                  "expression": false
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "iAttr"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "$observe"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "translateDefault"
                                                },
                                                {
                                                  "type": "FunctionExpression",
                                                  "id": null,
                                                  "params": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "value"
                                                    }
                                                  ],
                                                  "defaults": [],
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "scope"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "defaultText"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "value"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "rest": null,
                                                  "generator": false,
                                                  "expression": false
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "Identifier",
                                              "name": "translateValuesExist"
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "iAttr"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "$observe"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "translateValues"
                                                      },
                                                      {
                                                        "type": "FunctionExpression",
                                                        "id": null,
                                                        "params": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "interpolateParams"
                                                          }
                                                        ],
                                                        "defaults": [],
                                                        "body": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "IfStatement",
                                                              "test": {
                                                                "type": "Identifier",
                                                                "name": "interpolateParams"
                                                              },
                                                              "consequent": {
                                                                "type": "BlockStatement",
                                                                "body": [
                                                                  {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "scope"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "$parent"
                                                                          }
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "$watch"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "FunctionExpression",
                                                                          "id": null,
                                                                          "params": [],
                                                                          "defaults": [],
                                                                          "body": {
                                                                            "type": "BlockStatement",
                                                                            "body": [
                                                                              {
                                                                                "type": "ExpressionStatement",
                                                                                "expression": {
                                                                                  "type": "CallExpression",
                                                                                  "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                      "type": "Identifier",
                                                                                      "name": "angular"
                                                                                    },
                                                                                    "property": {
                                                                                      "type": "Identifier",
                                                                                      "name": "extend"
                                                                                    }
                                                                                  },
                                                                                  "arguments": [
                                                                                    {
                                                                                      "type": "MemberExpression",
                                                                                      "computed": false,
                                                                                      "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "scope"
                                                                                      },
                                                                                      "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "interpolateParams"
                                                                                      }
                                                                                    },
                                                                                    {
                                                                                      "type": "CallExpression",
                                                                                      "callee": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                          "type": "Identifier",
                                                                                          "name": "$parse"
                                                                                        },
                                                                                        "arguments": [
                                                                                          {
                                                                                            "type": "Identifier",
                                                                                            "name": "interpolateParams"
                                                                                          }
                                                                                        ]
                                                                                      },
                                                                                      "arguments": [
                                                                                        {
                                                                                          "type": "MemberExpression",
                                                                                          "computed": false,
                                                                                          "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "scope"
                                                                                          },
                                                                                          "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "$parent"
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              }
                                                                            ]
                                                                          },
                                                                          "rest": null,
                                                                          "generator": false,
                                                                          "expression": false
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "alternate": null
                                                            }
                                                          ]
                                                        },
                                                        "rest": null,
                                                        "generator": false,
                                                        "expression": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          },
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "Identifier",
                                              "name": "translateValueExist"
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "Identifier",
                                                        "name": "fn"
                                                      },
                                                      "init": {
                                                        "type": "FunctionExpression",
                                                        "id": null,
                                                        "params": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "attrName"
                                                          }
                                                        ],
                                                        "defaults": [],
                                                        "body": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "iAttr"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "$observe"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "attrName"
                                                                  },
                                                                  {
                                                                    "type": "FunctionExpression",
                                                                    "id": null,
                                                                    "params": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "value"
                                                                      }
                                                                    ],
                                                                    "defaults": [],
                                                                    "body": {
                                                                      "type": "BlockStatement",
                                                                      "body": [
                                                                        {
                                                                          "type": "ExpressionStatement",
                                                                          "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                              "type": "MemberExpression",
                                                                              "computed": true,
                                                                              "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "scope"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "interpolateParams"
                                                                                }
                                                                              },
                                                                              "property": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                  "type": "CallExpression",
                                                                                  "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                      "type": "Identifier",
                                                                                      "name": "angular"
                                                                                    },
                                                                                    "property": {
                                                                                      "type": "Identifier",
                                                                                      "name": "lowercase"
                                                                                    }
                                                                                  },
                                                                                  "arguments": [
                                                                                    {
                                                                                      "type": "CallExpression",
                                                                                      "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                          "type": "Identifier",
                                                                                          "name": "attrName"
                                                                                        },
                                                                                        "property": {
                                                                                          "type": "Identifier",
                                                                                          "name": "substr"
                                                                                        }
                                                                                      },
                                                                                      "arguments": [
                                                                                        {
                                                                                          "type": "Literal",
                                                                                          "value": 14
                                                                                        },
                                                                                        {
                                                                                          "type": "Literal",
                                                                                          "value": 1
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                "right": {
                                                                                  "type": "CallExpression",
                                                                                  "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": false,
                                                                                    "object": {
                                                                                      "type": "Identifier",
                                                                                      "name": "attrName"
                                                                                    },
                                                                                    "property": {
                                                                                      "type": "Identifier",
                                                                                      "name": "substr"
                                                                                    }
                                                                                  },
                                                                                  "arguments": [
                                                                                    {
                                                                                      "type": "Literal",
                                                                                      "value": 15
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              }
                                                                            },
                                                                            "right": {
                                                                              "type": "Identifier",
                                                                              "name": "value"
                                                                            }
                                                                          }
                                                                        }
                                                                      ]
                                                                    },
                                                                    "rest": null,
                                                                    "generator": false,
                                                                    "expression": false
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "rest": null,
                                                        "generator": false,
                                                        "expression": false
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "ForInStatement",
                                                  "left": {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                      {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                          "type": "Identifier",
                                                          "name": "attr"
                                                        },
                                                        "init": null
                                                      }
                                                    ],
                                                    "kind": "var"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "iAttr"
                                                  },
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "LogicalExpression",
                                                          "operator": "&&",
                                                          "left": {
                                                            "type": "LogicalExpression",
                                                            "operator": "&&",
                                                            "left": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "Object"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "prototype"
                                                                    }
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "hasOwnProperty"
                                                                  }
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "call"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "iAttr"
                                                                },
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "attr"
                                                                }
                                                              ]
                                                            },
                                                            "right": {
                                                              "type": "BinaryExpression",
                                                              "operator": "===",
                                                              "left": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "attr"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "substr"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Literal",
                                                                    "value": 0
                                                                  },
                                                                  {
                                                                    "type": "Literal",
                                                                    "value": 14
                                                                  }
                                                                ]
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "translateValue"
                                                              }
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "attr"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "translateValues"
                                                            }
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "Identifier",
                                                                  "name": "fn"
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "attr"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      }
                                                    ]
                                                  },
                                                  "each": false
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "applyElementContent"
                                                },
                                                "init": {
                                                  "type": "FunctionExpression",
                                                  "id": null,
                                                  "params": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "value"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "scope"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "successful"
                                                    }
                                                  ],
                                                  "defaults": [],
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "LogicalExpression",
                                                          "operator": "&&",
                                                          "left": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                              "type": "Identifier",
                                                              "name": "successful"
                                                            },
                                                            "prefix": true
                                                          },
                                                          "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "!==",
                                                            "left": {
                                                              "type": "UnaryExpression",
                                                              "operator": "typeof",
                                                              "argument": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "scope"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "defaultText"
                                                                }
                                                              },
                                                              "prefix": true
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "undefined"
                                                            }
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "value"
                                                                },
                                                                "right": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "scope"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "defaultText"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "iElement"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "html"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "BinaryExpression",
                                                              "operator": "+",
                                                              "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "scope"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "preText"
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "Identifier",
                                                                  "name": "value"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "scope"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "postText"
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                          {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                              "type": "Identifier",
                                                              "name": "globallyEnabled"
                                                            },
                                                            "init": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "$translate"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "isPostCompilingEnabled"
                                                                }
                                                              },
                                                              "arguments": []
                                                            }
                                                          }
                                                        ],
                                                        "kind": "var"
                                                      },
                                                      {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                          {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                              "type": "Identifier",
                                                              "name": "locallyDefined"
                                                            },
                                                            "init": {
                                                              "type": "BinaryExpression",
                                                              "operator": "!==",
                                                              "left": {
                                                                "type": "UnaryExpression",
                                                                "operator": "typeof",
                                                                "argument": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "tAttr"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "translateCompile"
                                                                  }
                                                                },
                                                                "prefix": true
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "undefined"
                                                              }
                                                            }
                                                          }
                                                        ],
                                                        "kind": "var"
                                                      },
                                                      {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                          {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                              "type": "Identifier",
                                                              "name": "locallyEnabled"
                                                            },
                                                            "init": {
                                                              "type": "LogicalExpression",
                                                              "operator": "&&",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "locallyDefined"
                                                              },
                                                              "right": {
                                                                "type": "BinaryExpression",
                                                                "operator": "!==",
                                                                "left": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "tAttr"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "translateCompile"
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": "false"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        ],
                                                        "kind": "var"
                                                      },
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "LogicalExpression",
                                                          "operator": "||",
                                                          "left": {
                                                            "type": "LogicalExpression",
                                                            "operator": "&&",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "globallyEnabled"
                                                            },
                                                            "right": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "locallyDefined"
                                                              },
                                                              "prefix": true
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "locallyEnabled"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "$compile"
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "iElement"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "contents"
                                                                        }
                                                                      },
                                                                      "arguments": []
                                                                    }
                                                                  ]
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "scope"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      }
                                                    ]
                                                  },
                                                  "rest": null,
                                                  "generator": false,
                                                  "expression": false
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "updateTranslationFn"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "FunctionExpression",
                                                    "id": null,
                                                    "params": [],
                                                    "defaults": [],
                                                    "body": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "IfStatement",
                                                          "test": {
                                                            "type": "LogicalExpression",
                                                            "operator": "&&",
                                                            "left": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "translateValuesExist"
                                                              },
                                                              "prefix": true
                                                            },
                                                            "right": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "translateValueExist"
                                                              },
                                                              "prefix": true
                                                            }
                                                          },
                                                          "consequent": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                  "type": "FunctionExpression",
                                                                  "id": null,
                                                                  "params": [],
                                                                  "defaults": [],
                                                                  "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "VariableDeclaration",
                                                                        "declarations": [
                                                                          {
                                                                            "type": "VariableDeclarator",
                                                                            "id": {
                                                                              "type": "Identifier",
                                                                              "name": "unwatch"
                                                                            },
                                                                            "init": {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "scope"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "$watch"
                                                                                }
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": "translationId"
                                                                                },
                                                                                {
                                                                                  "type": "FunctionExpression",
                                                                                  "id": null,
                                                                                  "params": [
                                                                                    {
                                                                                      "type": "Identifier",
                                                                                      "name": "value"
                                                                                    }
                                                                                  ],
                                                                                  "defaults": [],
                                                                                  "body": {
                                                                                    "type": "BlockStatement",
                                                                                    "body": [
                                                                                      {
                                                                                        "type": "IfStatement",
                                                                                        "test": {
                                                                                          "type": "LogicalExpression",
                                                                                          "operator": "&&",
                                                                                          "left": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": false,
                                                                                            "object": {
                                                                                              "type": "Identifier",
                                                                                              "name": "scope"
                                                                                            },
                                                                                            "property": {
                                                                                              "type": "Identifier",
                                                                                              "name": "translationId"
                                                                                            }
                                                                                          },
                                                                                          "right": {
                                                                                            "type": "Identifier",
                                                                                            "name": "value"
                                                                                          }
                                                                                        },
                                                                                        "consequent": {
                                                                                          "type": "BlockStatement",
                                                                                          "body": [
                                                                                            {
                                                                                              "type": "ExpressionStatement",
                                                                                              "expression": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                  "type": "MemberExpression",
                                                                                                  "computed": false,
                                                                                                  "object": {
                                                                                                    "type": "CallExpression",
                                                                                                    "callee": {
                                                                                                      "type": "Identifier",
                                                                                                      "name": "$translate"
                                                                                                    },
                                                                                                    "arguments": [
                                                                                                      {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "value"
                                                                                                      },
                                                                                                      {
                                                                                                        "type": "ObjectExpression",
                                                                                                        "properties": []
                                                                                                      },
                                                                                                      {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "translateInterpolation"
                                                                                                      }
                                                                                                    ]
                                                                                                  },
                                                                                                  "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "then"
                                                                                                  }
                                                                                                },
                                                                                                "arguments": [
                                                                                                  {
                                                                                                    "type": "FunctionExpression",
                                                                                                    "id": null,
                                                                                                    "params": [
                                                                                                      {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "translation"
                                                                                                      }
                                                                                                    ],
                                                                                                    "defaults": [],
                                                                                                    "body": {
                                                                                                      "type": "BlockStatement",
                                                                                                      "body": [
                                                                                                        {
                                                                                                          "type": "ExpressionStatement",
                                                                                                          "expression": {
                                                                                                            "type": "CallExpression",
                                                                                                            "callee": {
                                                                                                              "type": "Identifier",
                                                                                                              "name": "applyElementContent"
                                                                                                            },
                                                                                                            "arguments": [
                                                                                                              {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "translation"
                                                                                                              },
                                                                                                              {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "scope"
                                                                                                              },
                                                                                                              {
                                                                                                                "type": "Literal",
                                                                                                                "value": true
                                                                                                              }
                                                                                                            ]
                                                                                                          }
                                                                                                        },
                                                                                                        {
                                                                                                          "type": "ExpressionStatement",
                                                                                                          "expression": {
                                                                                                            "type": "CallExpression",
                                                                                                            "callee": {
                                                                                                              "type": "Identifier",
                                                                                                              "name": "unwatch"
                                                                                                            },
                                                                                                            "arguments": []
                                                                                                          }
                                                                                                        }
                                                                                                      ]
                                                                                                    },
                                                                                                    "rest": null,
                                                                                                    "generator": false,
                                                                                                    "expression": false
                                                                                                  },
                                                                                                  {
                                                                                                    "type": "FunctionExpression",
                                                                                                    "id": null,
                                                                                                    "params": [
                                                                                                      {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "translationId"
                                                                                                      }
                                                                                                    ],
                                                                                                    "defaults": [],
                                                                                                    "body": {
                                                                                                      "type": "BlockStatement",
                                                                                                      "body": [
                                                                                                        {
                                                                                                          "type": "ExpressionStatement",
                                                                                                          "expression": {
                                                                                                            "type": "CallExpression",
                                                                                                            "callee": {
                                                                                                              "type": "Identifier",
                                                                                                              "name": "applyElementContent"
                                                                                                            },
                                                                                                            "arguments": [
                                                                                                              {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "translationId"
                                                                                                              },
                                                                                                              {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "scope"
                                                                                                              },
                                                                                                              {
                                                                                                                "type": "Literal",
                                                                                                                "value": false
                                                                                                              }
                                                                                                            ]
                                                                                                          }
                                                                                                        },
                                                                                                        {
                                                                                                          "type": "ExpressionStatement",
                                                                                                          "expression": {
                                                                                                            "type": "CallExpression",
                                                                                                            "callee": {
                                                                                                              "type": "Identifier",
                                                                                                              "name": "unwatch"
                                                                                                            },
                                                                                                            "arguments": []
                                                                                                          }
                                                                                                        }
                                                                                                      ]
                                                                                                    },
                                                                                                    "rest": null,
                                                                                                    "generator": false,
                                                                                                    "expression": false
                                                                                                  }
                                                                                                ]
                                                                                              }
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        "alternate": null
                                                                                      }
                                                                                    ]
                                                                                  },
                                                                                  "rest": null,
                                                                                  "generator": false,
                                                                                  "expression": false
                                                                                },
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": true
                                                                                }
                                                                              ]
                                                                            }
                                                                          }
                                                                        ],
                                                                        "kind": "var"
                                                                      }
                                                                    ]
                                                                  },
                                                                  "rest": null,
                                                                  "generator": false,
                                                                  "expression": false
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "alternate": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                  "type": "FunctionExpression",
                                                                  "id": null,
                                                                  "params": [],
                                                                  "defaults": [],
                                                                  "body": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "VariableDeclaration",
                                                                        "declarations": [
                                                                          {
                                                                            "type": "VariableDeclarator",
                                                                            "id": {
                                                                              "type": "Identifier",
                                                                              "name": "updateTranslations"
                                                                            },
                                                                            "init": {
                                                                              "type": "FunctionExpression",
                                                                              "id": null,
                                                                              "params": [],
                                                                              "defaults": [],
                                                                              "body": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                  {
                                                                                    "type": "IfStatement",
                                                                                    "test": {
                                                                                      "type": "LogicalExpression",
                                                                                      "operator": "&&",
                                                                                      "left": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                          "type": "Identifier",
                                                                                          "name": "scope"
                                                                                        },
                                                                                        "property": {
                                                                                          "type": "Identifier",
                                                                                          "name": "translationId"
                                                                                        }
                                                                                      },
                                                                                      "right": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": false,
                                                                                        "object": {
                                                                                          "type": "Identifier",
                                                                                          "name": "scope"
                                                                                        },
                                                                                        "property": {
                                                                                          "type": "Identifier",
                                                                                          "name": "interpolateParams"
                                                                                        }
                                                                                      }
                                                                                    },
                                                                                    "consequent": {
                                                                                      "type": "BlockStatement",
                                                                                      "body": [
                                                                                        {
                                                                                          "type": "ExpressionStatement",
                                                                                          "expression": {
                                                                                            "type": "CallExpression",
                                                                                            "callee": {
                                                                                              "type": "MemberExpression",
                                                                                              "computed": false,
                                                                                              "object": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                  "type": "Identifier",
                                                                                                  "name": "$translate"
                                                                                                },
                                                                                                "arguments": [
                                                                                                  {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                      "type": "Identifier",
                                                                                                      "name": "scope"
                                                                                                    },
                                                                                                    "property": {
                                                                                                      "type": "Identifier",
                                                                                                      "name": "translationId"
                                                                                                    }
                                                                                                  },
                                                                                                  {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": false,
                                                                                                    "object": {
                                                                                                      "type": "Identifier",
                                                                                                      "name": "scope"
                                                                                                    },
                                                                                                    "property": {
                                                                                                      "type": "Identifier",
                                                                                                      "name": "interpolateParams"
                                                                                                    }
                                                                                                  },
                                                                                                  {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "translateInterpolation"
                                                                                                  }
                                                                                                ]
                                                                                              },
                                                                                              "property": {
                                                                                                "type": "Identifier",
                                                                                                "name": "then"
                                                                                              }
                                                                                            },
                                                                                            "arguments": [
                                                                                              {
                                                                                                "type": "FunctionExpression",
                                                                                                "id": null,
                                                                                                "params": [
                                                                                                  {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "translation"
                                                                                                  }
                                                                                                ],
                                                                                                "defaults": [],
                                                                                                "body": {
                                                                                                  "type": "BlockStatement",
                                                                                                  "body": [
                                                                                                    {
                                                                                                      "type": "ExpressionStatement",
                                                                                                      "expression": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                          "type": "Identifier",
                                                                                                          "name": "applyElementContent"
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                          {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "translation"
                                                                                                          },
                                                                                                          {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "scope"
                                                                                                          },
                                                                                                          {
                                                                                                            "type": "Literal",
                                                                                                            "value": true
                                                                                                          }
                                                                                                        ]
                                                                                                      }
                                                                                                    }
                                                                                                  ]
                                                                                                },
                                                                                                "rest": null,
                                                                                                "generator": false,
                                                                                                "expression": false
                                                                                              },
                                                                                              {
                                                                                                "type": "FunctionExpression",
                                                                                                "id": null,
                                                                                                "params": [
                                                                                                  {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "translationId"
                                                                                                  }
                                                                                                ],
                                                                                                "defaults": [],
                                                                                                "body": {
                                                                                                  "type": "BlockStatement",
                                                                                                  "body": [
                                                                                                    {
                                                                                                      "type": "ExpressionStatement",
                                                                                                      "expression": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                          "type": "Identifier",
                                                                                                          "name": "applyElementContent"
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                          {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "translationId"
                                                                                                          },
                                                                                                          {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "scope"
                                                                                                          },
                                                                                                          {
                                                                                                            "type": "Literal",
                                                                                                            "value": false
                                                                                                          }
                                                                                                        ]
                                                                                                      }
                                                                                                    }
                                                                                                  ]
                                                                                                },
                                                                                                "rest": null,
                                                                                                "generator": false,
                                                                                                "expression": false
                                                                                              }
                                                                                            ]
                                                                                          }
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    "alternate": null
                                                                                  }
                                                                                ]
                                                                              },
                                                                              "rest": null,
                                                                              "generator": false,
                                                                              "expression": false
                                                                            }
                                                                          }
                                                                        ],
                                                                        "kind": "var"
                                                                      },
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "scope"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "$watch"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Literal",
                                                                              "value": "interpolateParams"
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "name": "updateTranslations"
                                                                            },
                                                                            {
                                                                              "type": "Literal",
                                                                              "value": true
                                                                            }
                                                                          ]
                                                                        }
                                                                      },
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "scope"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "$watch"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Literal",
                                                                              "value": "translationId"
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "name": "updateTranslations"
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "rest": null,
                                                                  "generator": false,
                                                                  "expression": false
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "rest": null,
                                                    "generator": false,
                                                    "expression": false
                                                  },
                                                  "arguments": []
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "unbind"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "$rootScope"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "$on"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "$translateChangeSuccess"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "updateTranslationFn"
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "updateTranslationFn"
                                              },
                                              "arguments": []
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "scope"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "$on"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "$destroy"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "unbind"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "rest": null,
                                      "generator": false,
                                      "expression": false
                                    }
                                  }
                                ]
                              },
                              "rest": null,
                              "generator": false,
                              "expression": false
                            },
                            "kind": "init"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              }
            ]
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "angular"
              },
              "property": {
                "type": "Identifier",
                "name": "module"
              }
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "pascalprecht.translate"
              }
            ]
          },
          "property": {
            "type": "Identifier",
            "name": "directive"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "translateCloak"
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "$rootScope"
              },
              {
                "type": "Literal",
                "value": "$translate"
              },
              {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "$rootScope"
                  },
                  {
                    "type": "Identifier",
                    "name": "$translate"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "compile"
                            },
                            "value": {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "tElement"
                                }
                              ],
                              "defaults": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "applyCloak"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "tElement"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "addClass"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$translate"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "cloakClassName"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "removeCloak"
                                        },
                                        "init": {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "tElement"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "removeClass"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "$translate"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "cloakClassName"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "removeListener"
                                        },
                                        "init": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "$rootScope"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "$on"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Literal",
                                              "value": "$translateChangeEnd"
                                            },
                                            {
                                              "type": "FunctionExpression",
                                              "id": null,
                                              "params": [],
                                              "defaults": [],
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "removeCloak"
                                                      },
                                                      "arguments": []
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "Identifier",
                                                        "name": "removeListener"
                                                      },
                                                      "arguments": []
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "removeListener"
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": null
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "rest": null,
                                              "generator": false,
                                              "expression": false
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "applyCloak"
                                      },
                                      "arguments": []
                                    }
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "FunctionExpression",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "linkFn"
                                      },
                                      "params": [
                                        {
                                          "type": "Identifier",
                                          "name": "scope"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "iElement"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "iAttr"
                                        }
                                      ],
                                      "defaults": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "LogicalExpression",
                                              "operator": "&&",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "iAttr"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "translateCloak"
                                                }
                                              },
                                              "right": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "iAttr"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "translateCloak"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "length"
                                                }
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "iAttr"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "$observe"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "translateCloak"
                                                      },
                                                      {
                                                        "type": "FunctionExpression",
                                                        "id": null,
                                                        "params": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "translationId"
                                                          }
                                                        ],
                                                        "defaults": [],
                                                        "body": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "$translate"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Identifier",
                                                                        "name": "translationId"
                                                                      }
                                                                    ]
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "then"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "removeCloak"
                                                                  },
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "applyCloak"
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "rest": null,
                                                        "generator": false,
                                                        "expression": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "rest": null,
                                      "generator": false,
                                      "expression": false
                                    }
                                  }
                                ]
                              },
                              "rest": null,
                              "generator": false,
                              "expression": false
                            },
                            "kind": "init"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              }
            ]
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "angular"
              },
              "property": {
                "type": "Identifier",
                "name": "module"
              }
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "pascalprecht.translate"
              }
            ]
          },
          "property": {
            "type": "Identifier",
            "name": "filter"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "translate"
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "$parse"
              },
              {
                "type": "Literal",
                "value": "$translate"
              },
              {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "$parse"
                  },
                  {
                    "type": "Identifier",
                    "name": "$translate"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "translateFilter"
                          },
                          "init": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "translationId"
                              },
                              {
                                "type": "Identifier",
                                "name": "interpolateParams"
                              },
                              {
                                "type": "Identifier",
                                "name": "interpolation"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "angular"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "isObject"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "interpolateParams"
                                        }
                                      ]
                                    },
                                    "prefix": true
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "interpolateParams"
                                          },
                                          "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "$parse"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "interpolateParams"
                                                }
                                              ]
                                            },
                                            "arguments": [
                                              {
                                                "type": "ThisExpression"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "$translate"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "instant"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "translationId"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "interpolateParams"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "interpolation"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "translateFilter"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "$stateful"
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": true
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "translateFilter"
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              }
            ]
          }
        ]
      }
    }
  ]
}