{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "define"
        },
        "arguments": [
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "../Core/Cartesian2"
              },
              {
                "type": "Literal",
                "value": "../Core/defaultValue"
              },
              {
                "type": "Literal",
                "value": "../Core/defined"
              },
              {
                "type": "Literal",
                "value": "../Core/defineProperties"
              },
              {
                "type": "Literal",
                "value": "../Core/destroyObject"
              },
              {
                "type": "Literal",
                "value": "../Core/DeveloperError"
              },
              {
                "type": "Literal",
                "value": "../Core/Math"
              },
              {
                "type": "Literal",
                "value": "../Core/PixelFormat"
              },
              {
                "type": "Literal",
                "value": "./MipmapHint"
              },
              {
                "type": "Literal",
                "value": "./PixelDatatype"
              },
              {
                "type": "Literal",
                "value": "./TextureMagnificationFilter"
              },
              {
                "type": "Literal",
                "value": "./TextureMinificationFilter"
              },
              {
                "type": "Literal",
                "value": "./TextureWrap"
              }
            ]
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "Cartesian2"
              },
              {
                "type": "Identifier",
                "name": "defaultValue"
              },
              {
                "type": "Identifier",
                "name": "defined"
              },
              {
                "type": "Identifier",
                "name": "defineProperties"
              },
              {
                "type": "Identifier",
                "name": "destroyObject"
              },
              {
                "type": "Identifier",
                "name": "DeveloperError"
              },
              {
                "type": "Identifier",
                "name": "CesiumMath"
              },
              {
                "type": "Identifier",
                "name": "PixelFormat"
              },
              {
                "type": "Identifier",
                "name": "MipmapHint"
              },
              {
                "type": "Identifier",
                "name": "PixelDatatype"
              },
              {
                "type": "Identifier",
                "name": "TextureMagnificationFilter"
              },
              {
                "type": "Identifier",
                "name": "TextureMinificationFilter"
              },
              {
                "type": "Identifier",
                "name": "TextureWrap"
              }
            ],
            "defaults": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "Literal",
                    "value": "use strict"
                  }
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "Texture"
                      },
                      "init": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "context"
                          },
                          {
                            "type": "Identifier",
                            "name": "options"
                          }
                        ],
                        "defaults": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "options"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "defaultValue"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "options"
                                    },
                                    {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "defaultValue"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "EMPTY_OBJECT"
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "source"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "options"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "source"
                                    }
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "width"
                                  },
                                  "init": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "defined"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "source"
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "source"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "width"
                                      }
                                    },
                                    "alternate": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "options"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "width"
                                      }
                                    }
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "height"
                                  },
                                  "init": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "defined"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "source"
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "source"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "height"
                                      }
                                    },
                                    "alternate": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "options"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "height"
                                      }
                                    }
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "pixelFormat"
                                  },
                                  "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "defaultValue"
                                    },
                                    "arguments": [
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "options"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "pixelFormat"
                                        }
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "PixelFormat"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "RGBA"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "pixelDatatype"
                                  },
                                  "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "defaultValue"
                                    },
                                    "arguments": [
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "options"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "pixelDatatype"
                                        }
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "PixelDatatype"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "UNSIGNED_BYTE"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "defined"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "width"
                                      }
                                    ]
                                  },
                                  "prefix": true
                                },
                                "right": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "defined"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "height"
                                      }
                                    ]
                                  },
                                  "prefix": true
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "options requires a source field to create an initialized texture or width and height fields to create a blank texture."
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "<=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "width"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "Width must be greater than zero."
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": ">",
                                "left": {
                                  "type": "Identifier",
                                  "name": "width"
                                },
                                "right": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "context"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_maximumTextureSize"
                                  }
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "Literal",
                                              "value": "Width must be less than or equal to the maximum texture size ("
                                            },
                                            "right": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "context"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "_maximumTextureSize"
                                              }
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": ").  Check maximumTextureSize."
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "<=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "height"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "Height must be greater than zero."
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": ">",
                                "left": {
                                  "type": "Identifier",
                                  "name": "height"
                                },
                                "right": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "context"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_maximumTextureSize"
                                  }
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "Literal",
                                              "value": "Height must be less than or equal to the maximum texture size ("
                                            },
                                            "right": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "context"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "_maximumTextureSize"
                                              }
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": ").  Check maximumTextureSize."
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "PixelFormat"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "validate"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "pixelFormat"
                                    }
                                  ]
                                },
                                "prefix": true
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "Invalid options.pixelFormat."
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "PixelDatatype"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "validate"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "pixelDatatype"
                                    }
                                  ]
                                },
                                "prefix": true
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "Invalid options.pixelDatatype."
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "pixelFormat"
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "PixelFormat"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "DEPTH_COMPONENT"
                                    }
                                  }
                                },
                                "right": {
                                  "type": "LogicalExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "pixelDatatype"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "PixelDatatype"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "UNSIGNED_SHORT"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "pixelDatatype"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "PixelDatatype"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "UNSIGNED_INT"
                                      }
                                    }
                                  }
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "When options.pixelFormat is DEPTH_COMPONENT, options.pixelDatatype must be UNSIGNED_SHORT or UNSIGNED_INT."
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "pixelFormat"
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "PixelFormat"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "DEPTH_STENCIL"
                                    }
                                  }
                                },
                                "right": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "pixelDatatype"
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "PixelDatatype"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "UNSIGNED_INT_24_8_WEBGL"
                                    }
                                  }
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "When options.pixelFormat is DEPTH_STENCIL, options.pixelDatatype must be UNSIGNED_INT_24_8_WEBGL."
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "pixelDatatype"
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "PixelDatatype"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "FLOAT"
                                    }
                                  }
                                },
                                "right": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "context"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "floatingPointTexture"
                                    }
                                  },
                                  "prefix": true
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "DeveloperError"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "When options.pixelDatatype is FLOAT, this WebGL implementation must support the OES_texture_float extension.  Check context.floatingPointTexture."
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "PixelFormat"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "isDepthFormat"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "pixelFormat"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "defined"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "source"
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ThrowStatement",
                                          "argument": {
                                            "type": "NewExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "DeveloperError"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "When options.pixelFormat is DEPTH_COMPONENT or DEPTH_STENCIL, source cannot be provided."
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "context"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "depthTexture"
                                        }
                                      },
                                      "prefix": true
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ThrowStatement",
                                          "argument": {
                                            "type": "NewExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "DeveloperError"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "When options.pixelFormat is DEPTH_COMPONENT or DEPTH_STENCIL, this WebGL implementation must support WEBGL_depth_texture.  Check context.depthTexture."
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "preMultiplyAlpha"
                                  },
                                  "init": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "LogicalExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "options"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "preMultiplyAlpha"
                                        }
                                      },
                                      "right": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "pixelFormat"
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "PixelFormat"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "RGB"
                                          }
                                        }
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "pixelFormat"
                                      },
                                      "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "PixelFormat"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "LUMINANCE"
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "flipY"
                                  },
                                  "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "defaultValue"
                                    },
                                    "arguments": [
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "options"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "flipY"
                                        }
                                      },
                                      {
                                        "type": "Literal",
                                        "value": true
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "context"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "_gl"
                                    }
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "textureTarget"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "gl"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "TEXTURE_2D"
                                    }
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "texture"
                                  },
                                  "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "gl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "createTexture"
                                      }
                                    },
                                    "arguments": []
                                  }
                                }
                              ],
                              "kind": "var"
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "activeTexture"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "gl"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "TEXTURE0"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "bindTexture"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "textureTarget"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "texture"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defined"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "source"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "gl"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "pixelStorei"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "gl"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "UNPACK_PREMULTIPLY_ALPHA_WEBGL"
                                          }
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "preMultiplyAlpha"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "gl"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "pixelStorei"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "gl"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "UNPACK_FLIP_Y_WEBGL"
                                          }
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "flipY"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "defined"
                                      },
                                      "arguments": [
                                        {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "source"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "arrayBufferView"
                                          }
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "texImage2D"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "textureTarget"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": 0
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "pixelFormat"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "width"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "height"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": 0
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "pixelFormat"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "pixelDatatype"
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "source"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "arrayBufferView"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "defined"
                                        },
                                        "arguments": [
                                          {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "source"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "framebuffer"
                                            }
                                          }
                                        ]
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "source"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "framebuffer"
                                                }
                                              },
                                              "right": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "context"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "defaultFramebuffer"
                                                }
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "source"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "framebuffer"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "_bind"
                                                      }
                                                    },
                                                    "arguments": []
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "gl"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "copyTexImage2D"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "textureTarget"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 0
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "pixelFormat"
                                                },
                                                {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "source"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "xOffset"
                                                  }
                                                },
                                                {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "source"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "yOffset"
                                                  }
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "width"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "height"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 0
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "!==",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "source"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "framebuffer"
                                                }
                                              },
                                              "right": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "context"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "defaultFramebuffer"
                                                }
                                              }
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "source"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "framebuffer"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "_unBind"
                                                      }
                                                    },
                                                    "arguments": []
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "gl"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "texImage2D"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "textureTarget"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 0
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "pixelFormat"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "pixelFormat"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "pixelDatatype"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "source"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "gl"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "texImage2D"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "textureTarget"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": 0
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "pixelFormat"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "width"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "height"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": 0
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "pixelFormat"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "pixelDatatype"
                                        },
                                        {
                                          "type": "Literal",
                                          "value": null
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "bindTexture"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "textureTarget"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": null
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_context"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "context"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_textureFilterAnisotropic"
                                  }
                                },
                                "right": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "context"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_textureFilterAnisotropic"
                                  }
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_textureTarget"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "textureTarget"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_texture"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "texture"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_pixelFormat"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "pixelFormat"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_pixelDatatype"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "pixelDatatype"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_width"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "width"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_height"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "height"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_dimensions"
                                  }
                                },
                                "right": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Cartesian2"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "width"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "height"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_preMultiplyAlpha"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "preMultiplyAlpha"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_flipY"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "flipY"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_sampler"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "undefined"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "sampler"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "undefined"
                                }
                              }
                            }
                          ]
                        },
                        "rest": null,
                        "generator": false,
                        "expression": false
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "defineProperties"
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Texture"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      },
                      {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "sampler"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_sampler"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "set"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "Identifier",
                                        "name": "sampler"
                                      }
                                    ],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "samplerDefined"
                                              },
                                              "init": {
                                                "type": "Literal",
                                                "value": true
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "UnaryExpression",
                                            "operator": "!",
                                            "argument": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "defined"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "sampler"
                                                }
                                              ]
                                            },
                                            "prefix": true
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "samplerDefined"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": false
                                                  }
                                                }
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "minFilter"
                                                    },
                                                    "init": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "TextureMinificationFilter"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "LINEAR"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "magFilter"
                                                    },
                                                    "init": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "TextureMagnificationFilter"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "LINEAR"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "_pixelDatatype"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "PixelDatatype"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "FLOAT"
                                                    }
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "minFilter"
                                                        },
                                                        "right": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "TextureMinificationFilter"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "NEAREST"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "magFilter"
                                                        },
                                                        "right": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "TextureMagnificationFilter"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "NEAREST"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "sampler"
                                                  },
                                                  "right": {
                                                    "type": "ObjectExpression",
                                                    "properties": [
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Identifier",
                                                          "name": "wrapS"
                                                        },
                                                        "value": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "TextureWrap"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "CLAMP_TO_EDGE"
                                                          }
                                                        },
                                                        "kind": "init"
                                                      },
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Identifier",
                                                          "name": "wrapT"
                                                        },
                                                        "value": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "TextureWrap"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "CLAMP_TO_EDGE"
                                                          }
                                                        },
                                                        "kind": "init"
                                                      },
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Identifier",
                                                          "name": "minificationFilter"
                                                        },
                                                        "value": {
                                                          "type": "Identifier",
                                                          "name": "minFilter"
                                                        },
                                                        "kind": "init"
                                                      },
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Identifier",
                                                          "name": "magnificationFilter"
                                                        },
                                                        "value": {
                                                          "type": "Identifier",
                                                          "name": "magFilter"
                                                        },
                                                        "kind": "init"
                                                      },
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Identifier",
                                                          "name": "maximumAnisotropy"
                                                        },
                                                        "value": {
                                                          "type": "Literal",
                                                          "value": 1
                                                        },
                                                        "kind": "init"
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "ThisExpression"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "_pixelDatatype"
                                              }
                                            },
                                            "right": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "PixelDatatype"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "FLOAT"
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "LogicalExpression",
                                                  "operator": "&&",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "sampler"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "minificationFilter"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "TextureMinificationFilter"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "NEAREST"
                                                      }
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "sampler"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "minificationFilter"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "TextureMinificationFilter"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "NEAREST_MIPMAP_NEAREST"
                                                      }
                                                    }
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ThrowStatement",
                                                      "argument": {
                                                        "type": "NewExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "DeveloperError"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": "Only NEAREST and NEAREST_MIPMAP_NEAREST minification filters are supported for floating point textures."
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!==",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "sampler"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "magnificationFilter"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "TextureMagnificationFilter"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "NEAREST"
                                                    }
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ThrowStatement",
                                                      "argument": {
                                                        "type": "NewExpression",
                                                        "callee": {
                                                          "type": "Identifier",
                                                          "name": "DeveloperError"
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": "Only the NEAREST magnification filter is supported for floating point textures."
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        },
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "init": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "ThisExpression"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "_context"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "_gl"
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "target"
                                              },
                                              "init": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "_textureTarget"
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "activeTexture"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "gl"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "TEXTURE0"
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "bindTexture"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "target"
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "_texture"
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "texParameteri"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "target"
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "gl"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "TEXTURE_MIN_FILTER"
                                                }
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "sampler"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "minificationFilter"
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "texParameteri"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "target"
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "gl"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "TEXTURE_MAG_FILTER"
                                                }
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "sampler"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "magnificationFilter"
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "texParameteri"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "target"
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "gl"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "TEXTURE_WRAP_S"
                                                }
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "sampler"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "wrapS"
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "texParameteri"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "target"
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "gl"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "TEXTURE_WRAP_T"
                                                }
                                              },
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "sampler"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "wrapT"
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "defined"
                                            },
                                            "arguments": [
                                              {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "_textureFilterAnisotropic"
                                                }
                                              }
                                            ]
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "gl"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "texParameteri"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "target"
                                                    },
                                                    {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "_textureFilterAnisotropic"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "TEXTURE_MAX_ANISOTROPY_EXT"
                                                      }
                                                    },
                                                    {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "sampler"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "maximumAnisotropy"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "gl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "bindTexture"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "target"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": null
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "ThisExpression"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "_sampler"
                                              }
                                            },
                                            "right": {
                                              "type": "ConditionalExpression",
                                              "test": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                  "type": "Identifier",
                                                  "name": "samplerDefined"
                                                },
                                                "prefix": true
                                              },
                                              "consequent": {
                                                "type": "Identifier",
                                                "name": "undefined"
                                              },
                                              "alternate": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "wrapS"
                                                    },
                                                    "value": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "sampler"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "wrapS"
                                                      }
                                                    },
                                                    "kind": "init"
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "wrapT"
                                                    },
                                                    "value": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "sampler"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "wrapT"
                                                      }
                                                    },
                                                    "kind": "init"
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "minificationFilter"
                                                    },
                                                    "value": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "sampler"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "minificationFilter"
                                                      }
                                                    },
                                                    "kind": "init"
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "magnificationFilter"
                                                    },
                                                    "value": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "sampler"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "magnificationFilter"
                                                      }
                                                    },
                                                    "kind": "init"
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Identifier",
                                                      "name": "maximumAnisotropy"
                                                    },
                                                    "value": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "sampler"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "maximumAnisotropy"
                                                      }
                                                    },
                                                    "kind": "init"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "pixelFormat"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_pixelFormat"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "pixelDatatype"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_pixelDatatype"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "dimensions"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_dimensions"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "preMultiplyAlpha"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_preMultiplyAlpha"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "flipY"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_flipY"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "width"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_width"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "height"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_height"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "_target"
                            },
                            "value": {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Identifier",
                                    "name": "get"
                                  },
                                  "value": {
                                    "type": "FunctionExpression",
                                    "id": null,
                                    "params": [],
                                    "defaults": [],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_textureTarget"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "rest": null,
                                    "generator": false,
                                    "expression": false
                                  },
                                  "kind": "init"
                                }
                              ]
                            },
                            "kind": "init"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Texture"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "copyFrom"
                      }
                    },
                    "right": {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        },
                        {
                          "type": "Identifier",
                          "name": "xOffset"
                        },
                        {
                          "type": "Identifier",
                          "name": "yOffset"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "xOffset"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "xOffset"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "yOffset"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "yOffset"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defined"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "source"
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "source is required."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "PixelFormat"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "isDepthFormat"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_pixelFormat"
                                  }
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "Cannot call copyFrom when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "xOffset"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "xOffset must be greater than or equal to zero."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "yOffset"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "yOffset must be greater than or equal to zero."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": ">",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                  "type": "Identifier",
                                  "name": "xOffset"
                                },
                                "right": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "source"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "width"
                                  }
                                }
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "_width"
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "xOffset + source.width must be less than or equal to width."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": ">",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                  "type": "Identifier",
                                  "name": "yOffset"
                                },
                                "right": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "source"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "height"
                                  }
                                }
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "_height"
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "yOffset + source.height must be less than or equal to height."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "_context"
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_gl"
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_textureTarget"
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "pixelStorei"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "UNPACK_PREMULTIPLY_ALPHA_WEBGL"
                                  }
                                },
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_preMultiplyAlpha"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "pixelStorei"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "UNPACK_FLIP_Y_WEBGL"
                                  }
                                },
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_flipY"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "activeTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "TEXTURE0"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "bindTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_texture"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "source"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "arrayBufferView"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "gl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "texSubImage2D"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "target"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": 0
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "xOffset"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "yOffset"
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "source"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "width"
                                        }
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "source"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "height"
                                        }
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_pixelFormat"
                                        }
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_pixelDatatype"
                                        }
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "source"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "arrayBufferView"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "gl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "texSubImage2D"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "target"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": 0
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "xOffset"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "yOffset"
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_pixelFormat"
                                        }
                                      },
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_pixelDatatype"
                                        }
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "source"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "bindTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "Literal",
                                  "value": null
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    }
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Texture"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "copyFromFramebuffer"
                      }
                    },
                    "right": {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "xOffset"
                        },
                        {
                          "type": "Identifier",
                          "name": "yOffset"
                        },
                        {
                          "type": "Identifier",
                          "name": "framebufferXOffset"
                        },
                        {
                          "type": "Identifier",
                          "name": "framebufferYOffset"
                        },
                        {
                          "type": "Identifier",
                          "name": "width"
                        },
                        {
                          "type": "Identifier",
                          "name": "height"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "xOffset"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "xOffset"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "yOffset"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "yOffset"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "framebufferXOffset"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "framebufferXOffset"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "framebufferYOffset"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "framebufferYOffset"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "width"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "width"
                                  },
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "_width"
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "height"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "height"
                                  },
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "_height"
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "PixelFormat"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "isDepthFormat"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_pixelFormat"
                                  }
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "Cannot call copyFromFramebuffer when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "_pixelDatatype"
                                }
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "PixelDatatype"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "FLOAT"
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "Cannot call copyFromFramebuffer when the texture pixel data type is FLOAT."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "xOffset"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "xOffset must be greater than or equal to zero."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "yOffset"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "yOffset must be greater than or equal to zero."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "framebufferXOffset"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "framebufferXOffset must be greater than or equal to zero."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "framebufferYOffset"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "framebufferYOffset must be greater than or equal to zero."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": ">",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                  "type": "Identifier",
                                  "name": "xOffset"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "width"
                                }
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "_width"
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "xOffset + width must be less than or equal to width."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": ">",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                  "type": "Identifier",
                                  "name": "yOffset"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "height"
                                }
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "_height"
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "yOffset + height must be less than or equal to height."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "_context"
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_gl"
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_textureTarget"
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "activeTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "TEXTURE0"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "bindTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_texture"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "copyTexSubImage2D"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "Literal",
                                  "value": 0
                                },
                                {
                                  "type": "Identifier",
                                  "name": "xOffset"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "yOffset"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "framebufferXOffset"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "framebufferYOffset"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "width"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "height"
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "bindTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "Literal",
                                  "value": null
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    }
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Texture"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "generateMipmap"
                      }
                    },
                    "right": {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "hint"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "hint"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "defaultValue"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "hint"
                                  },
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "MipmapHint"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "DONT_CARE"
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "PixelFormat"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "isDepthFormat"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_pixelFormat"
                                  }
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "Cannot call generateMipmap when the texture pixel format is DEPTH_COMPONENT or DEPTH_STENCIL."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": ">",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_width"
                                  }
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 1
                                }
                              },
                              "right": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "CesiumMath"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "isPowerOfTwo"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "ThisExpression"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_width"
                                      }
                                    }
                                  ]
                                },
                                "prefix": true
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "width must be a power of two to call generateMipmap()."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": ">",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_height"
                                  }
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 1
                                }
                              },
                              "right": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "CesiumMath"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "isPowerOfTwo"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "ThisExpression"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_height"
                                      }
                                    }
                                  ]
                                },
                                "prefix": true
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "height must be a power of two to call generateMipmap()."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "MipmapHint"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "validate"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "hint"
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "DeveloperError"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "hint is invalid."
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "_context"
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_gl"
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_textureTarget"
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "hint"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "GENERATE_MIPMAP_HINT"
                                  }
                                },
                                {
                                  "type": "Identifier",
                                  "name": "hint"
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "activeTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "gl"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "TEXTURE0"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "bindTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_texture"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "generateMipmap"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "gl"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "bindTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "target"
                                },
                                {
                                  "type": "Literal",
                                  "value": null
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    }
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Texture"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "isDestroyed"
                      }
                    },
                    "right": {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    }
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Texture"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "destroy"
                      }
                    },
                    "right": {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "_context"
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_gl"
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "deleteTexture"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "_texture"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "destroyObject"
                              },
                              "arguments": [
                                {
                                  "type": "ThisExpression"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    }
                  }
                },
                {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "Identifier",
                    "name": "Texture"
                  }
                }
              ]
            },
            "rest": null,
            "generator": false,
            "expression": false
          }
        ]
      }
    }
  ]
}