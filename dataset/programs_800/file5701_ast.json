{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "require"
          },
          "property": {
            "type": "Identifier",
            "name": "define"
          }
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": "program"
                },
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "require"
                    },
                    {
                      "type": "Identifier",
                      "name": "exports"
                    },
                    {
                      "type": "Identifier",
                      "name": "module"
                    }
                  ],
                  "defaults": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "test"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "require"
                              },
                              "arguments": [
                                {
                                  "type": "Literal",
                                  "value": "test"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "var"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "test"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "assert"
                            }
                          },
                          "arguments": [
                            {
                              "type": "BinaryExpression",
                              "operator": "==",
                              "left": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "require"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "a/b/c/d"
                                      }
                                    ]
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "foo"
                                  }
                                },
                                "arguments": []
                              },
                              "right": {
                                "type": "Literal",
                                "value": 1
                              }
                            },
                            {
                              "type": "Literal",
                              "value": "nested module identifier"
                            }
                          ]
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "test"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "print"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "DONE"
                            },
                            {
                              "type": "Literal",
                              "value": "info"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "rest": null,
                  "generator": false,
                  "expression": false
                },
                "kind": "init"
              }
            ]
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "test"
              },
              {
                "type": "Literal",
                "value": "a/b/c/d"
              }
            ]
          }
        ]
      }
    }
  ]
}