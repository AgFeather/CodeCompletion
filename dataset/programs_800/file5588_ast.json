{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "ReadableStream"
          },
          "init": {
            "type": "LogicalExpression",
            "operator": "||",
            "left": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "require"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": "stream"
                  }
                ]
              },
              "property": {
                "type": "Identifier",
                "name": "Readable"
              }
            },
            "right": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "require"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "readable-stream"
                }
              ]
            }
          }
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "inherits"
          },
          "init": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "require"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "util"
                }
              ]
            },
            "property": {
              "type": "Identifier",
              "name": "inherits"
            }
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "Dicer"
          },
          "init": {
            "type": "CallExpression",
            "callee": {
              "type": "Identifier",
              "name": "require"
            },
            "arguments": [
              {
                "type": "Literal",
                "value": "dicer"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "parseParams"
          },
          "init": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "require"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "../utils"
                }
              ]
            },
            "property": {
              "type": "Identifier",
              "name": "parseParams"
            }
          }
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "decodeText"
          },
          "init": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "require"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "../utils"
                }
              ]
            },
            "property": {
              "type": "Identifier",
              "name": "decodeText"
            }
          }
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "basename"
          },
          "init": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "require"
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "../utils"
                }
              ]
            },
            "property": {
              "type": "Identifier",
              "name": "basename"
            }
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "RE_BOUNDARY"
          },
          "init": {
            "type": "Literal",
            "value": {}
          }
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "RE_FIELD"
          },
          "init": {
            "type": "Literal",
            "value": {}
          }
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "RE_CHARSET"
          },
          "init": {
            "type": "Literal",
            "value": {}
          }
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "RE_FILENAME"
          },
          "init": {
            "type": "Literal",
            "value": {}
          }
        },
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "RE_NAME"
          },
          "init": {
            "type": "Literal",
            "value": {}
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "Multipart"
          },
          "property": {
            "type": "Identifier",
            "name": "detect"
          }
        },
        "right": {
          "type": "Literal",
          "value": {}
        }
      }
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "Multipart"
      },
      "params": [
        {
          "type": "Identifier",
          "name": "boy"
        },
        {
          "type": "Identifier",
          "name": "cfg"
        }
      ],
      "defaults": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "IfStatement",
            "test": {
              "type": "UnaryExpression",
              "operator": "!",
              "argument": {
                "type": "BinaryExpression",
                "operator": "instanceof",
                "left": {
                  "type": "ThisExpression"
                },
                "right": {
                  "type": "Identifier",
                  "name": "Multipart"
                }
              },
              "prefix": true
            },
            "consequent": {
              "type": "ReturnStatement",
              "argument": {
                "type": "NewExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "Multipart"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "boy"
                  },
                  {
                    "type": "Identifier",
                    "name": "cfg"
                  }
                ]
              }
            },
            "alternate": null
          },
          {
            "type": "VariableDeclaration",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "i"
                },
                "init": null
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "len"
                },
                "init": null
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "self"
                },
                "init": {
                  "type": "ThisExpression"
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "boundary"
                },
                "init": null
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "limits"
                },
                "init": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "cfg"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "limits"
                  }
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "headers"
                },
                "init": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "cfg"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "headers"
                  }
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "parsedConType"
                },
                "init": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "cfg"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "parsedConType"
                    }
                  },
                  "right": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "defCharset"
                },
                "init": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "cfg"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "defCharset"
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": "utf8"
                  }
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "fileopts"
                },
                "init": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "cfg"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "fileHwm"
                        }
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Literal",
                      "value": "number"
                    }
                  },
                  "consequent": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "highWaterMark"
                        },
                        "value": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "cfg"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "fileHwm"
                          }
                        },
                        "kind": "init"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ObjectExpression",
                    "properties": []
                  }
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "ForStatement",
            "init": {
              "type": "SequenceExpression",
              "expressions": [
                {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "i"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0
                  }
                },
                {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "len"
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "parsedConType"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                }
              ]
            },
            "test": {
              "type": "BinaryExpression",
              "operator": "<",
              "left": {
                "type": "Identifier",
                "name": "i"
              },
              "right": {
                "type": "Identifier",
                "name": "len"
              }
            },
            "update": {
              "type": "UpdateExpression",
              "operator": "++",
              "argument": {
                "type": "Identifier",
                "name": "i"
              },
              "prefix": true
            },
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "IfStatement",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "parsedConType"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "i"
                          }
                        }
                      ]
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "RE_BOUNDARY"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "parsedConType"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "i"
                            }
                          },
                          "property": {
                            "type": "Literal",
                            "value": 0
                          }
                        }
                      ]
                    }
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "boundary"
                          },
                          "right": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "parsedConType"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "i"
                              }
                            },
                            "property": {
                              "type": "Literal",
                              "value": 1
                            }
                          }
                        }
                      },
                      {
                        "type": "BreakStatement",
                        "label": null
                      }
                    ]
                  },
                  "alternate": null
                }
              ]
            }
          },
          {
            "type": "FunctionDeclaration",
            "id": {
              "type": "Identifier",
              "name": "checkFinished"
            },
            "params": [],
            "defaults": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "IfStatement",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "Identifier",
                          "name": "nends"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "finished"
                      }
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "boy"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "_done"
                        }
                      },
                      "prefix": true
                    }
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "finished"
                          },
                          "right": {
                            "type": "Literal",
                            "value": false
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "process"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "nextTick"
                            }
                          },
                          "arguments": [
                            {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [],
                              "defaults": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "boy"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_done"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": true
                                      }
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "boy"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "emit"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "finish"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "rest": null,
                              "generator": false,
                              "expression": false
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "alternate": null
                }
              ]
            },
            "rest": null,
            "generator": false,
            "expression": false
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "BinaryExpression",
              "operator": "!==",
              "left": {
                "type": "UnaryExpression",
                "operator": "typeof",
                "argument": {
                  "type": "Identifier",
                  "name": "boundary"
                },
                "prefix": true
              },
              "right": {
                "type": "Literal",
                "value": "string"
              }
            },
            "consequent": {
              "type": "ThrowStatement",
              "argument": {
                "type": "NewExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "Error"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": "Multipart: Boundary not found"
                  }
                ]
              }
            },
            "alternate": null
          },
          {
            "type": "VariableDeclaration",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "fieldSizeLimit"
                },
                "init": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "limits"
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "limits"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "fieldSize"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "*",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "*",
                      "left": {
                        "type": "Literal",
                        "value": 1
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1024
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1024
                    }
                  }
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "fileSizeLimit"
                },
                "init": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "limits"
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "limits"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "fileSize"
                      }
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "Infinity"
                  }
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "filesLimit"
                },
                "init": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "limits"
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "limits"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "files"
                      }
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "Infinity"
                  }
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "fieldsLimit"
                },
                "init": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "limits"
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "limits"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "fields"
                      }
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "Infinity"
                  }
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "partsLimit"
                },
                "init": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "limits"
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "limits"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "parts"
                      }
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "Infinity"
                  }
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "VariableDeclaration",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "nfiles"
                },
                "init": {
                  "type": "Literal",
                  "value": 0
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "nfields"
                },
                "init": {
                  "type": "Literal",
                  "value": 0
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "nends"
                },
                "init": {
                  "type": "Literal",
                  "value": 0
                }
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "curFile"
                },
                "init": null
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "curField"
                },
                "init": null
              },
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "finished"
                },
                "init": {
                  "type": "Literal",
                  "value": false
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "ThisExpression"
                },
                "property": {
                  "type": "Identifier",
                  "name": "_needDrain"
                }
              },
              "right": {
                "type": "Literal",
                "value": false
              }
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "ThisExpression"
                },
                "property": {
                  "type": "Identifier",
                  "name": "_pause"
                }
              },
              "right": {
                "type": "Literal",
                "value": false
              }
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "ThisExpression"
                },
                "property": {
                  "type": "Identifier",
                  "name": "_cb"
                }
              },
              "right": {
                "type": "Identifier",
                "name": "undefined"
              }
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "ThisExpression"
                },
                "property": {
                  "type": "Identifier",
                  "name": "_nparts"
                }
              },
              "right": {
                "type": "Literal",
                "value": 0
              }
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "ThisExpression"
                },
                "property": {
                  "type": "Identifier",
                  "name": "_boy"
                }
              },
              "right": {
                "type": "Identifier",
                "name": "boy"
              }
            }
          },
          {
            "type": "VariableDeclaration",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "parserCfg"
                },
                "init": {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Identifier",
                        "name": "boundary"
                      },
                      "value": {
                        "type": "Identifier",
                        "name": "boundary"
                      },
                      "kind": "init"
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Identifier",
                        "name": "maxHeaderPairs"
                      },
                      "value": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "Identifier",
                          "name": "limits"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "limits"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "headerPairs"
                          }
                        }
                      },
                      "kind": "init"
                    }
                  ]
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "fileopts"
              },
              "property": {
                "type": "Identifier",
                "name": "highWaterMark"
              }
            },
            "consequent": {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "parserCfg"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "partHwm"
                  }
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "fileopts"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "highWaterMark"
                  }
                }
              }
            },
            "alternate": null
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "cfg"
              },
              "property": {
                "type": "Identifier",
                "name": "highWaterMark"
              }
            },
            "consequent": {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "parserCfg"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "highWaterMark"
                  }
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "cfg"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "highWaterMark"
                  }
                }
              }
            },
            "alternate": null
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "ThisExpression"
                },
                "property": {
                  "type": "Identifier",
                  "name": "parser"
                }
              },
              "right": {
                "type": "NewExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "Dicer"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "parserCfg"
                  }
                ]
              }
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "parser"
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "on"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "drain"
                            },
                            {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [],
                              "defaults": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "self"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_needDrain"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": false
                                      }
                                    }
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "LogicalExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "self"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_cb"
                                        }
                                      },
                                      "right": {
                                        "type": "UnaryExpression",
                                        "operator": "!",
                                        "argument": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "self"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_pause"
                                          }
                                        },
                                        "prefix": true
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "cb"
                                              },
                                              "init": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "self"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "_cb"
                                                }
                                              }
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "self"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "_cb"
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "undefined"
                                            }
                                          }
                                        },
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "cb"
                                            },
                                            "arguments": []
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              },
                              "rest": null,
                              "generator": false,
                              "expression": false
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "on"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "part"
                        },
                        {
                          "type": "FunctionExpression",
                          "id": {
                            "type": "Identifier",
                            "name": "onPart"
                          },
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "part"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": ">",
                                  "left": {
                                    "type": "UpdateExpression",
                                    "operator": "++",
                                    "argument": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "self"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_nparts"
                                      }
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "partsLimit"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "self"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "parser"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "removeListener"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "part"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "onPart"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "self"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "parser"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "on"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "part"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "skipPart"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "boy"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "hitPartsLimit"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": true
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "boy"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "emit"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "partsLimit"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "skipPart"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "part"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "curField"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "field"
                                          },
                                          "init": {
                                            "type": "Identifier",
                                            "name": "curField"
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "field"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "emit"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "end"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "field"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "removeAllListeners"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "end"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "part"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "on"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "header"
                                        },
                                        {
                                          "type": "FunctionExpression",
                                          "id": null,
                                          "params": [
                                            {
                                              "type": "Identifier",
                                              "name": "header"
                                            }
                                          ],
                                          "defaults": [],
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "contype"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "fieldname"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "parsed"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "charset"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "encoding"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "filename"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "nsize"
                                                    },
                                                    "init": {
                                                      "type": "Literal",
                                                      "value": 0
                                                    }
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "header"
                                                  },
                                                  "property": {
                                                    "type": "Literal",
                                                    "value": "content-type"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "parsed"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "parseParams"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "MemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "header"
                                                                },
                                                                "property": {
                                                                  "type": "Literal",
                                                                  "value": "content-type"
                                                                }
                                                              },
                                                              "property": {
                                                                "type": "Literal",
                                                                "value": 0
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "parsed"
                                                        },
                                                        "property": {
                                                          "type": "Literal",
                                                          "value": 0
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "AssignmentExpression",
                                                              "operator": "=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "contype"
                                                              },
                                                              "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "parsed"
                                                                    },
                                                                    "property": {
                                                                      "type": "Literal",
                                                                      "value": 0
                                                                    }
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "toLowerCase"
                                                                  }
                                                                },
                                                                "arguments": []
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "ForStatement",
                                                            "init": {
                                                              "type": "SequenceExpression",
                                                              "expressions": [
                                                                {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "i"
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": 0
                                                                  }
                                                                },
                                                                {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "len"
                                                                  },
                                                                  "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "parsed"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "length"
                                                                    }
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "test": {
                                                              "type": "BinaryExpression",
                                                              "operator": "<",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                              },
                                                              "right": {
                                                                "type": "Identifier",
                                                                "name": "len"
                                                              }
                                                            },
                                                            "update": {
                                                              "type": "UpdateExpression",
                                                              "operator": "++",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "i"
                                                              },
                                                              "prefix": true
                                                            },
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "IfStatement",
                                                                  "test": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "RE_CHARSET"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "test"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                          "type": "MemberExpression",
                                                                          "computed": true,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "parsed"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "i"
                                                                          }
                                                                        },
                                                                        "property": {
                                                                          "type": "Literal",
                                                                          "value": 0
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                      {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "AssignmentExpression",
                                                                          "operator": "=",
                                                                          "left": {
                                                                            "type": "Identifier",
                                                                            "name": "charset"
                                                                          },
                                                                          "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": true,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "parsed"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "i"
                                                                                  }
                                                                                },
                                                                                "property": {
                                                                                  "type": "Literal",
                                                                                  "value": 1
                                                                                }
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "toLowerCase"
                                                                              }
                                                                            },
                                                                            "arguments": []
                                                                          }
                                                                        }
                                                                      },
                                                                      {
                                                                        "type": "BreakStatement",
                                                                        "label": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "alternate": null
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "contype"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "undefined"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "contype"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "text/plain"
                                                    }
                                                  }
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "===",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "charset"
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "undefined"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "charset"
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "defCharset"
                                                    }
                                                  }
                                                },
                                                "alternate": null
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "header"
                                                  },
                                                  "property": {
                                                    "type": "Literal",
                                                    "value": "content-disposition"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "parsed"
                                                        },
                                                        "right": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "parseParams"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "MemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "header"
                                                                },
                                                                "property": {
                                                                  "type": "Literal",
                                                                  "value": "content-disposition"
                                                                }
                                                              },
                                                              "property": {
                                                                "type": "Literal",
                                                                "value": 0
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "RE_FIELD"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "test"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "MemberExpression",
                                                              "computed": true,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "parsed"
                                                              },
                                                              "property": {
                                                                "type": "Literal",
                                                                "value": 0
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "prefix": true
                                                      },
                                                      "consequent": {
                                                        "type": "ReturnStatement",
                                                        "argument": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "skipPart"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "part"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ForStatement",
                                                      "init": {
                                                        "type": "SequenceExpression",
                                                        "expressions": [
                                                          {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "i"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": 0
                                                            }
                                                          },
                                                          {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "len"
                                                            },
                                                            "right": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "parsed"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "length"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "<",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "i"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "len"
                                                        }
                                                      },
                                                      "update": {
                                                        "type": "UpdateExpression",
                                                        "operator": "++",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "i"
                                                        },
                                                        "prefix": true
                                                      },
                                                      "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "RE_NAME"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "test"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": true,
                                                                  "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "parsed"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "i"
                                                                    }
                                                                  },
                                                                  "property": {
                                                                    "type": "Literal",
                                                                    "value": 0
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "consequent": {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "fieldname"
                                                                },
                                                                "right": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "decodeText"
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "MemberExpression",
                                                                      "computed": true,
                                                                      "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "parsed"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "i"
                                                                        }
                                                                      },
                                                                      "property": {
                                                                        "type": "Literal",
                                                                        "value": 1
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "Literal",
                                                                      "value": "binary"
                                                                    },
                                                                    {
                                                                      "type": "Literal",
                                                                      "value": "utf8"
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            },
                                                            "alternate": {
                                                              "type": "IfStatement",
                                                              "test": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "RE_FILENAME"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "test"
                                                                  }
                                                                },
                                                                "arguments": [
                                                                  {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                      "type": "MemberExpression",
                                                                      "computed": true,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "parsed"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "i"
                                                                      }
                                                                    },
                                                                    "property": {
                                                                      "type": "Literal",
                                                                      "value": 0
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "consequent": {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "filename"
                                                                  },
                                                                  "right": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "basename"
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "decodeText"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                              "type": "MemberExpression",
                                                                              "computed": true,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "parsed"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "i"
                                                                              }
                                                                            },
                                                                            "property": {
                                                                              "type": "Literal",
                                                                              "value": 1
                                                                            }
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "binary"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "utf8"
                                                                          }
                                                                        ]
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              },
                                                              "alternate": null
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "ReturnStatement",
                                                  "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "skipPart"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "part"
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "header"
                                                  },
                                                  "property": {
                                                    "type": "Literal",
                                                    "value": "content-transfer-encoding"
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "encoding"
                                                    },
                                                    "right": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": true,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "header"
                                                            },
                                                            "property": {
                                                              "type": "Literal",
                                                              "value": "content-transfer-encoding"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Literal",
                                                            "value": 0
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "toLowerCase"
                                                        }
                                                      },
                                                      "arguments": []
                                                    }
                                                  }
                                                },
                                                "alternate": {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "encoding"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "7bit"
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "onData"
                                                    },
                                                    "init": null
                                                  },
                                                  {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                      "type": "Identifier",
                                                      "name": "onEnd"
                                                    },
                                                    "init": null
                                                  }
                                                ],
                                                "kind": "var"
                                              },
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "LogicalExpression",
                                                  "operator": "||",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "contype"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "application/octet-stream"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!==",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "filename"
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "undefined"
                                                    }
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "nfiles"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "filesLimit"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "boy"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "hitFilesLimit"
                                                                }
                                                              },
                                                              "prefix": true
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "boy"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "hitFilesLimit"
                                                                      }
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": true
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "boy"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "emit"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Literal",
                                                                        "value": "filesLimit"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": null
                                                          },
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "skipPart"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "part"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "UpdateExpression",
                                                        "operator": "++",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "nfiles"
                                                        },
                                                        "prefix": true
                                                      }
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "boy"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "_events"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "file"
                                                          }
                                                        },
                                                        "prefix": true
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "self"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "parser"
                                                                  }
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "_ignore"
                                                                }
                                                              },
                                                              "arguments": []
                                                            }
                                                          },
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": null
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "UpdateExpression",
                                                        "operator": "++",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "nends"
                                                        },
                                                        "prefix": true
                                                      }
                                                    },
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "file"
                                                          },
                                                          "init": {
                                                            "type": "NewExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "FileStream"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "fileopts"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "curFile"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "file"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "file"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "on"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": "end"
                                                          },
                                                          {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "UpdateExpression",
                                                                    "operator": "--",
                                                                    "argument": {
                                                                      "type": "Identifier",
                                                                      "name": "nends"
                                                                    },
                                                                    "prefix": true
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "Identifier",
                                                                      "name": "checkFinished"
                                                                    },
                                                                    "arguments": []
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "file"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "_read"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "FunctionExpression",
                                                          "id": null,
                                                          "params": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "n"
                                                            }
                                                          ],
                                                          "defaults": [],
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                  "type": "UnaryExpression",
                                                                  "operator": "!",
                                                                  "argument": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "self"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "_pause"
                                                                    }
                                                                  },
                                                                  "prefix": true
                                                                },
                                                                "consequent": {
                                                                  "type": "ReturnStatement",
                                                                  "argument": null
                                                                },
                                                                "alternate": null
                                                              },
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "self"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "_pause"
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": false
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                  "type": "LogicalExpression",
                                                                  "operator": "&&",
                                                                  "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "self"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "_cb"
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "UnaryExpression",
                                                                    "operator": "!",
                                                                    "argument": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "self"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "_needDrain"
                                                                      }
                                                                    },
                                                                    "prefix": true
                                                                  }
                                                                },
                                                                "consequent": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "VariableDeclaration",
                                                                      "declarations": [
                                                                        {
                                                                          "type": "VariableDeclarator",
                                                                          "id": {
                                                                            "type": "Identifier",
                                                                            "name": "cb"
                                                                          },
                                                                          "init": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "self"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "_cb"
                                                                            }
                                                                          }
                                                                        }
                                                                      ],
                                                                      "kind": "var"
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_cb"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "Identifier",
                                                                          "name": "undefined"
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "cb"
                                                                        },
                                                                        "arguments": []
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "alternate": null
                                                              }
                                                            ]
                                                          },
                                                          "rest": null,
                                                          "generator": false,
                                                          "expression": false
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "boy"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "emit"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": "file"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "fieldname"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "file"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "filename"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "encoding"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "contype"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "onData"
                                                        },
                                                        "right": {
                                                          "type": "FunctionExpression",
                                                          "id": null,
                                                          "params": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "data"
                                                            }
                                                          ],
                                                          "defaults": [],
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": ">",
                                                                  "left": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "+=",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "nsize"
                                                                    },
                                                                    "right": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "data"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "length"
                                                                      }
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "fileSizeLimit"
                                                                  }
                                                                },
                                                                "consequent": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "VariableDeclaration",
                                                                      "declarations": [
                                                                        {
                                                                          "type": "VariableDeclarator",
                                                                          "id": {
                                                                            "type": "Identifier",
                                                                            "name": "extralen"
                                                                          },
                                                                          "init": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "-",
                                                                            "left": {
                                                                              "type": "Identifier",
                                                                              "name": "fileSizeLimit"
                                                                            },
                                                                            "right": {
                                                                              "type": "BinaryExpression",
                                                                              "operator": "-",
                                                                              "left": {
                                                                                "type": "Identifier",
                                                                                "name": "nsize"
                                                                              },
                                                                              "right": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "data"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "length"
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      ],
                                                                      "kind": "var"
                                                                    },
                                                                    {
                                                                      "type": "IfStatement",
                                                                      "test": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": ">",
                                                                        "left": {
                                                                          "type": "Identifier",
                                                                          "name": "extralen"
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": 0
                                                                        }
                                                                      },
                                                                      "consequent": {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "file"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "push"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "data"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "slice"
                                                                                }
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": 0
                                                                                },
                                                                                {
                                                                                  "type": "Identifier",
                                                                                  "name": "extralen"
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      },
                                                                      "alternate": null
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "file"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "emit"
                                                                          }
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "limit"
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "file"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "truncated"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": true
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "part"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "removeAllListeners"
                                                                          }
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "data"
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "alternate": {
                                                                  "type": "IfStatement",
                                                                  "test": {
                                                                    "type": "UnaryExpression",
                                                                    "operator": "!",
                                                                    "argument": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "file"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "push"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "name": "data"
                                                                        }
                                                                      ]
                                                                    },
                                                                    "prefix": true
                                                                  },
                                                                  "consequent": {
                                                                    "type": "ExpressionStatement",
                                                                    "expression": {
                                                                      "type": "AssignmentExpression",
                                                                      "operator": "=",
                                                                      "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "self"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "_pause"
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "Literal",
                                                                        "value": true
                                                                      }
                                                                    }
                                                                  },
                                                                  "alternate": null
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "rest": null,
                                                          "generator": false,
                                                          "expression": false
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "onEnd"
                                                        },
                                                        "right": {
                                                          "type": "FunctionExpression",
                                                          "id": null,
                                                          "params": [],
                                                          "defaults": [],
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "curFile"
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "undefined"
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "file"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "push"
                                                                    }
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "Literal",
                                                                      "value": null
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "rest": null,
                                                          "generator": false,
                                                          "expression": false
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "nfields"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "fieldsLimit"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "IfStatement",
                                                            "test": {
                                                              "type": "UnaryExpression",
                                                              "operator": "!",
                                                              "argument": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "boy"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "hitFieldsLimit"
                                                                }
                                                              },
                                                              "prefix": true
                                                            },
                                                            "consequent": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "boy"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "hitFieldsLimit"
                                                                      }
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": true
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "boy"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "emit"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Literal",
                                                                        "value": "fieldsLimit"
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "alternate": null
                                                          },
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "Identifier",
                                                                "name": "skipPart"
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Identifier",
                                                                  "name": "part"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "UpdateExpression",
                                                        "operator": "++",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "nfields"
                                                        },
                                                        "prefix": true
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "UpdateExpression",
                                                        "operator": "++",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "nends"
                                                        },
                                                        "prefix": true
                                                      }
                                                    },
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "buffer"
                                                          },
                                                          "init": {
                                                            "type": "Literal",
                                                            "value": ""
                                                          }
                                                        },
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "truncated"
                                                          },
                                                          "init": {
                                                            "type": "Literal",
                                                            "value": false
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "curField"
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "part"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "onData"
                                                        },
                                                        "right": {
                                                          "type": "FunctionExpression",
                                                          "id": null,
                                                          "params": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "data"
                                                            }
                                                          ],
                                                          "defaults": [],
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": ">",
                                                                  "left": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "+=",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "nsize"
                                                                    },
                                                                    "right": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "data"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "length"
                                                                      }
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "fieldSizeLimit"
                                                                  }
                                                                },
                                                                "consequent": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "VariableDeclaration",
                                                                      "declarations": [
                                                                        {
                                                                          "type": "VariableDeclarator",
                                                                          "id": {
                                                                            "type": "Identifier",
                                                                            "name": "extralen"
                                                                          },
                                                                          "init": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "-",
                                                                            "left": {
                                                                              "type": "Identifier",
                                                                              "name": "fieldSizeLimit"
                                                                            },
                                                                            "right": {
                                                                              "type": "BinaryExpression",
                                                                              "operator": "-",
                                                                              "left": {
                                                                                "type": "Identifier",
                                                                                "name": "nsize"
                                                                              },
                                                                              "right": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "data"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "length"
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      ],
                                                                      "kind": "var"
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "+=",
                                                                        "left": {
                                                                          "type": "Identifier",
                                                                          "name": "buffer"
                                                                        },
                                                                        "right": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "data"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "toString"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Literal",
                                                                              "value": "binary"
                                                                            },
                                                                            {
                                                                              "type": "Literal",
                                                                              "value": 0
                                                                            },
                                                                            {
                                                                              "type": "Identifier",
                                                                              "name": "extralen"
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "Identifier",
                                                                          "name": "truncated"
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": true
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "part"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "removeAllListeners"
                                                                          }
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "data"
                                                                          }
                                                                        ]
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "alternate": {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "+=",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "buffer"
                                                                    },
                                                                    "right": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "Identifier",
                                                                          "name": "data"
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "toString"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "Literal",
                                                                          "value": "binary"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "rest": null,
                                                          "generator": false,
                                                          "expression": false
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "onEnd"
                                                        },
                                                        "right": {
                                                          "type": "FunctionExpression",
                                                          "id": null,
                                                          "params": [],
                                                          "defaults": [],
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "AssignmentExpression",
                                                                  "operator": "=",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "curField"
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "undefined"
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "buffer"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "length"
                                                                  }
                                                                },
                                                                "consequent": {
                                                                  "type": "ExpressionStatement",
                                                                  "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "buffer"
                                                                    },
                                                                    "right": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "decodeText"
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "Identifier",
                                                                          "name": "buffer"
                                                                        },
                                                                        {
                                                                          "type": "Literal",
                                                                          "value": "binary"
                                                                        },
                                                                        {
                                                                          "type": "Identifier",
                                                                          "name": "charset"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                },
                                                                "alternate": null
                                                              },
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "boy"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "emit"
                                                                    }
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "Literal",
                                                                      "value": "field"
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "fieldname"
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "buffer"
                                                                    },
                                                                    {
                                                                      "type": "Literal",
                                                                      "value": false
                                                                    },
                                                                    {
                                                                      "type": "Identifier",
                                                                      "name": "truncated"
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "UpdateExpression",
                                                                  "operator": "--",
                                                                  "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "nends"
                                                                  },
                                                                  "prefix": true
                                                                }
                                                              },
                                                              {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "Identifier",
                                                                    "name": "checkFinished"
                                                                  },
                                                                  "arguments": []
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "rest": null,
                                                          "generator": false,
                                                          "expression": false
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "part"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "_readableState"
                                                      }
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "sync"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": false
                                                  }
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "part"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "on"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "data"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "onData"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "part"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "on"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "end"
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "onEnd"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "rest": null,
                                          "generator": false,
                                          "expression": false
                                        }
                                      ]
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "on"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "error"
                                    },
                                    {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "Identifier",
                                          "name": "err"
                                        }
                                      ],
                                      "defaults": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "Identifier",
                                              "name": "curFile"
                                            },
                                            "consequent": {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "curFile"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "emit"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": "error"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "err"
                                                  }
                                                ]
                                              }
                                            },
                                            "alternate": null
                                          }
                                        ]
                                      },
                                      "rest": null,
                                      "generator": false,
                                      "expression": false
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "on"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "error"
                    },
                    {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "err"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "boy"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "emit"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Literal",
                                  "value": "error"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "err"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    }
                  ]
                },
                "property": {
                  "type": "Identifier",
                  "name": "on"
                }
              },
              "arguments": [
                {
                  "type": "Literal",
                  "value": "finish"
                },
                {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [],
                  "defaults": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "finished"
                          },
                          "right": {
                            "type": "Literal",
                            "value": true
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "checkFinished"
                          },
                          "arguments": []
                        }
                      }
                    ]
                  },
                  "rest": null,
                  "generator": false,
                  "expression": false
                }
              ]
            }
          }
        ]
      },
      "rest": null,
      "generator": false,
      "expression": false
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "Identifier",
              "name": "Multipart"
            },
            "property": {
              "type": "Identifier",
              "name": "prototype"
            }
          },
          "property": {
            "type": "Identifier",
            "name": "write"
          }
        },
        "right": {
          "type": "FunctionExpression",
          "id": null,
          "params": [
            {
              "type": "Identifier",
              "name": "chunk"
            },
            {
              "type": "Identifier",
              "name": "cb"
            }
          ],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "r"
                    },
                    "init": null
                  }
                ],
                "kind": "var"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "r"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "parser"
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "write"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "chunk"
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ThisExpression"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "_pause"
                      }
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "cb"
                    },
                    "arguments": []
                  }
                },
                "alternate": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "_needDrain"
                          }
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "r"
                          },
                          "prefix": true
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "_cb"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "cb"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          },
          "rest": null,
          "generator": false,
          "expression": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "Identifier",
              "name": "Multipart"
            },
            "property": {
              "type": "Identifier",
              "name": "prototype"
            }
          },
          "property": {
            "type": "Identifier",
            "name": "end"
          }
        },
        "right": {
          "type": "FunctionExpression",
          "id": null,
          "params": [],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "self"
                    },
                    "init": {
                      "type": "ThisExpression"
                    }
                  }
                ],
                "kind": "var"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ThisExpression"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "_nparts"
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 0
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "self"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "_boy"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "_done"
                      }
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "process"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "nextTick"
                          }
                        },
                        "arguments": [
                          {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "self"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_boy"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_done"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": true
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "self"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_boy"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "emit"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "finish"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              }
            ]
          },
          "rest": null,
          "generator": false,
          "expression": false
        }
      }
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "skipPart"
      },
      "params": [
        {
          "type": "Identifier",
          "name": "part"
        }
      ],
      "defaults": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "part"
                },
                "property": {
                  "type": "Identifier",
                  "name": "resume"
                }
              },
              "arguments": []
            }
          }
        ]
      },
      "rest": null,
      "generator": false,
      "expression": false
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "FileStream"
      },
      "params": [
        {
          "type": "Identifier",
          "name": "opts"
        }
      ],
      "defaults": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "IfStatement",
            "test": {
              "type": "UnaryExpression",
              "operator": "!",
              "argument": {
                "type": "BinaryExpression",
                "operator": "instanceof",
                "left": {
                  "type": "ThisExpression"
                },
                "right": {
                  "type": "Identifier",
                  "name": "FileStream"
                }
              },
              "prefix": true
            },
            "consequent": {
              "type": "ReturnStatement",
              "argument": {
                "type": "NewExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "FileStream"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "opts"
                  }
                ]
              }
            },
            "alternate": null
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "ReadableStream"
                },
                "property": {
                  "type": "Identifier",
                  "name": "call"
                }
              },
              "arguments": [
                {
                  "type": "ThisExpression"
                },
                {
                  "type": "Identifier",
                  "name": "opts"
                }
              ]
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "ThisExpression"
                },
                "property": {
                  "type": "Identifier",
                  "name": "truncated"
                }
              },
              "right": {
                "type": "Literal",
                "value": false
              }
            }
          }
        ]
      },
      "rest": null,
      "generator": false,
      "expression": false
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "inherits"
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "FileStream"
          },
          {
            "type": "Identifier",
            "name": "ReadableStream"
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "Identifier",
              "name": "FileStream"
            },
            "property": {
              "type": "Identifier",
              "name": "prototype"
            }
          },
          "property": {
            "type": "Identifier",
            "name": "_read"
          }
        },
        "right": {
          "type": "FunctionExpression",
          "id": null,
          "params": [
            {
              "type": "Identifier",
              "name": "n"
            }
          ],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": []
          },
          "rest": null,
          "generator": false,
          "expression": false
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "module"
          },
          "property": {
            "type": "Identifier",
            "name": "exports"
          }
        },
        "right": {
          "type": "Identifier",
          "name": "Multipart"
        }
      }
    }
  ]
}