{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "FunctionExpression",
          "id": null,
          "params": [],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "template"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Handlebars"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "template"
                      }
                    }
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "templates"
                    },
                    "init": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Handlebars"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "templates"
                        }
                      },
                      "right": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Handlebars"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "templates"
                          }
                        },
                        "right": {
                          "type": "ObjectExpression",
                          "properties": []
                        }
                      }
                    }
                  }
                ],
                "kind": "var"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "templates"
                    },
                    "property": {
                      "type": "Literal",
                      "value": "property"
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "template"
                    },
                    "arguments": [
                      {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "Property",
                            "key": {
                              "type": "Literal",
                              "value": "1"
                            },
                            "value": {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "depth0"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "helpers"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "partials"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "data"
                                }
                              ],
                              "defaults": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Literal",
                                      "value": " disabled "
                                    }
                                  }
                                ]
                              },
                              "rest": null,
                              "generator": false,
                              "expression": false
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Literal",
                              "value": "compiler"
                            },
                            "value": {
                              "type": "ArrayExpression",
                              "elements": [
                                {
                                  "type": "Literal",
                                  "value": 6
                                },
                                {
                                  "type": "Literal",
                                  "value": ">= 2.0.0-beta.1"
                                }
                              ]
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Literal",
                              "value": "main"
                            },
                            "value": {
                              "type": "FunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "depth0"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "helpers"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "partials"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "data"
                                }
                              ],
                              "defaults": [],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "stack1"
                                        },
                                        "init": null
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "helper"
                                        },
                                        "init": null
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "functionType"
                                        },
                                        "init": {
                                          "type": "Literal",
                                          "value": "function"
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "helperMissing"
                                        },
                                        "init": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "helpers"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "helperMissing"
                                          }
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "escapeExpression"
                                        },
                                        "init": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "ThisExpression"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "escapeExpression"
                                          }
                                        }
                                      },
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "buffer"
                                        },
                                        "init": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Literal",
                                                  "value": "<li id=\""
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "escapeExpression"
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "SequenceExpression",
                                                      "expressions": [
                                                        {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "helper"
                                                          },
                                                          "right": {
                                                            "type": "ConditionalExpression",
                                                            "test": {
                                                              "type": "BinaryExpression",
                                                              "operator": "!=",
                                                              "left": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "helper"
                                                                },
                                                                "right": {
                                                                  "type": "LogicalExpression",
                                                                  "operator": "||",
                                                                  "left": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "helpers"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "property"
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "ConditionalExpression",
                                                                    "test": {
                                                                      "type": "BinaryExpression",
                                                                      "operator": "!=",
                                                                      "left": {
                                                                        "type": "Identifier",
                                                                        "name": "depth0"
                                                                      },
                                                                      "right": {
                                                                        "type": "Literal",
                                                                        "value": null
                                                                      }
                                                                    },
                                                                    "consequent": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "depth0"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "property"
                                                                      }
                                                                    },
                                                                    "alternate": {
                                                                      "type": "Identifier",
                                                                      "name": "depth0"
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": null
                                                              }
                                                            },
                                                            "consequent": {
                                                              "type": "Identifier",
                                                              "name": "helper"
                                                            },
                                                            "alternate": {
                                                              "type": "Identifier",
                                                              "name": "helperMissing"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "ConditionalExpression",
                                                          "test": {
                                                            "type": "BinaryExpression",
                                                            "operator": "===",
                                                            "left": {
                                                              "type": "UnaryExpression",
                                                              "operator": "typeof",
                                                              "argument": {
                                                                "type": "Identifier",
                                                                "name": "helper"
                                                              },
                                                              "prefix": true
                                                            },
                                                            "right": {
                                                              "type": "Identifier",
                                                              "name": "functionType"
                                                            }
                                                          },
                                                          "consequent": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "helper"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "call"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "depth0"
                                                              },
                                                              {
                                                                "type": "ObjectExpression",
                                                                "properties": [
                                                                  {
                                                                    "type": "Property",
                                                                    "key": {
                                                                      "type": "Literal",
                                                                      "value": "name"
                                                                    },
                                                                    "value": {
                                                                      "type": "Literal",
                                                                      "value": "property"
                                                                    },
                                                                    "kind": "init"
                                                                  },
                                                                  {
                                                                    "type": "Property",
                                                                    "key": {
                                                                      "type": "Literal",
                                                                      "value": "hash"
                                                                    },
                                                                    "value": {
                                                                      "type": "ObjectExpression",
                                                                      "properties": []
                                                                    },
                                                                    "kind": "init"
                                                                  },
                                                                  {
                                                                    "type": "Property",
                                                                    "key": {
                                                                      "type": "Literal",
                                                                      "value": "data"
                                                                    },
                                                                    "value": {
                                                                      "type": "Identifier",
                                                                      "name": "data"
                                                                    },
                                                                    "kind": "init"
                                                                  }
                                                                ]
                                                              }
                                                            ]
                                                          },
                                                          "alternate": {
                                                            "type": "Identifier",
                                                            "name": "helper"
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "\">\n  <span class=\"property\">"
                                              }
                                            },
                                            "right": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "escapeExpression"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "SequenceExpression",
                                                  "expressions": [
                                                    {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "helper"
                                                      },
                                                      "right": {
                                                        "type": "ConditionalExpression",
                                                        "test": {
                                                          "type": "BinaryExpression",
                                                          "operator": "!=",
                                                          "left": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "helper"
                                                            },
                                                            "right": {
                                                              "type": "LogicalExpression",
                                                              "operator": "||",
                                                              "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "helpers"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "property"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "ConditionalExpression",
                                                                "test": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "!=",
                                                                  "left": {
                                                                    "type": "Identifier",
                                                                    "name": "depth0"
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": null
                                                                  }
                                                                },
                                                                "consequent": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "depth0"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "property"
                                                                  }
                                                                },
                                                                "alternate": {
                                                                  "type": "Identifier",
                                                                  "name": "depth0"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": null
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "Identifier",
                                                          "name": "helper"
                                                        },
                                                        "alternate": {
                                                          "type": "Identifier",
                                                          "name": "helperMissing"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ConditionalExpression",
                                                      "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                          "type": "UnaryExpression",
                                                          "operator": "typeof",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "helper"
                                                          },
                                                          "prefix": true
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "functionType"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "helper"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "call"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "depth0"
                                                          },
                                                          {
                                                            "type": "ObjectExpression",
                                                            "properties": [
                                                              {
                                                                "type": "Property",
                                                                "key": {
                                                                  "type": "Literal",
                                                                  "value": "name"
                                                                },
                                                                "value": {
                                                                  "type": "Literal",
                                                                  "value": "property"
                                                                },
                                                                "kind": "init"
                                                              },
                                                              {
                                                                "type": "Property",
                                                                "key": {
                                                                  "type": "Literal",
                                                                  "value": "hash"
                                                                },
                                                                "value": {
                                                                  "type": "ObjectExpression",
                                                                  "properties": []
                                                                },
                                                                "kind": "init"
                                                              },
                                                              {
                                                                "type": "Property",
                                                                "key": {
                                                                  "type": "Literal",
                                                                  "value": "data"
                                                                },
                                                                "value": {
                                                                  "type": "Identifier",
                                                                  "name": "data"
                                                                },
                                                                "kind": "init"
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      "alternate": {
                                                        "type": "Identifier",
                                                        "name": "helper"
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "</span>:\n  <div class=\"js-action js-action--create ico\" title=\"Create new shape\">\n    <nav>\n      <a data-shape=\"circle()\">circle</a>\n      <a data-shape=\"ellipse()\">ellipse</a>\n      <a data-shape=\"polygon()\">polygon</a>\n    </nav>\n  </div><div class=\"js-action js-action--edit ico\" title=\"Edit shape\" "
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "stack1"
                                      },
                                      "right": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "helpers"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "unless"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "call"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "depth0"
                                          },
                                          {
                                            "type": "ConditionalExpression",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "!=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "depth0"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": null
                                              }
                                            },
                                            "consequent": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "depth0"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "editable"
                                              }
                                            },
                                            "alternate": {
                                              "type": "Identifier",
                                              "name": "depth0"
                                            }
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Literal",
                                                  "value": "name"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "unless"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Literal",
                                                  "value": "hash"
                                                },
                                                "value": {
                                                  "type": "ObjectExpression",
                                                  "properties": []
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Literal",
                                                  "value": "fn"
                                                },
                                                "value": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "program"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": 1
                                                    },
                                                    {
                                                      "type": "Identifier",
                                                      "name": "data"
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Literal",
                                                  "value": "inverse"
                                                },
                                                "value": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "ThisExpression"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "noop"
                                                  }
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Literal",
                                                  "value": "data"
                                                },
                                                "value": {
                                                  "type": "Identifier",
                                                  "name": "data"
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "!=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "stack1"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": null
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "+=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "buffer"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "stack1"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "BinaryExpression",
                                      "operator": "+",
                                      "left": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "buffer"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "></div>\n  <span class=\"value\">"
                                          }
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "escapeExpression"
                                          },
                                          "arguments": [
                                            {
                                              "type": "SequenceExpression",
                                              "expressions": [
                                                {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "helper"
                                                  },
                                                  "right": {
                                                    "type": "ConditionalExpression",
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": "!=",
                                                      "left": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "helper"
                                                        },
                                                        "right": {
                                                          "type": "LogicalExpression",
                                                          "operator": "||",
                                                          "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "helpers"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "value"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "ConditionalExpression",
                                                            "test": {
                                                              "type": "BinaryExpression",
                                                              "operator": "!=",
                                                              "left": {
                                                                "type": "Identifier",
                                                                "name": "depth0"
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": null
                                                              }
                                                            },
                                                            "consequent": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "depth0"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "value"
                                                              }
                                                            },
                                                            "alternate": {
                                                              "type": "Identifier",
                                                              "name": "depth0"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": null
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "Identifier",
                                                      "name": "helper"
                                                    },
                                                    "alternate": {
                                                      "type": "Identifier",
                                                      "name": "helperMissing"
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ConditionalExpression",
                                                  "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "===",
                                                    "left": {
                                                      "type": "UnaryExpression",
                                                      "operator": "typeof",
                                                      "argument": {
                                                        "type": "Identifier",
                                                        "name": "helper"
                                                      },
                                                      "prefix": true
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "functionType"
                                                    }
                                                  },
                                                  "consequent": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "helper"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "call"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "depth0"
                                                      },
                                                      {
                                                        "type": "ObjectExpression",
                                                        "properties": [
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Literal",
                                                              "value": "name"
                                                            },
                                                            "value": {
                                                              "type": "Literal",
                                                              "value": "value"
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Literal",
                                                              "value": "hash"
                                                            },
                                                            "value": {
                                                              "type": "ObjectExpression",
                                                              "properties": []
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Literal",
                                                              "value": "data"
                                                            },
                                                            "value": {
                                                              "type": "Identifier",
                                                              "name": "data"
                                                            },
                                                            "kind": "init"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "alternate": {
                                                    "type": "Identifier",
                                                    "name": "helper"
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "</span>;\n</li>\n"
                                      }
                                    }
                                  }
                                ]
                              },
                              "rest": null,
                              "generator": false,
                              "expression": false
                            },
                            "kind": "init"
                          },
                          {
                            "type": "Property",
                            "key": {
                              "type": "Literal",
                              "value": "useData"
                            },
                            "value": {
                              "type": "Literal",
                              "value": true
                            },
                            "kind": "init"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          },
          "rest": null,
          "generator": false,
          "expression": false
        },
        "arguments": []
      }
    }
  ]
}