{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "FunctionExpression",
          "id": {
            "type": "Identifier",
            "name": "e"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "t"
            },
            {
              "type": "Identifier",
              "name": "n"
            },
            {
              "type": "Identifier",
              "name": "r"
            }
          ],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "s"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "o"
                  },
                  {
                    "type": "Identifier",
                    "name": "u"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "n"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "o"
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "t"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "o"
                                }
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "a"
                                      },
                                      "init": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "==",
                                          "left": {
                                            "type": "UnaryExpression",
                                            "operator": "typeof",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "require"
                                            },
                                            "prefix": true
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "function"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "require"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "u"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "a"
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "a"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "o"
                                        },
                                        {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "Literal",
                                            "value": 0
                                          },
                                          "prefix": true
                                        }
                                      ]
                                    }
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "i"
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "i"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "o"
                                        },
                                        {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "Literal",
                                            "value": 0
                                          },
                                          "prefix": true
                                        }
                                      ]
                                    }
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "Error"
                                    },
                                    "arguments": [
                                      {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Literal",
                                            "value": "Cannot find module '"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "o"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "'"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "f"
                                },
                                "init": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "n"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "o"
                                    }
                                  },
                                  "right": {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "exports"
                                        },
                                        "value": {
                                          "type": "ObjectExpression",
                                          "properties": []
                                        },
                                        "kind": "init"
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "t"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "o"
                                    }
                                  },
                                  "property": {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "f"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "exports"
                                  }
                                },
                                {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "Identifier",
                                      "name": "e"
                                    }
                                  ],
                                  "defaults": [],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "n"
                                            },
                                            "init": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "t"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "o"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 1
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "e"
                                              }
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "s"
                                          },
                                          "arguments": [
                                            {
                                              "type": "ConditionalExpression",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "n"
                                              },
                                              "consequent": {
                                                "type": "Identifier",
                                                "name": "n"
                                              },
                                              "alternate": {
                                                "type": "Identifier",
                                                "name": "e"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "rest": null,
                                  "generator": false,
                                  "expression": false
                                },
                                {
                                  "type": "Identifier",
                                  "name": "f"
                                },
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "f"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "exports"
                                  }
                                },
                                {
                                  "type": "Identifier",
                                  "name": "e"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "t"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "n"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "r"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "n"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "o"
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "exports"
                        }
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "i"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "require"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "function"
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "require"
                      }
                    }
                  }
                ],
                "kind": "var"
              },
              {
                "type": "ForStatement",
                "init": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "o"
                      },
                      "init": {
                        "type": "Literal",
                        "value": 0
                      }
                    }
                  ],
                  "kind": "var"
                },
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "o"
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "r"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                },
                "update": {
                  "type": "UpdateExpression",
                  "operator": "++",
                  "argument": {
                    "type": "Identifier",
                    "name": "o"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "s"
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "r"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "o"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "s"
                }
              }
            ]
          },
          "rest": null,
          "generator": false,
          "expression": false
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": 1
                },
                "value": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "require"
                        },
                        {
                          "type": "Identifier",
                          "name": "module"
                        },
                        {
                          "type": "Identifier",
                          "name": "exports"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "module"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "exports"
                                }
                              },
                              "right": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "debug"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "value": true
                                    },
                                    "kind": "init"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  ]
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": 2
                },
                "value": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "require"
                        },
                        {
                          "type": "Identifier",
                          "name": "module"
                        },
                        {
                          "type": "Identifier",
                          "name": "exports"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "Literal",
                              "value": "use strict"
                            }
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "jqLite"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "require"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "./lib/jqLite.js"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "util"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "require"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "./lib/util.js"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "formControlClass"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-form-control"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "formGroupClass"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-form-group"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "floatingLabelBaseClass"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-form-floating-label"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "floatingLabelActiveClass"
                                },
                                "init": {
                                  "type": "BinaryExpression",
                                  "operator": "+",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "floatingLabelBaseClass"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "-active"
                                  }
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "animationName"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-form-floating-label-inserted"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "_supportsPointerEvents"
                                },
                                "init": null
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "initialize"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "labelEl"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "labelEl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_muiFloatLabel"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": null
                                  },
                                  "alternate": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "labelEl"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_muiFloatLabel"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": true
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "inputEl"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "labelEl"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "previousElementSibling"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "inputEl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  },
                                  "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "jqLite"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "addClass"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "labelEl"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "floatingLabelActiveClass"
                                        }
                                      ]
                                    }
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "jqLite"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "on"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "inputEl"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": "input"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "inputHandler"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "setTimeout"
                                    },
                                    "arguments": [
                                      {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "s"
                                                  },
                                                  "init": {
                                                    "type": "Literal",
                                                    "value": ".15s ease-out"
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "jqLite"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "css"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "labelEl"
                                                  },
                                                  {
                                                    "type": "ObjectExpression",
                                                    "properties": [
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Literal",
                                                          "value": "-webkit-transition"
                                                        },
                                                        "value": {
                                                          "type": "Identifier",
                                                          "name": "s"
                                                        },
                                                        "kind": "init"
                                                      },
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Literal",
                                                          "value": "-moz-transition"
                                                        },
                                                        "value": {
                                                          "type": "Identifier",
                                                          "name": "s"
                                                        },
                                                        "kind": "init"
                                                      },
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Literal",
                                                          "value": "-o-transition"
                                                        },
                                                        "value": {
                                                          "type": "Identifier",
                                                          "name": "s"
                                                        },
                                                        "kind": "init"
                                                      },
                                                      {
                                                        "type": "Property",
                                                        "key": {
                                                          "type": "Literal",
                                                          "value": "transition"
                                                        },
                                                        "value": {
                                                          "type": "Identifier",
                                                          "name": "s"
                                                        },
                                                        "kind": "init"
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      },
                                      {
                                        "type": "Literal",
                                        "value": 150
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "supportsPointerEvents"
                                      },
                                      "arguments": []
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": false
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "jqLite"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "css"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "labelEl"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "cursor"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "text"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "jqLite"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "on"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "labelEl"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "click"
                                            },
                                            {
                                              "type": "FunctionExpression",
                                              "id": null,
                                              "params": [],
                                              "defaults": [],
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "UnaryExpression",
                                                      "operator": "!",
                                                      "argument": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "jqLite"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "hasClass"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "labelEl"
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "floatingLabelActiveClass"
                                                          }
                                                        ]
                                                      },
                                                      "prefix": true
                                                    },
                                                    "consequent": {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "inputEl"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "focus"
                                                          }
                                                        },
                                                        "arguments": []
                                                      }
                                                    },
                                                    "alternate": null
                                                  }
                                                ]
                                              },
                                              "rest": null,
                                              "generator": false,
                                              "expression": false
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "inputHandler"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "ev"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "inputEl"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "ev"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "target"
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "labelEl"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "inputEl"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "nextElementSibling"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "jqLite"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "hasClass"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "labelEl"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "floatingLabelBaseClass"
                                      }
                                    ]
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "inputEl"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "value"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 0
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "jqLite"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "removeClass"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "labelEl"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "floatingLabelActiveClass"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "jqLite"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "addClass"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "labelEl"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "floatingLabelActiveClass"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "activateLabel"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "labelEl"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "jqLite"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "addClass"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "labelEl"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "floatingLabelActiveClass"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "supportsPointerEvents"
                                      },
                                      "arguments": []
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": false
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "jqLite"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "css"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "labelEl"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "cursor"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "default"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "deactivateLabel"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "labelEl"
                              },
                              {
                                "type": "Identifier",
                                "name": "inputEl"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "jqLite"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "removeClass"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "labelEl"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "floatingLabelActiveClass"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "supportsPointerEvents"
                            },
                            "params": [],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "_supportsPointerEvents"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "_supportsPointerEvents"
                                    }
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "document"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "createElement"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "x"
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "element"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "style"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "cssText"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "pointer-events:auto"
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "_supportsPointerEvents"
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "element"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "style"
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "pointerEvents"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "auto"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "_supportsPointerEvents"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "module"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "exports"
                                }
                              },
                              "right": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "formControlClass"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "formControlClass"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "formGroupClass"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "formGroupClass"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "floatingLabelBaseClass"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "floatingLabelBaseClass"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "floatingLabelActiveClass"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "floatingLabelActiveClass"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "initialize"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "initialize"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "initListeners"
                                    },
                                    "value": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [],
                                      "defaults": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "doc"
                                                },
                                                "init": {
                                                  "type": "Identifier",
                                                  "name": "document"
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "elList"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "doc"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "getElementsByClassName"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "floatingLabelBaseClass"
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ForStatement",
                                            "init": {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  },
                                                  "init": {
                                                    "type": "BinaryExpression",
                                                    "operator": "-",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "elList"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": 1
                                                    }
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": ">=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "i"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": 0
                                              }
                                            },
                                            "update": {
                                              "type": "UpdateExpression",
                                              "operator": "--",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "i"
                                              },
                                              "prefix": false
                                            },
                                            "body": {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "initialize"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "elList"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "i"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "util"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "onNodeInserted"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "FunctionExpression",
                                                  "id": null,
                                                  "params": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "el"
                                                    }
                                                  ],
                                                  "defaults": [],
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "jqLite"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "hasClass"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "el"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "floatingLabelBaseClass"
                                                            }
                                                          ]
                                                        },
                                                        "consequent": {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "initialize"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "el"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "alternate": null
                                                      }
                                                    ]
                                                  },
                                                  "rest": null,
                                                  "generator": false,
                                                  "expression": false
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "rest": null,
                                      "generator": false,
                                      "expression": false
                                    },
                                    "kind": "init"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "./lib/jqLite.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 3
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "./lib/util.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 4
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  ]
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": 3
                },
                "value": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "require"
                        },
                        {
                          "type": "Identifier",
                          "name": "module"
                        },
                        {
                          "type": "Identifier",
                          "name": "exports"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "Literal",
                              "value": "use strict"
                            }
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteAddClass"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              },
                              {
                                "type": "Identifier",
                                "name": "cssClasses"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "cssClasses"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "element"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "setAttribute"
                                        }
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": null
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "existingClasses"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_getExistingClasses"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "element"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "splitClasses"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "cssClasses"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "split"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": " "
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "cssClass"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ForStatement",
                                  "init": {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "init": {
                                          "type": "Literal",
                                          "value": 0
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "splitClasses"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    }
                                  },
                                  "update": {
                                    "type": "UpdateExpression",
                                    "operator": "++",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "prefix": false
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "cssClass"
                                          },
                                          "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "splitClasses"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "i"
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "trim"
                                              }
                                            },
                                            "arguments": []
                                          }
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "existingClasses"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "indexOf"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": " "
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "cssClass"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": " "
                                                }
                                              }
                                            ]
                                          },
                                          "right": {
                                            "type": "UnaryExpression",
                                            "operator": "-",
                                            "argument": {
                                              "type": "Literal",
                                              "value": 1
                                            },
                                            "prefix": true
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "+=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "existingClasses"
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "cssClass"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": " "
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "setAttribute"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "class"
                                      },
                                      {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "existingClasses"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "trim"
                                          }
                                        },
                                        "arguments": []
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteCss"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              },
                              {
                                "type": "Identifier",
                                "name": "name"
                              },
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "name"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "getComputedStyle"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "element"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "nameType"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "jqLiteType"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "name"
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "nameType"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "object"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ForInStatement",
                                        "left": {
                                          "type": "VariableDeclaration",
                                          "declarations": [
                                            {
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              "init": null
                                            }
                                          ],
                                          "kind": "var"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "name"
                                        },
                                        "body": {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "element"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "style"
                                                }
                                              },
                                              "property": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "_camelCase"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                ]
                                              }
                                            },
                                            "right": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "name"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "key"
                                              }
                                            }
                                          }
                                        },
                                        "each": false
                                      },
                                      {
                                        "type": "ReturnStatement",
                                        "argument": null
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "nameType"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "string"
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "value"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                      }
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "element"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "style"
                                              }
                                            },
                                            "property": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_camelCase"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "name"
                                                }
                                              ]
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "value"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "styleObj"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "getComputedStyle"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "element"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "isArray"
                                      },
                                      "init": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "jqLiteType"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "name"
                                            }
                                          ]
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "array"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "isArray"
                                    },
                                    "prefix": true
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "_getCurrCssProp"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "element"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "name"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "styleObj"
                                        }
                                      ]
                                    }
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "outObj"
                                      },
                                      "init": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ForStatement",
                                  "init": {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "init": {
                                          "type": "Literal",
                                          "value": 0
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "name"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    }
                                  },
                                  "update": {
                                    "type": "UpdateExpression",
                                    "operator": "++",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "prefix": false
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "key"
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "name"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "i"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "outObj"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "key"
                                            }
                                          },
                                          "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "_getCurrCssProp"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "element"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "styleObj"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "outObj"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteHasClass"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              },
                              {
                                "type": "Identifier",
                                "name": "cls"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "cls"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "element"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "getAttribute"
                                        }
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Literal",
                                      "value": false
                                    }
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "BinaryExpression",
                                    "operator": ">",
                                    "left": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "_getExistingClasses"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "element"
                                            }
                                          ]
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "indexOf"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "Literal",
                                              "value": " "
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "cls"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": " "
                                          }
                                        }
                                      ]
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "-",
                                      "argument": {
                                        "type": "Literal",
                                        "value": 1
                                      },
                                      "prefix": true
                                    }
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteType"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "somevar"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "somevar"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Literal",
                                      "value": "undefined"
                                    }
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "typeStr"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "toString"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "call"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "somevar"
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "typeStr"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "indexOf"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "[object "
                                        }
                                      ]
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 0
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ReturnStatement",
                                        "argument": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "typeStr"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "slice"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": 8
                                                },
                                                {
                                                  "type": "UnaryExpression",
                                                  "operator": "-",
                                                  "argument": {
                                                    "type": "Literal",
                                                    "value": 1
                                                  },
                                                  "prefix": true
                                                }
                                              ]
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "toLowerCase"
                                            }
                                          },
                                          "arguments": []
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ThrowStatement",
                                        "argument": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Literal",
                                            "value": "Could not understand type: "
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "typeStr"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteOn"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              },
                              {
                                "type": "Identifier",
                                "name": "type"
                              },
                              {
                                "type": "Identifier",
                                "name": "callback"
                              },
                              {
                                "type": "Identifier",
                                "name": "useCapture"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "useCapture"
                                    },
                                    "right": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "useCapture"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "undefined"
                                        }
                                      },
                                      "consequent": {
                                        "type": "Literal",
                                        "value": false
                                      },
                                      "alternate": {
                                        "type": "Identifier",
                                        "name": "useCapture"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "addEventListener"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "callback"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "useCapture"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "cache"
                                      },
                                      "init": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "element"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_muiEventCache"
                                          }
                                        },
                                        "right": {
                                          "type": "LogicalExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "element"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_muiEventCache"
                                            }
                                          },
                                          "right": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "cache"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "type"
                                      }
                                    },
                                    "right": {
                                      "type": "LogicalExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "cache"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "type"
                                        }
                                      },
                                      "right": {
                                        "type": "ArrayExpression",
                                        "elements": []
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "cache"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "type"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "push"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "ArrayExpression",
                                        "elements": [
                                          {
                                            "type": "Identifier",
                                            "name": "callback"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "useCapture"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteOff"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              },
                              {
                                "type": "Identifier",
                                "name": "type"
                              },
                              {
                                "type": "Identifier",
                                "name": "callback"
                              },
                              {
                                "type": "Identifier",
                                "name": "useCapture"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "useCapture"
                                    },
                                    "right": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "useCapture"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "undefined"
                                        }
                                      },
                                      "consequent": {
                                        "type": "Literal",
                                        "value": false
                                      },
                                      "alternate": {
                                        "type": "Identifier",
                                        "name": "useCapture"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "cache"
                                      },
                                      "init": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "element"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_muiEventCache"
                                          }
                                        },
                                        "right": {
                                          "type": "LogicalExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "element"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_muiEventCache"
                                            }
                                          },
                                          "right": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "argsList"
                                      },
                                      "init": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "cache"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "type"
                                          }
                                        },
                                        "right": {
                                          "type": "ArrayExpression",
                                          "elements": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "args"
                                      },
                                      "init": null
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "i"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "argsList"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "WhileStatement",
                                  "test": {
                                    "type": "UpdateExpression",
                                    "operator": "--",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "prefix": false
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "args"
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "argsList"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "i"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "LogicalExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "callback"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "undefined"
                                            }
                                          },
                                          "right": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "args"
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 0
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "callback"
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "args"
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 1
                                                }
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "useCapture"
                                              }
                                            }
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "argsList"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "splice"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  },
                                                  {
                                                    "type": "Literal",
                                                    "value": 1
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "element"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "removeEventListener"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "args"
                                                    },
                                                    "property": {
                                                      "type": "Literal",
                                                      "value": 0
                                                    }
                                                  },
                                                  {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "args"
                                                    },
                                                    "property": {
                                                      "type": "Literal",
                                                      "value": 1
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteOne"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              },
                              {
                                "type": "Identifier",
                                "name": "type"
                              },
                              {
                                "type": "Identifier",
                                "name": "callback"
                              },
                              {
                                "type": "Identifier",
                                "name": "useCapture"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "jqLiteOn"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      {
                                        "type": "FunctionExpression",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "onFn"
                                        },
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "jqLiteOff"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "element"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "callback"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "jqLiteOff"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "element"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "type"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "onFn"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "jqLiteOn"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "type"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "fn"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteOffset"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "win"
                                      },
                                      "init": {
                                        "type": "Identifier",
                                        "name": "window"
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "docEl"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "document"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "documentElement"
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "rect"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "element"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "getBoundingClientRect"
                                          }
                                        },
                                        "arguments": []
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "viewLeft"
                                      },
                                      "init": null
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "viewTop"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "viewLeft"
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "win"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "pageXOffset"
                                          }
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "docEl"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "scrollLeft"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "docEl"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "clientLeft"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "viewTop"
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "win"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "pageYOffset"
                                          }
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "docEl"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "scrollTop"
                                          }
                                        }
                                      },
                                      "right": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "docEl"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "clientTop"
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 0
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "ObjectExpression",
                                    "properties": [
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "top"
                                        },
                                        "value": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "rect"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "top"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "viewTop"
                                          }
                                        },
                                        "kind": "init"
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "left"
                                        },
                                        "value": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "rect"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "left"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "viewLeft"
                                          }
                                        },
                                        "kind": "init"
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "height"
                                        },
                                        "value": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "rect"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "height"
                                          }
                                        },
                                        "kind": "init"
                                      },
                                      {
                                        "type": "Property",
                                        "key": {
                                          "type": "Identifier",
                                          "name": "width"
                                        },
                                        "value": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "rect"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "width"
                                          }
                                        },
                                        "kind": "init"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteReady"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "fn"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "done"
                                      },
                                      "init": {
                                        "type": "Literal",
                                        "value": false
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "top"
                                      },
                                      "init": {
                                        "type": "Literal",
                                        "value": true
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "doc"
                                      },
                                      "init": {
                                        "type": "Identifier",
                                        "name": "document"
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "win"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "doc"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "defaultView"
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "root"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "doc"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "documentElement"
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "add"
                                      },
                                      "init": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "doc"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                          }
                                        },
                                        "consequent": {
                                          "type": "Literal",
                                          "value": "addEventListener"
                                        },
                                        "alternate": {
                                          "type": "Literal",
                                          "value": "attachEvent"
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "rem"
                                      },
                                      "init": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "doc"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                          }
                                        },
                                        "consequent": {
                                          "type": "Literal",
                                          "value": "removeEventListener"
                                        },
                                        "alternate": {
                                          "type": "Literal",
                                          "value": "detachEvent"
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "pre"
                                      },
                                      "init": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "doc"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                          }
                                        },
                                        "consequent": {
                                          "type": "Literal",
                                          "value": ""
                                        },
                                        "alternate": {
                                          "type": "Literal",
                                          "value": "on"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "init"
                                      },
                                      "init": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                          {
                                            "type": "Identifier",
                                            "name": "e"
                                          }
                                        ],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "==",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "e"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "readystatechange"
                                                  }
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "!=",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "doc"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "readyState"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "complete"
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ReturnStatement",
                                                    "argument": null
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "ConditionalExpression",
                                                    "test": {
                                                      "type": "BinaryExpression",
                                                      "operator": "==",
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "e"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "type"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": "load"
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "Identifier",
                                                      "name": "win"
                                                    },
                                                    "alternate": {
                                                      "type": "Identifier",
                                                      "name": "doc"
                                                    }
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "rem"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "pre"
                                                    },
                                                    "right": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "e"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "init"
                                                  },
                                                  {
                                                    "type": "Literal",
                                                    "value": false
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "UnaryExpression",
                                                  "operator": "!",
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "done"
                                                  },
                                                  "prefix": true
                                                },
                                                "right": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "done"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": true
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "fn"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "call"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "win"
                                                    },
                                                    {
                                                      "type": "LogicalExpression",
                                                      "operator": "||",
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "e"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "type"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "e"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "poll"
                                      },
                                      "init": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "TryStatement",
                                              "block": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "root"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "doScroll"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Literal",
                                                          "value": "left"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "guardedHandlers": [],
                                              "handlers": [
                                                {
                                                  "type": "CatchClause",
                                                  "param": {
                                                    "type": "Identifier",
                                                    "name": "e"
                                                  },
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "setTimeout"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "poll"
                                                            },
                                                            {
                                                              "type": "Literal",
                                                              "value": 50
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "ReturnStatement",
                                                        "argument": null
                                                      }
                                                    ]
                                                  }
                                                }
                                              ],
                                              "finalizer": null
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "init"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Literal",
                                                    "value": "poll"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "==",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "doc"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "readyState"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "complete"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "fn"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "call"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "win"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "lazy"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "LogicalExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "doc"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "createEventObject"
                                            }
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "root"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "doScroll"
                                            }
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "TryStatement",
                                              "block": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "top"
                                                      },
                                                      "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "win"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "frameElement"
                                                          }
                                                        },
                                                        "prefix": true
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "guardedHandlers": [],
                                              "handlers": [
                                                {
                                                  "type": "CatchClause",
                                                  "param": {
                                                    "type": "Identifier",
                                                    "name": "e"
                                                  },
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": []
                                                  }
                                                }
                                              ],
                                              "finalizer": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "Identifier",
                                                "name": "top"
                                              },
                                              "consequent": {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "poll"
                                                  },
                                                  "arguments": []
                                                }
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "doc"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "add"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "pre"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "DOMContentLoaded"
                                              }
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "init"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": false
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "doc"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "add"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "pre"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "readystatechange"
                                              }
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "init"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": false
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "win"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "add"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "pre"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "load"
                                              }
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "init"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": false
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "jqLiteRemoveClass"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              },
                              {
                                "type": "Identifier",
                                "name": "cssClasses"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "cssClasses"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "element"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "setAttribute"
                                        }
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": null
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "existingClasses"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_getExistingClasses"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "element"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "splitClasses"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "cssClasses"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "split"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": " "
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "cssClass"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ForStatement",
                                  "init": {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "init": {
                                          "type": "Literal",
                                          "value": 0
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "splitClasses"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    }
                                  },
                                  "update": {
                                    "type": "UpdateExpression",
                                    "operator": "++",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "prefix": false
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "cssClass"
                                          },
                                          "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "splitClasses"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "i"
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "trim"
                                              }
                                            },
                                            "arguments": []
                                          }
                                        }
                                      },
                                      {
                                        "type": "WhileStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": ">=",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "existingClasses"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "indexOf"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Literal",
                                                    "value": " "
                                                  },
                                                  "right": {
                                                    "type": "Identifier",
                                                    "name": "cssClass"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": " "
                                                }
                                              }
                                            ]
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 0
                                          }
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "existingClasses"
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "existingClasses"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "replace"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "Literal",
                                                          "value": " "
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "cssClass"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": " "
                                                      }
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": " "
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "element"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "setAttribute"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "class"
                                      },
                                      {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "existingClasses"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "trim"
                                          }
                                        },
                                        "arguments": []
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "SPECIAL_CHARS_REGEXP"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "MOZ_HACK_REGEXP"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "ESCAPE_REGEXP"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": {}
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "BOOLEAN_ATTRS"
                                },
                                "init": null
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "BOOLEAN_ATTRS"
                              },
                              "right": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "multiple"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "value": true
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "selected"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "value": true
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "checked"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "value": true
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "disabled"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "value": true
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "readonly"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "value": true
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "required"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "value": true
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "open"
                                    },
                                    "value": {
                                      "type": "Literal",
                                      "value": true
                                    },
                                    "kind": "init"
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "_getExistingClasses"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "element"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "classes"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "LogicalExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "element"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "getAttribute"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "class"
                                                }
                                              ]
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": ""
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "replace"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": {}
                                          },
                                          {
                                            "type": "Literal",
                                            "value": ""
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "+",
                                      "left": {
                                        "type": "Literal",
                                        "value": " "
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "classes"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": " "
                                    }
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "_camelCase"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "name"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "name"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "replace"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "SPECIAL_CHARS_REGEXP"
                                          },
                                          {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                              {
                                                "type": "Identifier",
                                                "name": "_"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "separator"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "letter"
                                              },
                                              {
                                                "type": "Identifier",
                                                "name": "offset"
                                              }
                                            ],
                                            "defaults": [],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "argument": {
                                                    "type": "ConditionalExpression",
                                                    "test": {
                                                      "type": "Identifier",
                                                      "name": "offset"
                                                    },
                                                    "consequent": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "letter"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "toUpperCase"
                                                        }
                                                      },
                                                      "arguments": []
                                                    },
                                                    "alternate": {
                                                      "type": "Identifier",
                                                      "name": "letter"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "rest": null,
                                            "generator": false,
                                            "expression": false
                                          }
                                        ]
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "replace"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "MOZ_HACK_REGEXP"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": "Moz$1"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "_escapeRegExp"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "string"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "string"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "replace"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "ESCAPE_REGEXP"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": "\\$1"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "_getCurrCssProp"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "elem"
                              },
                              {
                                "type": "Identifier",
                                "name": "name"
                              },
                              {
                                "type": "Identifier",
                                "name": "computed"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "ret"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "ret"
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "computed"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "getPropertyValue"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "name"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "ret"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": ""
                                      }
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "elem"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "ownerDocument"
                                        }
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "ret"
                                      },
                                      "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "elem"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "style"
                                          }
                                        },
                                        "property": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "_camelCase"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "name"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "ret"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "module"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "exports"
                                }
                              },
                              "right": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "addClass"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteAddClass"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "css"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteCss"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "hasClass"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteHasClass"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "off"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteOff"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "offset"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteOffset"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "on"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteOn"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "one"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteOne"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "ready"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteReady"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "removeClass"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteRemoveClass"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "type"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "jqLiteType"
                                    },
                                    "kind": "init"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  ]
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": 4
                },
                "value": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "require"
                        },
                        {
                          "type": "Identifier",
                          "name": "module"
                        },
                        {
                          "type": "Identifier",
                          "name": "exports"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "Literal",
                              "value": "use strict"
                            }
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "config"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "require"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "../config.js"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "jqLite"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "require"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "./jqLite.js"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "win"
                                },
                                "init": {
                                  "type": "Identifier",
                                  "name": "window"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "doc"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "window"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "document"
                                  }
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "nodeInsertedCallbacks"
                                },
                                "init": {
                                  "type": "ArrayExpression",
                                  "elements": []
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "head"
                                },
                                "init": null
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "head"
                              },
                              "right": {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                  "type": "LogicalExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "doc"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "head"
                                    }
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "doc"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "getElementsByTagName"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "head"
                                        }
                                      ]
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 0
                                    }
                                  }
                                },
                                "right": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "doc"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "documentElement"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "logFn"
                            },
                            "params": [],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "config"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "debug"
                                      }
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "!==",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "typeof",
                                        "argument": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "win"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "console"
                                          }
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": "undefined"
                                      }
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "TryStatement",
                                        "block": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "win"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "console"
                                                      }
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "log"
                                                    }
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "apply"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "win"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "console"
                                                    }
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "arguments"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "guardedHandlers": [],
                                        "handlers": [
                                          {
                                            "type": "CatchClause",
                                            "param": {
                                              "type": "Identifier",
                                              "name": "a"
                                            },
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "Identifier",
                                                        "name": "e"
                                                      },
                                                      "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "Array"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "prototype"
                                                              }
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "slice"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "call"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "arguments"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "win"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "console"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "log"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "e"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "join"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": "\n"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "finalizer": null
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "loadStyleFn"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "cssText"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "doc"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "createStyleSheet"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "doc"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "createStyleSheet"
                                                }
                                              },
                                              "arguments": []
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "cssText"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "cssText"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "e"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "doc"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "createElement"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "style"
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "e"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "type"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": "text/css"
                                          }
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "e"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "styleSheet"
                                          }
                                        },
                                        "consequent": {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "e"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "styleSheet"
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "cssText"
                                              }
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "cssText"
                                            }
                                          }
                                        },
                                        "alternate": {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "e"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "appendChild"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "doc"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "createTextNode"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "cssText"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "head"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "insertBefore"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "e"
                                            },
                                            {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "head"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "firstChild"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "raiseErrorFn"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "msg"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ThrowStatement",
                                  "argument": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                      "type": "Literal",
                                      "value": "MUI Error: "
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "msg"
                                    }
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "onNodeInsertedFn"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "callbackFn"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "nodeInsertedCallbacks"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "push"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "callbackFn"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "nodeInsertedCallbacks"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_initialized"
                                      }
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "jqLite"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "on"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "doc"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "animationstart"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "animationHandlerFn"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "jqLite"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "on"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "doc"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "mozAnimationStart"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "animationHandlerFn"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "jqLite"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "on"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "doc"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": "webkitAnimationStart"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "animationHandlerFn"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "nodeInsertedCallbacks"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_initialized"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": true
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "animationHandlerFn"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "ev"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "ev"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "animationName"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "mui-node-inserted"
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": null
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "el"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "ev"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "target"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ForStatement",
                                  "init": {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "i"
                                        },
                                        "init": {
                                          "type": "BinaryExpression",
                                          "operator": "-",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "nodeInsertedCallbacks"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": 1
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "var"
                                  },
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": ">=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 0
                                    }
                                  },
                                  "update": {
                                    "type": "UpdateExpression",
                                    "operator": "--",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "prefix": false
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "nodeInsertedCallbacks"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "i"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "el"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "module"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "exports"
                                }
                              },
                              "right": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "log"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "logFn"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "loadStyle"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "loadStyleFn"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "onNodeInserted"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "onNodeInsertedFn"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "raiseError"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "raiseErrorFn"
                                    },
                                    "kind": "init"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "../config.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 1
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "./jqLite.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 3
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  ]
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": 5
                },
                "value": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "require"
                        },
                        {
                          "type": "Identifier",
                          "name": "module"
                        },
                        {
                          "type": "Identifier",
                          "name": "exports"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "Literal",
                              "value": "use strict"
                            }
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "jqLite"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "require"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "./lib/jqLite.js"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "util"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "require"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "./lib/util.js"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "btnClass"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-btn"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "btnFlatClass"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-btn-flat"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "btnFloatingClass"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-btn-floating"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "rippleClass"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-ripple-effect"
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "animationName"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": "mui-btn-inserted"
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "initialize"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "buttonEl"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "buttonEl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "_muiRipple"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": null
                                  },
                                  "alternate": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "buttonEl"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_muiRipple"
                                        }
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": true
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "buttonEl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "tagName"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "INPUT"
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": null
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "jqLite"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "on"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "buttonEl"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": "mousedown"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "mousedownHandler"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "FunctionDeclaration",
                            "id": {
                              "type": "Identifier",
                              "name": "mousedownHandler"
                            },
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "ev"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "ev"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "button"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 0
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": null
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "buttonEl"
                                      },
                                      "init": {
                                        "type": "ThisExpression"
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "buttonEl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "disabled"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": true
                                    }
                                  },
                                  "consequent": {
                                    "type": "ReturnStatement",
                                    "argument": null
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "rippleEl"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "document"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "createElement"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "div"
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "rippleEl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "className"
                                      }
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "rippleClass"
                                    }
                                  }
                                },
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "offset"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "jqLite"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "offset"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "buttonEl"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "xPos"
                                      },
                                      "init": {
                                        "type": "BinaryExpression",
                                        "operator": "-",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "ev"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "pageX"
                                          }
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "offset"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "left"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "yPos"
                                      },
                                      "init": {
                                        "type": "BinaryExpression",
                                        "operator": "-",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "ev"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "pageY"
                                          }
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "offset"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "top"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "diameter"
                                      },
                                      "init": null
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "radius"
                                      },
                                      "init": null
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "jqLite"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "hasClass"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "buttonEl"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "btnFloatingClass"
                                      }
                                    ]
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "diameter"
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "/",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "offset"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "height"
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": 2
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "diameter"
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "offset"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "height"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "radius"
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "/",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "diameter"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": 2
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "jqLite"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "css"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "rippleEl"
                                      },
                                      {
                                        "type": "ObjectExpression",
                                        "properties": [
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "height"
                                            },
                                            "value": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "diameter"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "px"
                                              }
                                            },
                                            "kind": "init"
                                          },
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "width"
                                            },
                                            "value": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "diameter"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "px"
                                              }
                                            },
                                            "kind": "init"
                                          },
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "top"
                                            },
                                            "value": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "-",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "yPos"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "radius"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "px"
                                              }
                                            },
                                            "kind": "init"
                                          },
                                          {
                                            "type": "Property",
                                            "key": {
                                              "type": "Identifier",
                                              "name": "left"
                                            },
                                            "value": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "-",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "xPos"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "radius"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "px"
                                              }
                                            },
                                            "kind": "init"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "buttonEl"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "appendChild"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "rippleEl"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "window"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "setTimeout"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "buttonEl"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "removeChild"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "rippleEl"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      },
                                      {
                                        "type": "Literal",
                                        "value": 2000
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "module"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "exports"
                                }
                              },
                              "right": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "initListeners"
                                    },
                                    "value": {
                                      "type": "FunctionExpression",
                                      "id": null,
                                      "params": [],
                                      "defaults": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "doc"
                                                },
                                                "init": {
                                                  "type": "Identifier",
                                                  "name": "document"
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "elList"
                                                },
                                                "init": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "doc"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "getElementsByClassName"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "btnClass"
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ForStatement",
                                            "init": {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  },
                                                  "init": {
                                                    "type": "BinaryExpression",
                                                    "operator": "-",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "elList"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "length"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": 1
                                                    }
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": ">=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "i"
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": 0
                                              }
                                            },
                                            "update": {
                                              "type": "UpdateExpression",
                                              "operator": "--",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "i"
                                              },
                                              "prefix": false
                                            },
                                            "body": {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "initialize"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "elList"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "i"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "util"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "onNodeInserted"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "FunctionExpression",
                                                  "id": null,
                                                  "params": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "el"
                                                    }
                                                  ],
                                                  "defaults": [],
                                                  "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "jqLite"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "hasClass"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "el"
                                                            },
                                                            {
                                                              "type": "Identifier",
                                                              "name": "btnClass"
                                                            }
                                                          ]
                                                        },
                                                        "consequent": {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "Identifier",
                                                              "name": "initialize"
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "el"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "alternate": null
                                                      }
                                                    ]
                                                  },
                                                  "rest": null,
                                                  "generator": false,
                                                  "expression": false
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "rest": null,
                                      "generator": false,
                                      "expression": false
                                    },
                                    "kind": "init"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "./lib/jqLite.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 3
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "./lib/util.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 4
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  ]
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": 6
                },
                "value": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "require"
                        },
                        {
                          "type": "Identifier",
                          "name": "module"
                        },
                        {
                          "type": "Identifier",
                          "name": "exports"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "win"
                                  }
                                ],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "win"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "_muiLoadedReact"
                                        }
                                      },
                                      "consequent": {
                                        "type": "ReturnStatement",
                                        "argument": null
                                      },
                                      "alternate": {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "win"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_muiLoadedReact"
                                            }
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": true
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "jqLite"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "require"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "../js/lib/jqLite.js"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "forms"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "require"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "./forms.jsx"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "ripple"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "require"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "../js/ripple.js"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "doc"
                                          },
                                          "init": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "win"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "document"
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "win"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "MUIFormControl"
                                          }
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "forms"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "FormControl"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "win"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "MUIFormGroup"
                                          }
                                        },
                                        "right": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "forms"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "FormGroup"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "jqLite"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "ready"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "defaults": [],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "ripple"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "initListeners"
                                                      }
                                                    },
                                                    "arguments": []
                                                  }
                                                }
                                              ]
                                            },
                                            "rest": null,
                                            "generator": false,
                                            "expression": false
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "window"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "../js/lib/jqLite.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 3
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "../js/ripple.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 5
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "./forms.jsx"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 7
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  ]
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": 7
                },
                "value": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "require"
                        },
                        {
                          "type": "Identifier",
                          "name": "module"
                        },
                        {
                          "type": "Identifier",
                          "name": "exports"
                        }
                      ],
                      "defaults": [],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "Literal",
                              "value": "use strict"
                            }
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "jqLite"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "require"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "../js/lib/jqLite.js"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "forms"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "require"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "../js/forms.js"
                                    }
                                  ]
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "FormControl"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "createClass"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "displayName"
                                          },
                                          "value": {
                                            "type": "Literal",
                                            "value": "FormControl"
                                          },
                                          "kind": "init"
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "render"
                                          },
                                          "value": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "defaults": [],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ReturnStatement",
                                                  "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "React"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "createElement"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "input"
                                                      },
                                                      {
                                                        "type": "ObjectExpression",
                                                        "properties": [
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "type"
                                                            },
                                                            "value": {
                                                              "type": "LogicalExpression",
                                                              "operator": "||",
                                                              "left": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "ThisExpression"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "props"
                                                                  }
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "type"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "text"
                                                              }
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "className"
                                                            },
                                                            "value": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "forms"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "formControlClass"
                                                              }
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "value"
                                                            },
                                                            "value": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "props"
                                                                }
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "value"
                                                              }
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "autoFocus"
                                                            },
                                                            "value": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "props"
                                                                }
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "autofocus"
                                                              }
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "onInput"
                                                            },
                                                            "value": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "props"
                                                                }
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "onInput"
                                                              }
                                                            },
                                                            "kind": "init"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "rest": null,
                                            "generator": false,
                                            "expression": false
                                          },
                                          "kind": "init"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "FormGroup"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "React"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "createClass"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "displayName"
                                          },
                                          "value": {
                                            "type": "Literal",
                                            "value": "FormGroup"
                                          },
                                          "kind": "init"
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "componentDidMount"
                                          },
                                          "value": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "defaults": [],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "forms"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "initialize"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "ThisExpression"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "refs"
                                                              }
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "label"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "getDOMNode"
                                                          }
                                                        },
                                                        "arguments": []
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "rest": null,
                                            "generator": false,
                                            "expression": false
                                          },
                                          "kind": "init"
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "render"
                                          },
                                          "value": {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "defaults": [],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "Identifier",
                                                        "name": "labelText"
                                                      },
                                                      "init": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "ThisExpression"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "props"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "label"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "Identifier",
                                                        "name": "labelEl"
                                                      },
                                                      "init": null
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "Identifier",
                                                    "name": "labelText"
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                          {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                              "type": "Identifier",
                                                              "name": "labelClass"
                                                            },
                                                            "init": {
                                                              "type": "Literal",
                                                              "value": ""
                                                            }
                                                          }
                                                        ],
                                                        "kind": "var"
                                                      },
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "props"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "isLabelFloating"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "+=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "labelClass"
                                                                },
                                                                "right": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "+",
                                                                  "left": {
                                                                    "type": "Literal",
                                                                    "value": " "
                                                                  },
                                                                  "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "forms"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "floatingLabelBaseClass"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      },
                                                      {
                                                        "type": "IfStatement",
                                                        "test": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "ThisExpression"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "props"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "value"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "BlockStatement",
                                                          "body": [
                                                            {
                                                              "type": "ExpressionStatement",
                                                              "expression": {
                                                                "type": "AssignmentExpression",
                                                                "operator": "+=",
                                                                "left": {
                                                                  "type": "Identifier",
                                                                  "name": "labelClass"
                                                                },
                                                                "right": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "+",
                                                                  "left": {
                                                                    "type": "Literal",
                                                                    "value": " "
                                                                  },
                                                                  "right": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "Identifier",
                                                                      "name": "forms"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "floatingLabelActiveClass"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "alternate": null
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "AssignmentExpression",
                                                          "operator": "=",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "labelEl"
                                                          },
                                                          "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "React"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "createElement"
                                                              }
                                                            },
                                                            "arguments": [
                                                              {
                                                                "type": "Literal",
                                                                "value": "label"
                                                              },
                                                              {
                                                                "type": "ObjectExpression",
                                                                "properties": [
                                                                  {
                                                                    "type": "Property",
                                                                    "key": {
                                                                      "type": "Identifier",
                                                                      "name": "className"
                                                                    },
                                                                    "value": {
                                                                      "type": "Identifier",
                                                                      "name": "labelClass"
                                                                    },
                                                                    "kind": "init"
                                                                  },
                                                                  {
                                                                    "type": "Property",
                                                                    "key": {
                                                                      "type": "Identifier",
                                                                      "name": "ref"
                                                                    },
                                                                    "value": {
                                                                      "type": "Literal",
                                                                      "value": "label"
                                                                    },
                                                                    "kind": "init"
                                                                  }
                                                                ]
                                                              },
                                                              {
                                                                "type": "Identifier",
                                                                "name": "labelText"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "alternate": null
                                                },
                                                {
                                                  "type": "ReturnStatement",
                                                  "argument": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "React"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "createElement"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "div"
                                                      },
                                                      {
                                                        "type": "ObjectExpression",
                                                        "properties": [
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "className"
                                                            },
                                                            "value": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "forms"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "formGroupClass"
                                                              }
                                                            },
                                                            "kind": "init"
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "React"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "createElement"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Identifier",
                                                            "name": "FormControl"
                                                          },
                                                          {
                                                            "type": "ObjectExpression",
                                                            "properties": [
                                                              {
                                                                "type": "Property",
                                                                "key": {
                                                                  "type": "Identifier",
                                                                  "name": "type"
                                                                },
                                                                "value": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "props"
                                                                    }
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "type"
                                                                  }
                                                                },
                                                                "kind": "init"
                                                              },
                                                              {
                                                                "type": "Property",
                                                                "key": {
                                                                  "type": "Identifier",
                                                                  "name": "value"
                                                                },
                                                                "value": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "props"
                                                                    }
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "value"
                                                                  }
                                                                },
                                                                "kind": "init"
                                                              },
                                                              {
                                                                "type": "Property",
                                                                "key": {
                                                                  "type": "Identifier",
                                                                  "name": "autoFocus"
                                                                },
                                                                "value": {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "ThisExpression"
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "props"
                                                                    }
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "autofocus"
                                                                  }
                                                                },
                                                                "kind": "init"
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "type": "Identifier",
                                                        "name": "labelEl"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "rest": null,
                                            "generator": false,
                                            "expression": false
                                          },
                                          "kind": "init"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "module"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "exports"
                                }
                              },
                              "right": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "FormControl"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "FormControl"
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "FormGroup"
                                    },
                                    "value": {
                                      "type": "Identifier",
                                      "name": "FormGroup"
                                    },
                                    "kind": "init"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "rest": null,
                      "generator": false,
                      "expression": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "../js/forms.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 2
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "../js/lib/jqLite.js"
                          },
                          "value": {
                            "type": "Literal",
                            "value": 3
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  ]
                },
                "kind": "init"
              }
            ]
          },
          {
            "type": "ObjectExpression",
            "properties": []
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": 6
              }
            ]
          }
        ]
      }
    }
  ]
}