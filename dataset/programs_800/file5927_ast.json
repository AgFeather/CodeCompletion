{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "FunctionExpression",
          "id": null,
          "params": [
            {
              "type": "Identifier",
              "name": "$"
            }
          ],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "MissingE"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "undefined"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "window"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "top"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "window"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "MissingE"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "utilities"
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "ajaxEvents"
                    }
                  },
                  "right": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "checkAjaxReady"
                        },
                        "value": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "data"
                            },
                            {
                              "type": "Identifier",
                              "name": "tries"
                            }
                          ],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "LogicalExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "data"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "list"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 0
                                    }
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": ">",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "$"
                                        },
                                        "arguments": [
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "Literal",
                                              "value": "#"
                                            },
                                            "right": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "data"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "list"
                                                }
                                              },
                                              "property": {
                                                "type": "Literal",
                                                "value": 0
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 0
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "message"
                                          },
                                          "init": null
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "extension"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "isFirefox"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "message"
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "data"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "type"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": ":"
                                                  }
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "data"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "list"
                                                      }
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "join"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": ","
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "message"
                                              },
                                              "right": {
                                                "type": "ObjectExpression",
                                                "properties": [
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Literal",
                                                      "value": "type"
                                                    },
                                                    "value": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "data"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      }
                                                    },
                                                    "kind": "init"
                                                  },
                                                  {
                                                    "type": "Property",
                                                    "key": {
                                                      "type": "Literal",
                                                      "value": "list"
                                                    },
                                                    "value": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "data"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "list"
                                                      }
                                                    },
                                                    "kind": "init"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "evt"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "document"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "createEvent"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "MessageEvent"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "evt"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "initMessageEvent"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "MissingEajax"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": true
                                          },
                                          {
                                            "type": "Literal",
                                            "value": true
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "message"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "http://www.tumblr.com"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 0
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "window"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "document"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "dispatchEvent"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "evt"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "tries"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 10
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "setTimeout"
                                          },
                                          "arguments": [
                                            {
                                              "type": "FunctionExpression",
                                              "id": null,
                                              "params": [],
                                              "defaults": [],
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "MissingE"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "utilities"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "ajaxEvents"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "checkAjaxReady"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "data"
                                                        },
                                                        {
                                                          "type": "BinaryExpression",
                                                          "operator": "+",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "tries"
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": 1
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "rest": null,
                                              "generator": false,
                                              "expression": false
                                            },
                                            {
                                              "type": "Literal",
                                              "value": 500
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "run"
                        },
                        "value": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "location"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "host"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "www.tumblr.com"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "$"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "head"
                                              }
                                            ]
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "append"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "operator": "+",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "+",
                                                      "left": {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                          "type": "BinaryExpression",
                                                          "operator": "+",
                                                          "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "BinaryExpression",
                                                              "operator": "+",
                                                              "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "+",
                                                                  "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                      "type": "BinaryExpression",
                                                                      "operator": "+",
                                                                      "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                          "type": "BinaryExpression",
                                                                          "operator": "+",
                                                                          "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                              "type": "BinaryExpression",
                                                                              "operator": "+",
                                                                              "left": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                  "type": "BinaryExpression",
                                                                                  "operator": "+",
                                                                                  "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                      "type": "BinaryExpression",
                                                                                      "operator": "+",
                                                                                      "left": {
                                                                                        "type": "BinaryExpression",
                                                                                        "operator": "+",
                                                                                        "left": {
                                                                                          "type": "BinaryExpression",
                                                                                          "operator": "+",
                                                                                          "left": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "+",
                                                                                            "left": {
                                                                                              "type": "BinaryExpression",
                                                                                              "operator": "+",
                                                                                              "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "+",
                                                                                                "left": {
                                                                                                  "type": "BinaryExpression",
                                                                                                  "operator": "+",
                                                                                                  "left": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "+",
                                                                                                    "left": {
                                                                                                      "type": "BinaryExpression",
                                                                                                      "operator": "+",
                                                                                                      "left": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "+",
                                                                                                        "left": {
                                                                                                          "type": "BinaryExpression",
                                                                                                          "operator": "+",
                                                                                                          "left": {
                                                                                                            "type": "BinaryExpression",
                                                                                                            "operator": "+",
                                                                                                            "left": {
                                                                                                              "type": "BinaryExpression",
                                                                                                              "operator": "+",
                                                                                                              "left": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                  "type": "BinaryExpression",
                                                                                                                  "operator": "+",
                                                                                                                  "left": {
                                                                                                                    "type": "BinaryExpression",
                                                                                                                    "operator": "+",
                                                                                                                    "left": {
                                                                                                                      "type": "BinaryExpression",
                                                                                                                      "operator": "+",
                                                                                                                      "left": {
                                                                                                                        "type": "BinaryExpression",
                                                                                                                        "operator": "+",
                                                                                                                        "left": {
                                                                                                                          "type": "BinaryExpression",
                                                                                                                          "operator": "+",
                                                                                                                          "left": {
                                                                                                                            "type": "BinaryExpression",
                                                                                                                            "operator": "+",
                                                                                                                            "left": {
                                                                                                                              "type": "BinaryExpression",
                                                                                                                              "operator": "+",
                                                                                                                              "left": {
                                                                                                                                "type": "BinaryExpression",
                                                                                                                                "operator": "+",
                                                                                                                                "left": {
                                                                                                                                  "type": "BinaryExpression",
                                                                                                                                  "operator": "+",
                                                                                                                                  "left": {
                                                                                                                                    "type": "BinaryExpression",
                                                                                                                                    "operator": "+",
                                                                                                                                    "left": {
                                                                                                                                      "type": "BinaryExpression",
                                                                                                                                      "operator": "+",
                                                                                                                                      "left": {
                                                                                                                                        "type": "BinaryExpression",
                                                                                                                                        "operator": "+",
                                                                                                                                        "left": {
                                                                                                                                          "type": "BinaryExpression",
                                                                                                                                          "operator": "+",
                                                                                                                                          "left": {
                                                                                                                                            "type": "BinaryExpression",
                                                                                                                                            "operator": "+",
                                                                                                                                            "left": {
                                                                                                                                              "type": "Literal",
                                                                                                                                              "value": "<script type=\"text/javascript\">"
                                                                                                                                            },
                                                                                                                                            "right": {
                                                                                                                                              "type": "Literal",
                                                                                                                                              "value": "Ajax.Responders.register({"
                                                                                                                                            }
                                                                                                                                          },
                                                                                                                                          "right": {
                                                                                                                                            "type": "Literal",
                                                                                                                                            "value": "onException: function(request, ex) {"
                                                                                                                                          }
                                                                                                                                        },
                                                                                                                                        "right": {
                                                                                                                                          "type": "Literal",
                                                                                                                                          "value": "this.onComplete(request);"
                                                                                                                                        }
                                                                                                                                      },
                                                                                                                                      "right": {
                                                                                                                                        "type": "Literal",
                                                                                                                                        "value": "},"
                                                                                                                                      }
                                                                                                                                    },
                                                                                                                                    "right": {
                                                                                                                                      "type": "Literal",
                                                                                                                                      "value": "onComplete: function(request) {"
                                                                                                                                    }
                                                                                                                                  },
                                                                                                                                  "right": {
                                                                                                                                    "type": "Literal",
                                                                                                                                    "value": "if (request.transport.status === 200) {"
                                                                                                                                  }
                                                                                                                                },
                                                                                                                                "right": {
                                                                                                                                  "type": "Literal",
                                                                                                                                  "value": "var type, newPosts;"
                                                                                                                                }
                                                                                                                              },
                                                                                                                              "right": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "if (/^(http:\\/\\/www\\.tumblr\\.com)?\\/((dashboard\\/((\\d+\\/\\d+)|(search\\/[^\\/]+\\/\\d+)))|(blog\\/[^\\/]+\\/((\\d+)|(search\\/[^\\/]*\\/\\d+))))/.test(request.url)) {"
                                                                                                                              }
                                                                                                                            },
                                                                                                                            "right": {
                                                                                                                              "type": "Literal",
                                                                                                                              "value": "type = \"posts\";"
                                                                                                                            }
                                                                                                                          },
                                                                                                                          "right": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": "}"
                                                                                                                          }
                                                                                                                        },
                                                                                                                        "right": {
                                                                                                                          "type": "Literal",
                                                                                                                          "value": "else if (/^(http:\\/\\/www\\.tumblr\\.com)?\\/((inbox\\/after\\/\\d+)|((blog\\/[^\\/]+\\/)?messages\\/page\\/\\d+))/.test(request.url)) {"
                                                                                                                        }
                                                                                                                      },
                                                                                                                      "right": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "type = \"messages\";"
                                                                                                                      }
                                                                                                                    },
                                                                                                                    "right": {
                                                                                                                      "type": "Literal",
                                                                                                                      "value": "}"
                                                                                                                    }
                                                                                                                  },
                                                                                                                  "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "else if (/^(http:\\/\\/www\\.tumblr\\.com)?\\/(blog\\/[^\\/]+\\/)?drafts\\/after\\/\\d+/.test(request.url)) {"
                                                                                                                  }
                                                                                                                },
                                                                                                                "right": {
                                                                                                                  "type": "Literal",
                                                                                                                  "value": "type = \"drafts\";"
                                                                                                                }
                                                                                                              },
                                                                                                              "right": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "}"
                                                                                                              }
                                                                                                            },
                                                                                                            "right": {
                                                                                                              "type": "Literal",
                                                                                                              "value": "else if (/^(http:\\/\\/www\\.tumblr\\.com)?\\/(blog\\/[^\\/]+\\/)?queue\\?page=\\d+/.test(request.url)) {"
                                                                                                            }
                                                                                                          },
                                                                                                          "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "type = \"queue\";"
                                                                                                          }
                                                                                                        },
                                                                                                        "right": {
                                                                                                          "type": "Literal",
                                                                                                          "value": "}"
                                                                                                        }
                                                                                                      },
                                                                                                      "right": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "else if (/^(http:\\/\\/www\\.tumblr\\.com)?\\/tagged\\/[^\\?]+\\?before=\\d*/.test(request.url)) {"
                                                                                                      }
                                                                                                    },
                                                                                                    "right": {
                                                                                                      "type": "Literal",
                                                                                                      "value": "type = \"tagged\";"
                                                                                                    }
                                                                                                  },
                                                                                                  "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": "}"
                                                                                                  }
                                                                                                },
                                                                                                "right": {
                                                                                                  "type": "Literal",
                                                                                                  "value": "else if (/^(http:\\/\\/www\\.tumblr\\.com)?\\/mega-editor\\/[^\\/]+\\?before_time=\\d*/.test(request.url)) {"
                                                                                                }
                                                                                              },
                                                                                              "right": {
                                                                                                "type": "Literal",
                                                                                                "value": "type = \"mass-editor\";"
                                                                                              }
                                                                                            },
                                                                                            "right": {
                                                                                              "type": "Literal",
                                                                                              "value": "}"
                                                                                            }
                                                                                          },
                                                                                          "right": {
                                                                                            "type": "Literal",
                                                                                            "value": "else if (/^(http:\\/\\/www\\.tumblr\\.com)?\\/dashboard\\/notes\\/\\d+\\//.test(request.url)) {"
                                                                                          }
                                                                                        },
                                                                                        "right": {
                                                                                          "type": "Literal",
                                                                                          "value": "type = \"notes\";"
                                                                                        }
                                                                                      },
                                                                                      "right": {
                                                                                        "type": "Literal",
                                                                                        "value": "newPosts = [\"post_\" + request.url.match(/notes\\/(\\d+)/)[1]];"
                                                                                      }
                                                                                    },
                                                                                    "right": {
                                                                                      "type": "Literal",
                                                                                      "value": "}"
                                                                                    }
                                                                                  },
                                                                                  "right": {
                                                                                    "type": "Literal",
                                                                                    "value": "if (type === \"mass-editor\") {"
                                                                                  }
                                                                                },
                                                                                "right": {
                                                                                  "type": "Literal",
                                                                                  "value": "newPosts = request.transport.responseText.match(/<a id=\"(post_\\d+)/g);"
                                                                                }
                                                                              },
                                                                              "right": {
                                                                                "type": "Literal",
                                                                                "value": "for (i=0; i<newPosts.length; i++) {"
                                                                              }
                                                                            },
                                                                            "right": {
                                                                              "type": "Literal",
                                                                              "value": "newPosts[i] = newPosts[i].replace(/<a id=\"/,\"\");"
                                                                            }
                                                                          },
                                                                          "right": {
                                                                            "type": "Literal",
                                                                            "value": "}"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "Literal",
                                                                          "value": "}"
                                                                        }
                                                                      },
                                                                      "right": {
                                                                        "type": "Literal",
                                                                        "value": "else if (type !== \"notes\") {"
                                                                      }
                                                                    },
                                                                    "right": {
                                                                      "type": "Literal",
                                                                      "value": "newPosts = request.transport.responseText.match(/<li id=\"(post_\\d+)/g);"
                                                                    }
                                                                  },
                                                                  "right": {
                                                                    "type": "Literal",
                                                                    "value": "for (i=0; i<newPosts.length; i++) {"
                                                                  }
                                                                },
                                                                "right": {
                                                                  "type": "Literal",
                                                                  "value": "newPosts[i] = newPosts[i].replace(/<li id=\"/,\"\");"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "}"
                                                              }
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": "}"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": "var evt = document.createEvent(\"MessageEvent\");"
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "var message;"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "ConditionalExpression",
                                                        "test": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "extension"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "isFirefox"
                                                          }
                                                        },
                                                        "consequent": {
                                                          "type": "Literal",
                                                          "value": "message = type + \":\" + newPosts.join(\",\");"
                                                        },
                                                        "alternate": {
                                                          "type": "Literal",
                                                          "value": "message = {\"type\": type, \"list\": newPosts};"
                                                        }
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "evt.initMessageEvent(\"MissingEajaxInsert\", true, true, message, \"http://www.tumblr.com\", 0, window);"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "document.dispatchEvent(evt);"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "}"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "}"
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "});</script>"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "init"
                        },
                        "value": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "extension"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "isFirefox"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "document"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "addEventListener"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "MissingEajaxInsert"
                                          },
                                          {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                              {
                                                "type": "Identifier",
                                                "name": "e"
                                              }
                                            ],
                                            "defaults": [],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "Identifier",
                                                        "name": "type"
                                                      },
                                                      "init": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "e"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "data"
                                                              }
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "match"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": {}
                                                            }
                                                          ]
                                                        },
                                                        "property": {
                                                          "type": "Literal",
                                                          "value": 0
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "VariableDeclaration",
                                                  "declarations": [
                                                    {
                                                      "type": "VariableDeclarator",
                                                      "id": {
                                                        "type": "Identifier",
                                                        "name": "list"
                                                      },
                                                      "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "e"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "data"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "match"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": {}
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  "kind": "var"
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "MissingE"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "utilities"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "ajaxEvents"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "checkAjaxReady"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "ObjectExpression",
                                                        "properties": [
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Literal",
                                                              "value": "type"
                                                            },
                                                            "value": {
                                                              "type": "Identifier",
                                                              "name": "type"
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Literal",
                                                              "value": "list"
                                                            },
                                                            "value": {
                                                              "type": "Identifier",
                                                              "name": "list"
                                                            },
                                                            "kind": "init"
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "type": "Literal",
                                                        "value": 0
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "rest": null,
                                            "generator": false,
                                            "expression": false
                                          },
                                          {
                                            "type": "Literal",
                                            "value": false
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "$"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "document"
                                              }
                                            ]
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "bind"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "MissingEajaxInsert"
                                          },
                                          {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                              {
                                                "type": "Identifier",
                                                "name": "e"
                                              }
                                            ],
                                            "defaults": [],
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "MissingE"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "utilities"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "ajaxEvents"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "checkAjaxReady"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "e"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "originalEvent"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "data"
                                                        }
                                                      },
                                                      {
                                                        "type": "Literal",
                                                        "value": 0
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "rest": null,
                                            "generator": false,
                                            "expression": false
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "MissingE"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "utilities"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "ajaxEvents"
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "run"
                                    }
                                  },
                                  "arguments": []
                                }
                              }
                            ]
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        },
                        "kind": "init"
                      }
                    ]
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "MissingE"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "utilities"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "ajaxEvents"
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "init"
                    }
                  },
                  "arguments": []
                }
              }
            ]
          },
          "rest": null,
          "generator": false,
          "expression": false
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "jQuery"
          }
        ]
      }
    }
  ]
}