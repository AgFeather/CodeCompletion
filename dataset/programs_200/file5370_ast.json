{
  "type": "Program",
  "body": [
    {
      "type": "IfStatement",
      "test": {
        "type": "BinaryExpression",
        "operator": "==",
        "left": {
          "type": "UnaryExpression",
          "operator": "typeof",
          "argument": {
            "type": "Identifier",
            "name": "_yuitest_coverage"
          },
          "prefix": true
        },
        "right": {
          "type": "Literal",
          "value": "undefined"
        }
      },
      "consequent": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "Identifier",
                "name": "_yuitest_coverage"
              },
              "right": {
                "type": "ObjectExpression",
                "properties": []
              }
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "Identifier",
                "name": "_yuitest_coverline"
              },
              "right": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "src"
                  },
                  {
                    "type": "Identifier",
                    "name": "line"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "coverage"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "_yuitest_coverage"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "src"
                            }
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "coverage"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "lines"
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "line"
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "UpdateExpression",
                              "operator": "++",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "coverage"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "calledLines"
                                }
                              },
                              "prefix": false
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "coverage"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "lines"
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "line"
                          }
                        },
                        "prefix": false
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              }
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "Identifier",
                "name": "_yuitest_coverfunc"
              },
              "right": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "src"
                  },
                  {
                    "type": "Identifier",
                    "name": "name"
                  },
                  {
                    "type": "Identifier",
                    "name": "line"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "coverage"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "_yuitest_coverage"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "src"
                            }
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "funcId"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "+",
                              "left": {
                                "type": "Identifier",
                                "name": "name"
                              },
                              "right": {
                                "type": "Literal",
                                "value": ":"
                              }
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "line"
                            }
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "coverage"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "functions"
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "funcId"
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "UpdateExpression",
                              "operator": "++",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "coverage"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "calledFunctions"
                                }
                              },
                              "prefix": false
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "coverage"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "functions"
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "funcId"
                          }
                        },
                        "prefix": false
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              }
            }
          }
        ]
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": true,
          "object": {
            "type": "Identifier",
            "name": "_yuitest_coverage"
          },
          "property": {
            "type": "Literal",
            "value": "build/datatable-base/datatable-base.js"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "lines"
              },
              "value": {
                "type": "ObjectExpression",
                "properties": []
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "functions"
              },
              "value": {
                "type": "ObjectExpression",
                "properties": []
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "coveredLines"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "calledLines"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "coveredFunctions"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "calledFunctions"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "path"
              },
              "value": {
                "type": "Literal",
                "value": "build/datatable-base/datatable-base.js"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "code"
              },
              "value": {
                "type": "ArrayExpression",
                "elements": []
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "MemberExpression",
            "computed": true,
            "object": {
              "type": "Identifier",
              "name": "_yuitest_coverage"
            },
            "property": {
              "type": "Literal",
              "value": "build/datatable-base/datatable-base.js"
            }
          },
          "property": {
            "type": "Identifier",
            "name": "code"
          }
        },
        "right": {
          "type": "ArrayExpression",
          "elements": [
            {
              "type": "Literal",
              "value": "YUI.add('datatable-base', function (Y, NAME) {"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "/**"
            },
            {
              "type": "Literal",
              "value": "A Widget for displaying tabular data.  The base implementation of DataTable"
            },
            {
              "type": "Literal",
              "value": "provides the ability to dynamically generate an HTML table from a set of column"
            },
            {
              "type": "Literal",
              "value": "configurations and row data."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "Two classes are included in the `datatable-base` module: `Y.DataTable` and"
            },
            {
              "type": "Literal",
              "value": "`Y.DataTable.Base`."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "@module datatable"
            },
            {
              "type": "Literal",
              "value": "@submodule datatable-base"
            },
            {
              "type": "Literal",
              "value": "@main datatable"
            },
            {
              "type": "Literal",
              "value": "@since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "**/"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "// DataTable API docs included before DataTable.Base to make yuidoc work"
            },
            {
              "type": "Literal",
              "value": "/**"
            },
            {
              "type": "Literal",
              "value": "A Widget for displaying tabular data.  Before feature modules are `use()`d,"
            },
            {
              "type": "Literal",
              "value": "this class is functionally equivalent to DataTable.Base.  However, feature"
            },
            {
              "type": "Literal",
              "value": "modules can modify this class in non-destructive ways, expanding the API and"
            },
            {
              "type": "Literal",
              "value": "functionality."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "This is the primary DataTable class.  Out of the box, it provides the ability"
            },
            {
              "type": "Literal",
              "value": "to dynamically generate an HTML table from a set of column configurations and"
            },
            {
              "type": "Literal",
              "value": "row data.  But feature module inclusion can add table sorting, pagintaion,"
            },
            {
              "type": "Literal",
              "value": "highlighting, selection, and more."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "<pre><code>"
            },
            {
              "type": "Literal",
              "value": "// The functionality of this table would require additional modules be use()d,"
            },
            {
              "type": "Literal",
              "value": "// but the feature APIs are aggregated onto Y.DataTable."
            },
            {
              "type": "Literal",
              "value": "// (Snippet is for illustration. Not all features are available today.)"
            },
            {
              "type": "Literal",
              "value": "var table = new Y.DataTable({"
            },
            {
              "type": "Literal",
              "value": "    columns: ["
            },
            {
              "type": "Literal",
              "value": "        { type: 'checkbox', defaultChecked: true },"
            },
            {
              "type": "Literal",
              "value": "        { key: 'firstName', sortable: true, resizable: true },"
            },
            {
              "type": "Literal",
              "value": "        { key: 'lastName', sortable: true },"
            },
            {
              "type": "Literal",
              "value": "        { key: 'role', formatter: toRoleName }"
            },
            {
              "type": "Literal",
              "value": "    ],"
            },
            {
              "type": "Literal",
              "value": "    data: {"
            },
            {
              "type": "Literal",
              "value": "        source: 'http://myserver.com/service/json',"
            },
            {
              "type": "Literal",
              "value": "        type: 'json',"
            },
            {
              "type": "Literal",
              "value": "        schema: {"
            },
            {
              "type": "Literal",
              "value": "            resultListLocator: 'results.users',"
            },
            {
              "type": "Literal",
              "value": "            fields: ["
            },
            {
              "type": "Literal",
              "value": "                'username',"
            },
            {
              "type": "Literal",
              "value": "                'firstName',"
            },
            {
              "type": "Literal",
              "value": "                'lastName',"
            },
            {
              "type": "Literal",
              "value": "                { key: 'role', type: 'number' }"
            },
            {
              "type": "Literal",
              "value": "            ]"
            },
            {
              "type": "Literal",
              "value": "        }"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": "    recordType: UserModel,"
            },
            {
              "type": "Literal",
              "value": "    pagedData: {"
            },
            {
              "type": "Literal",
              "value": "        location: 'footer',"
            },
            {
              "type": "Literal",
              "value": "        pageSizes: [20, 50, 'all'],"
            },
            {
              "type": "Literal",
              "value": "        rowsPerPage: 20,"
            },
            {
              "type": "Literal",
              "value": "        pageLinks: 5"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": "    editable: true"
            },
            {
              "type": "Literal",
              "value": "});"
            },
            {
              "type": "Literal",
              "value": "</code></pre>"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "### Column Configuration"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "The column configurations are set in the form of an array of objects, where"
            },
            {
              "type": "Literal",
              "value": "each object corresponds to a column.  For columns populated directly from the"
            },
            {
              "type": "Literal",
              "value": "row data, a 'key' property is required to bind the column to that property or"
            },
            {
              "type": "Literal",
              "value": "attribute in the row data."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "Not all columns need to relate to row data, nor do all properties or attributes"
            },
            {
              "type": "Literal",
              "value": "of the row data need to have a corresponding column.  However, only those"
            },
            {
              "type": "Literal",
              "value": "columns included in the `columns` configuration attribute will be rendered."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "Other column configuration properties are supported by the configured"
            },
            {
              "type": "Literal",
              "value": "`view`, class as well as any features added by plugins or class extensions."
            },
            {
              "type": "Literal",
              "value": "See the description of DataTable.TableView and its subviews"
            },
            {
              "type": "Literal",
              "value": "DataTable.HeaderView, DataTable.BodyView, and DataTable.FooterView (and other"
            },
            {
              "type": "Literal",
              "value": "DataTable feature classes) to see what column properties they support."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "Some examples of column configurations would be:"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "<pre><code>"
            },
            {
              "type": "Literal",
              "value": "// Basic"
            },
            {
              "type": "Literal",
              "value": "var columns = [{ key: 'firstName' }, { key: 'lastName' }, { key: 'age' }];"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "// For columns without any additional configuration, strings can be used"
            },
            {
              "type": "Literal",
              "value": "var columns = ['firstName', 'lastName', 'age'];"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "// Multi-row column headers (see DataTable.HeaderView for details)"
            },
            {
              "type": "Literal",
              "value": "var columns = ["
            },
            {
              "type": "Literal",
              "value": "    {"
            },
            {
              "type": "Literal",
              "value": "        label: 'Name',"
            },
            {
              "type": "Literal",
              "value": "        children: ["
            },
            {
              "type": "Literal",
              "value": "            { key: 'firstName' },"
            },
            {
              "type": "Literal",
              "value": "            { key: 'lastName' }"
            },
            {
              "type": "Literal",
              "value": "        ]"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": "    'age' // mixing and matching objects and strings is ok"
            },
            {
              "type": "Literal",
              "value": "];"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "// Including columns that are not related 1:1 to row data fields/attributes"
            },
            {
              "type": "Literal",
              "value": "// (See DataTable.BodyView for details)"
            },
            {
              "type": "Literal",
              "value": "var columns = ["
            },
            {
              "type": "Literal",
              "value": "    {"
            },
            {
              "type": "Literal",
              "value": "        label: 'Name', // Needed for the column header"
            },
            {
              "type": "Literal",
              "value": "        formatter: function (o) {"
            },
            {
              "type": "Literal",
              "value": "            // Fill the column cells with data from firstName and lastName"
            },
            {
              "type": "Literal",
              "value": "            if (o.data.age > 55) {"
            },
            {
              "type": "Literal",
              "value": "                o.className += ' senior';"
            },
            {
              "type": "Literal",
              "value": "            }"
            },
            {
              "type": "Literal",
              "value": "            return o.data.lastName + ', ' + o.data.firstName;"
            },
            {
              "type": "Literal",
              "value": "        }"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": "    'age'"
            },
            {
              "type": "Literal",
              "value": "];"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "// Columns that include feature configurations (for illustration; not all"
            },
            {
              "type": "Literal",
              "value": "// features are available today)."
            },
            {
              "type": "Literal",
              "value": "var columns = ["
            },
            {
              "type": "Literal",
              "value": "    { type: 'checkbox', defaultChecked: true },"
            },
            {
              "type": "Literal",
              "value": "    { key: 'firstName', sortable: true, resizable: true, min-width: '300px' },"
            },
            {
              "type": "Literal",
              "value": "    { key: 'lastName', sortable: true, resizable: true, min-width: '300px' },"
            },
            {
              "type": "Literal",
              "value": "    { key: 'age', emptyCellValue: '<em>unknown</em>' }"
            },
            {
              "type": "Literal",
              "value": "];"
            },
            {
              "type": "Literal",
              "value": "</code></pre>"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "### Row Data Configuration"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "The `data` configuration attribute is responsible for housing the data objects"
            },
            {
              "type": "Literal",
              "value": "that will be rendered as rows.  You can provide this information in two ways by default:"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "1. An array of simple objects with key:value pairs"
            },
            {
              "type": "Literal",
              "value": "2. A ModelList of Base-based class instances (presumably Model subclass"
            },
            {
              "type": "Literal",
              "value": "   instances)"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "If an array of objects is passed, it will be translated into a ModelList filled"
            },
            {
              "type": "Literal",
              "value": "with instances of the class provided to the `recordType` attribute.  This"
            },
            {
              "type": "Literal",
              "value": "attribute can also create a custom Model subclass from an array of field names"
            },
            {
              "type": "Literal",
              "value": "or an object of attribute configurations.  If no `recordType` is provided, one"
            },
            {
              "type": "Literal",
              "value": "will be created for you from available information (see `_initRecordType`)."
            },
            {
              "type": "Literal",
              "value": "Providing either your own ModelList instance for `data`, or at least Model"
            },
            {
              "type": "Literal",
              "value": "class for `recordType`, is the best way to control client-server"
            },
            {
              "type": "Literal",
              "value": "synchronization when modifying data on the client side."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "The ModelList instance that manages the table's data is available in the `data`"
            },
            {
              "type": "Literal",
              "value": "property on the DataTable instance."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "### Rendering"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "Table rendering is a collaborative process between the DataTable and its"
            },
            {
              "type": "Literal",
              "value": "configured `view`. The DataTable creates an instance of the configured `view`"
            },
            {
              "type": "Literal",
              "value": "(DataTable.TableView by default), and calls its `render()` method."
            },
            {
              "type": "Literal",
              "value": "DataTable.TableView, for instance, then creates the `<table>` and `<caption>`,"
            },
            {
              "type": "Literal",
              "value": "then delegates the rendering of the specific sections of the table to subviews,"
            },
            {
              "type": "Literal",
              "value": "which can be configured as `headerView`, `bodyView`, and `footerView`."
            },
            {
              "type": "Literal",
              "value": "DataTable.TableView defaults the `headerView` to DataTable.HeaderView and the"
            },
            {
              "type": "Literal",
              "value": "`bodyView` to DataTable.BodyView, but leaves the `footerView` unassigned."
            },
            {
              "type": "Literal",
              "value": "Setting any subview to `null` will result in that table section not being"
            },
            {
              "type": "Literal",
              "value": "rendered."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "@class DataTable"
            },
            {
              "type": "Literal",
              "value": "@extends DataTable.Base"
            },
            {
              "type": "Literal",
              "value": "@since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "**/"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "// DataTable API docs included before DataTable.Base to make yuidoc work"
            },
            {
              "type": "Literal",
              "value": "/**"
            },
            {
              "type": "Literal",
              "value": "The baseline implementation of a DataTable.  This class should be used"
            },
            {
              "type": "Literal",
              "value": "primarily as a superclass for a custom DataTable with a specific set of"
            },
            {
              "type": "Literal",
              "value": "features.  Because features can be composed onto `Y.DataTable`, custom"
            },
            {
              "type": "Literal",
              "value": "subclasses of DataTable.Base will remain unmodified when new feature modules"
            },
            {
              "type": "Literal",
              "value": "are loaded."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "Example usage might look like this:"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "<pre><code>"
            },
            {
              "type": "Literal",
              "value": "// Custom subclass with only sorting and mutability added.  If other datatable"
            },
            {
              "type": "Literal",
              "value": "// feature modules are loaded, this class will not be affected."
            },
            {
              "type": "Literal",
              "value": "var MyTableClass = Y.Base.create('table', Y.DataTable.Base,"
            },
            {
              "type": "Literal",
              "value": "                       [ Y.DataTable.Sortable, Y.DataTable.Mutable ]);"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "var table = new MyTableClass({"
            },
            {
              "type": "Literal",
              "value": "    columns: ['firstName', 'lastName', 'age'],"
            },
            {
              "type": "Literal",
              "value": "    data: ["
            },
            {
              "type": "Literal",
              "value": "        { firstName: 'Frank', lastName: 'Zappa', age: 71 },"
            },
            {
              "type": "Literal",
              "value": "        { firstName: 'Frank', lastName: 'Lloyd Wright', age: 144 },"
            },
            {
              "type": "Literal",
              "value": "        { firstName: 'Albert', lastName: 'Einstein', age: 132 },"
            },
            {
              "type": "Literal",
              "value": "        ..."
            },
            {
              "type": "Literal",
              "value": "    ]"
            },
            {
              "type": "Literal",
              "value": "});"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "table.render('#over-there');"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "// DataTable.Base can be instantiated if a featureless table is needed."
            },
            {
              "type": "Literal",
              "value": "var table = new Y.DataTable.Base({"
            },
            {
              "type": "Literal",
              "value": "    columns: ['firstName', 'lastName', 'age'],"
            },
            {
              "type": "Literal",
              "value": "    data: ["
            },
            {
              "type": "Literal",
              "value": "        { firstName: 'Frank', lastName: 'Zappa', age: 71 },"
            },
            {
              "type": "Literal",
              "value": "        { firstName: 'Frank', lastName: 'Lloyd Wright', age: 144 },"
            },
            {
              "type": "Literal",
              "value": "        { firstName: 'Albert', lastName: 'Einstein', age: 132 },"
            },
            {
              "type": "Literal",
              "value": "        ..."
            },
            {
              "type": "Literal",
              "value": "    ]"
            },
            {
              "type": "Literal",
              "value": "});"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "table.render('#in-here');"
            },
            {
              "type": "Literal",
              "value": "</code></pre>"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "DataTable.Base is built from DataTable.Core, and sets the default `view`"
            },
            {
              "type": "Literal",
              "value": "to `Y.DataTable.TableView`."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "@class Base"
            },
            {
              "type": "Literal",
              "value": "@extends Widget"
            },
            {
              "type": "Literal",
              "value": "@uses DataTable.Core"
            },
            {
              "type": "Literal",
              "value": "@namespace DataTable"
            },
            {
              "type": "Literal",
              "value": "@since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "**/"
            },
            {
              "type": "Literal",
              "value": "Y.DataTable.Base = Y.Base.create('datatable', Y.Widget, [Y.DataTable.Core], {"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Pass through to `delegate()` called from the `contentBox`."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method delegate"
            },
            {
              "type": "Literal",
              "value": "    @param type {String} the event type to delegate"
            },
            {
              "type": "Literal",
              "value": "    @param fn {Function} the callback function to execute.  This function"
            },
            {
              "type": "Literal",
              "value": "                 will be provided the event object for the delegated event."
            },
            {
              "type": "Literal",
              "value": "    @param spec {String|Function} a selector that must match the target of the"
            },
            {
              "type": "Literal",
              "value": "                 event or a function to test target and its parents for a match"
            },
            {
              "type": "Literal",
              "value": "    @param context {Object} optional argument that specifies what 'this' refers to"
            },
            {
              "type": "Literal",
              "value": "    @param args* {any} 0..n additional arguments to pass on to the callback"
            },
            {
              "type": "Literal",
              "value": "                 function.  These arguments will be added after the event object."
            },
            {
              "type": "Literal",
              "value": "    @return {EventHandle} the detach handle"
            },
            {
              "type": "Literal",
              "value": "    @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    delegate: function () {"
            },
            {
              "type": "Literal",
              "value": "        var contentBox = this.get('contentBox');"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        return contentBox.delegate.apply(contentBox, arguments);"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Destroys the table `View` if it's been created."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method destructor"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    destructor: function () {"
            },
            {
              "type": "Literal",
              "value": "        if (this.view) {"
            },
            {
              "type": "Literal",
              "value": "            this.view.destroy();"
            },
            {
              "type": "Literal",
              "value": "        }"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Returns the `<td>` Node from the given row and column index.  Alternately,"
            },
            {
              "type": "Literal",
              "value": "    the `seed` can be a Node.  If so, the nearest ancestor cell is returned."
            },
            {
              "type": "Literal",
              "value": "    If the `seed` is a cell, it is returned.  If there is no cell at the given"
            },
            {
              "type": "Literal",
              "value": "    coordinates, `null` is returned."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    Optionally, include an offset array or string to return a cell near the"
            },
            {
              "type": "Literal",
              "value": "    cell identified by the `seed`.  The offset can be an array containing the"
            },
            {
              "type": "Literal",
              "value": "    number of rows to shift followed by the number of columns to shift, or one"
            },
            {
              "type": "Literal",
              "value": "    of \"above\", \"below\", \"next\", or \"previous\"."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    <pre><code>// Previous cell in the previous row"
            },
            {
              "type": "Literal",
              "value": "    var cell = table.getCell(e.target, [-1, -1]);"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    // Next cell"
            },
            {
              "type": "Literal",
              "value": "    var cell = table.getCell(e.target, 'next');"
            },
            {
              "type": "Literal",
              "value": "    var cell = table.getCell(e.taregt, [0, 1];</pre></code>"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    This is actually just a pass through to the `view` instance's method"
            },
            {
              "type": "Literal",
              "value": "    by the same name."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method getCell"
            },
            {
              "type": "Literal",
              "value": "    @param {Number[]|Node} seed Array of row and column indexes, or a Node that"
            },
            {
              "type": "Literal",
              "value": "        is either the cell itself or a descendant of one."
            },
            {
              "type": "Literal",
              "value": "    @param {Number[]|String} [shift] Offset by which to identify the returned"
            },
            {
              "type": "Literal",
              "value": "        cell Node"
            },
            {
              "type": "Literal",
              "value": "    @return {Node}"
            },
            {
              "type": "Literal",
              "value": "    @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    getCell: function (/* seed, shift */) {"
            },
            {
              "type": "Literal",
              "value": "        return this.view && this.view.getCell &&"
            },
            {
              "type": "Literal",
              "value": "            this.view.getCell.apply(this.view, arguments);"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Returns the `<tr>` Node from the given row index, Model, or Model's"
            },
            {
              "type": "Literal",
              "value": "    `clientId`.  If the rows haven't been rendered yet, or if the row can't be"
            },
            {
              "type": "Literal",
              "value": "    found by the input, `null` is returned."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    This is actually just a pass through to the `view` instance's method"
            },
            {
              "type": "Literal",
              "value": "    by the same name."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method getRow"
            },
            {
              "type": "Literal",
              "value": "    @param {Number|String|Model} id Row index, Model instance, or clientId"
            },
            {
              "type": "Literal",
              "value": "    @return {Node}"
            },
            {
              "type": "Literal",
              "value": "    @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    getRow: function (/* id */) {"
            },
            {
              "type": "Literal",
              "value": "        return this.view && this.view.getRow &&"
            },
            {
              "type": "Literal",
              "value": "            this.view.getRow.apply(this.view, arguments);"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Updates the `_displayColumns` property."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method _afterDisplayColumnsChange"
            },
            {
              "type": "Literal",
              "value": "    @param {EventFacade} e The `columnsChange` event"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    // FIXME: This is a kludge for back compat with features that reference"
            },
            {
              "type": "Literal",
              "value": "    // _displayColumns.  They should be updated to TableView plugins."
            },
            {
              "type": "Literal",
              "value": "    _afterDisplayColumnsChange: function (e) {"
            },
            {
              "type": "Literal",
              "value": "        this._extractDisplayColumns(e.newVal || []);"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Attaches subscriptions to relay core change events to the view."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method bindUI"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    bindUI: function () {"
            },
            {
              "type": "Literal",
              "value": "        this._eventHandles.relayCoreChanges = this.after("
            },
            {
              "type": "Literal",
              "value": "            ['columnsChange',"
            },
            {
              "type": "Literal",
              "value": "             'dataChange',"
            },
            {
              "type": "Literal",
              "value": "             'summaryChange',"
            },
            {
              "type": "Literal",
              "value": "             'captionChange',"
            },
            {
              "type": "Literal",
              "value": "             'widthChange'],"
            },
            {
              "type": "Literal",
              "value": "            Y.bind('_relayCoreAttrChange', this));"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    The default behavior of the `renderView` event.  Calls `render()` on the"
            },
            {
              "type": "Literal",
              "value": "    `View` instance on the event."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method _defRenderViewFn"
            },
            {
              "type": "Literal",
              "value": "    @param {EventFacade} e The `renderView` event"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    _defRenderViewFn: function (e) {"
            },
            {
              "type": "Literal",
              "value": "        e.view.render();"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Processes the full column array, distilling the columns down to those that"
            },
            {
              "type": "Literal",
              "value": "    correspond to cell data columns."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method _extractDisplayColumns"
            },
            {
              "type": "Literal",
              "value": "    @param {Object[]} columns The full set of table columns"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    // FIXME: this is a kludge for back compat, duplicating logic in the"
            },
            {
              "type": "Literal",
              "value": "    // tableView"
            },
            {
              "type": "Literal",
              "value": "    _extractDisplayColumns: function (columns) {"
            },
            {
              "type": "Literal",
              "value": "        var displayColumns = [];"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        function process(cols) {"
            },
            {
              "type": "Literal",
              "value": "            var i, len, col;"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "            for (i = 0, len = cols.length; i < len; ++i) {"
            },
            {
              "type": "Literal",
              "value": "                col = cols[i];"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "                if (Y.Lang.isArray(col.children)) {"
            },
            {
              "type": "Literal",
              "value": "                    process(col.children);"
            },
            {
              "type": "Literal",
              "value": "                } else {"
            },
            {
              "type": "Literal",
              "value": "                    displayColumns.push(col);"
            },
            {
              "type": "Literal",
              "value": "                }"
            },
            {
              "type": "Literal",
              "value": "            }"
            },
            {
              "type": "Literal",
              "value": "        }"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        process(columns);"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        Array of the columns that correspond to those with value cells in the"
            },
            {
              "type": "Literal",
              "value": "        data rows. Excludes colspan header columns (configured with `children`)."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @property _displayColumns"
            },
            {
              "type": "Literal",
              "value": "        @type {Object[]}"
            },
            {
              "type": "Literal",
              "value": "        @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        this._displayColumns = displayColumns;"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Sets up the instance's events."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method initializer"
            },
            {
              "type": "Literal",
              "value": "    @param {Object} [config] Configuration object passed at construction"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    initializer: function () {"
            },
            {
              "type": "Literal",
              "value": "        this.publish('renderView', {"
            },
            {
              "type": "Literal",
              "value": "            defaultFn: Y.bind('_defRenderViewFn', this)"
            },
            {
              "type": "Literal",
              "value": "        });"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        // Have to use get('columns'), not config.columns because the setter"
            },
            {
              "type": "Literal",
              "value": "        // needs to transform string columns to objects."
            },
            {
              "type": "Literal",
              "value": "        this._extractDisplayColumns(this.get('columns') || []);"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        // FIXME: kludge for back compat of features that reference"
            },
            {
              "type": "Literal",
              "value": "        // _displayColumns on the instance.  They need to be updated to"
            },
            {
              "type": "Literal",
              "value": "        // TableView plugins, most likely."
            },
            {
              "type": "Literal",
              "value": "        this.after('columnsChange', Y.bind('_afterDisplayColumnsChange', this));"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Relays attribute changes to the instance's `view`."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method _relayCoreAttrChange"
            },
            {
              "type": "Literal",
              "value": "    @param {EventFacade} e The change event"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    _relayCoreAttrChange: function (e) {"
            },
            {
              "type": "Literal",
              "value": "        var attr = (e.attrName === 'data') ? 'modelList' : e.attrName;"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        this.view.set(attr, e.newVal);"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Instantiates the configured `view` class that will be responsible for"
            },
            {
              "type": "Literal",
              "value": "    setting up the View class."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method @renderUI"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    renderUI: function () {"
            },
            {
              "type": "Literal",
              "value": "        var self = this,"
            },
            {
              "type": "Literal",
              "value": "            View = this.get('view');"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        if (View) {"
            },
            {
              "type": "Literal",
              "value": "            this.view = new View("
            },
            {
              "type": "Literal",
              "value": "                Y.merge("
            },
            {
              "type": "Literal",
              "value": "                    this.getAttrs(),"
            },
            {
              "type": "Literal",
              "value": "                    {"
            },
            {
              "type": "Literal",
              "value": "                        host     : this,"
            },
            {
              "type": "Literal",
              "value": "                        container: this.get('contentBox'),"
            },
            {
              "type": "Literal",
              "value": "                        modelList: this.data"
            },
            {
              "type": "Literal",
              "value": "                    },"
            },
            {
              "type": "Literal",
              "value": "                    this.get('viewConfig')));"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "            // For back compat, share the view instances and primary nodes"
            },
            {
              "type": "Literal",
              "value": "            // on this instance."
            },
            {
              "type": "Literal",
              "value": "            // TODO: Remove this?"
            },
            {
              "type": "Literal",
              "value": "            if (!this._eventHandles.legacyFeatureProps) {"
            },
            {
              "type": "Literal",
              "value": "                this._eventHandles.legacyFeatureProps = this.view.after({"
            },
            {
              "type": "Literal",
              "value": "                    renderHeader: function (e) {"
            },
            {
              "type": "Literal",
              "value": "                        self.head = e.view;"
            },
            {
              "type": "Literal",
              "value": "                        self._theadNode = e.view.theadNode;"
            },
            {
              "type": "Literal",
              "value": "                        // TODO: clean up the repetition."
            },
            {
              "type": "Literal",
              "value": "                        // This is here so that subscribers to renderHeader etc"
            },
            {
              "type": "Literal",
              "value": "                        // have access to this._tableNode from the DT instance"
            },
            {
              "type": "Literal",
              "value": "                        self._tableNode = e.view.get('container');"
            },
            {
              "type": "Literal",
              "value": "                    },"
            },
            {
              "type": "Literal",
              "value": "                    renderFooter: function (e) {"
            },
            {
              "type": "Literal",
              "value": "                        self.foot = e.view;"
            },
            {
              "type": "Literal",
              "value": "                        self._tfootNode = e.view.tfootNode;"
            },
            {
              "type": "Literal",
              "value": "                        self._tableNode = e.view.get('container');"
            },
            {
              "type": "Literal",
              "value": "                    },"
            },
            {
              "type": "Literal",
              "value": "                    renderBody: function (e) {"
            },
            {
              "type": "Literal",
              "value": "                        self.body = e.view;"
            },
            {
              "type": "Literal",
              "value": "                        self._tbodyNode = e.view.tbodyNode;"
            },
            {
              "type": "Literal",
              "value": "                        self._tableNode = e.view.get('container');"
            },
            {
              "type": "Literal",
              "value": "                    },"
            },
            {
              "type": "Literal",
              "value": "                    // FIXME: guarantee that the properties are available, even"
            },
            {
              "type": "Literal",
              "value": "                    // if the configured (or omitted) views don't create them"
            },
            {
              "type": "Literal",
              "value": "                    renderTable: function () {"
            },
            {
              "type": "Literal",
              "value": "                        var contentBox = this.get('container');"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "                        self._tableNode = this.tableNode ||"
            },
            {
              "type": "Literal",
              "value": "                            contentBox.one('.' + this.getClassName('table') +"
            },
            {
              "type": "Literal",
              "value": "                                           ', table');"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "                        // FIXME: _captionNode isn't available until after"
            },
            {
              "type": "Literal",
              "value": "                        // renderTable unless in the renderX subs I look for"
            },
            {
              "type": "Literal",
              "value": "                        // it under the container's parentNode (to account for"
            },
            {
              "type": "Literal",
              "value": "                        // scroll breaking out the caption table)."
            },
            {
              "type": "Literal",
              "value": "                        self._captionNode = this.captionNode ||"
            },
            {
              "type": "Literal",
              "value": "                            contentBox.one('caption');"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "                        if (!self._theadNode) {"
            },
            {
              "type": "Literal",
              "value": "                            self._theadNode = contentBox.one("
            },
            {
              "type": "Literal",
              "value": "                                '.' + this.getClassName('columns') + ', thead');"
            },
            {
              "type": "Literal",
              "value": "                        }"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "                        if (!self._tbodyNode) {"
            },
            {
              "type": "Literal",
              "value": "                            self._tbodyNode = contentBox.one("
            },
            {
              "type": "Literal",
              "value": "                                '.' + this.getClassName('data') + ', tbody');"
            },
            {
              "type": "Literal",
              "value": "                        }"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "                        if (!self._tfootNode) {"
            },
            {
              "type": "Literal",
              "value": "                            self._tfootNode = contentBox.one("
            },
            {
              "type": "Literal",
              "value": "                                '.' + this.getClassName('footer') + ', tfoot');"
            },
            {
              "type": "Literal",
              "value": "                        }"
            },
            {
              "type": "Literal",
              "value": "                    }"
            },
            {
              "type": "Literal",
              "value": "                });"
            },
            {
              "type": "Literal",
              "value": "            }"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "            // To *somewhat* preserve table.on('renderHeader', fn) in the"
            },
            {
              "type": "Literal",
              "value": "            // form of table.on('table:renderHeader', fn), because I couldn't"
            },
            {
              "type": "Literal",
              "value": "            // figure out another option."
            },
            {
              "type": "Literal",
              "value": "            this.view.addTarget(this);"
            },
            {
              "type": "Literal",
              "value": "        }"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Fires the `renderView` event, delegating UI updates to the configured View."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method syncUI"
            },
            {
              "type": "Literal",
              "value": "    @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    syncUI: function () {"
            },
            {
              "type": "Literal",
              "value": "        if (this.view) {"
            },
            {
              "type": "Literal",
              "value": "            this.fire('renderView', { view: this.view });"
            },
            {
              "type": "Literal",
              "value": "        }"
            },
            {
              "type": "Literal",
              "value": "    },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    /**"
            },
            {
              "type": "Literal",
              "value": "    Verifies the input value is a function with a `render` method on its"
            },
            {
              "type": "Literal",
              "value": "    prototype.  `null` is also accepted to remove the default View."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "    @method _validateView"
            },
            {
              "type": "Literal",
              "value": "    @protected"
            },
            {
              "type": "Literal",
              "value": "    @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "    **/"
            },
            {
              "type": "Literal",
              "value": "    _validateView: function (val) {"
            },
            {
              "type": "Literal",
              "value": "        // TODO support View instances?"
            },
            {
              "type": "Literal",
              "value": "        return val === null || (Y.Lang.isFunction(val) && val.prototype.render);"
            },
            {
              "type": "Literal",
              "value": "    }"
            },
            {
              "type": "Literal",
              "value": "}, {"
            },
            {
              "type": "Literal",
              "value": "    ATTRS: {"
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        The View class used to render the `<table>` into the Widget's"
            },
            {
              "type": "Literal",
              "value": "        `contentBox`.  This View can handle the entire table rendering itself"
            },
            {
              "type": "Literal",
              "value": "        or delegate to other Views."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        It is not strictly necessary that the class function assigned here be"
            },
            {
              "type": "Literal",
              "value": "        a View subclass.  It must however have a `render()` method."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        When the DataTable is rendered, an instance of this View will be"
            },
            {
              "type": "Literal",
              "value": "        created and its `render()` method called.  The View instance will be"
            },
            {
              "type": "Literal",
              "value": "        assigned to the DataTable instance's `view` property."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @attribute view"
            },
            {
              "type": "Literal",
              "value": "        @type {Function}"
            },
            {
              "type": "Literal",
              "value": "        @default Y.DataTable.TableView"
            },
            {
              "type": "Literal",
              "value": "        @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        view: {"
            },
            {
              "type": "Literal",
              "value": "            value: Y.DataTable.TableView,"
            },
            {
              "type": "Literal",
              "value": "            validator: '_validateView'"
            },
            {
              "type": "Literal",
              "value": "        },"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        Configuration object passed to the class constructor in `view`"
            },
            {
              "type": "Literal",
              "value": "        during render."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @attribute viewConfig"
            },
            {
              "type": "Literal",
              "value": "        @type {Object}"
            },
            {
              "type": "Literal",
              "value": "        @default undefined (initially unset)"
            },
            {
              "type": "Literal",
              "value": "        @protected"
            },
            {
              "type": "Literal",
              "value": "        @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        viewConfig: {}"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        If the View class assigned to the DataTable's `view` attribute supports"
            },
            {
              "type": "Literal",
              "value": "        it, this class will be used for rendering the contents of the"
            },
            {
              "type": "Literal",
              "value": "        `<thead>`&mdash;the column headers for the table."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        Similar to `view`, the instance of this View will be assigned to the"
            },
            {
              "type": "Literal",
              "value": "        DataTable instance's `head` property."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        It is not strictly necessary that the class function assigned here be"
            },
            {
              "type": "Literal",
              "value": "        a View subclass.  It must however have a `render()` method."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @attribute headerView"
            },
            {
              "type": "Literal",
              "value": "        @type {Function|Object}"
            },
            {
              "type": "Literal",
              "value": "        @default Y.DataTable.HeaderView"
            },
            {
              "type": "Literal",
              "value": "        @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        /*"
            },
            {
              "type": "Literal",
              "value": "        headerView: {"
            },
            {
              "type": "Literal",
              "value": "            value: Y.DataTable.HeaderView,"
            },
            {
              "type": "Literal",
              "value": "            validator: '_validateView'"
            },
            {
              "type": "Literal",
              "value": "        },"
            },
            {
              "type": "Literal",
              "value": "        */"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        Configuration object passed to the class constructor in `headerView`"
            },
            {
              "type": "Literal",
              "value": "        during render."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @attribute headerConfig"
            },
            {
              "type": "Literal",
              "value": "        @type {Object}"
            },
            {
              "type": "Literal",
              "value": "        @default undefined (initially unset)"
            },
            {
              "type": "Literal",
              "value": "        @protected"
            },
            {
              "type": "Literal",
              "value": "        @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        //headConfig: {},"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        If the View class assigned to the DataTable's `view` attribute supports"
            },
            {
              "type": "Literal",
              "value": "        it, this class will be used for rendering the contents of the `<tfoot>`."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        Similar to `view`, the instance of this View will be assigned to the"
            },
            {
              "type": "Literal",
              "value": "        DataTable instance's `foot` property."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        It is not strictly necessary that the class function assigned here be"
            },
            {
              "type": "Literal",
              "value": "        a View subclass.  It must however have a `render()` method."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @attribute footerView"
            },
            {
              "type": "Literal",
              "value": "        @type {Function|Object}"
            },
            {
              "type": "Literal",
              "value": "        @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        /*"
            },
            {
              "type": "Literal",
              "value": "        footerView: {"
            },
            {
              "type": "Literal",
              "value": "            validator: '_validateView'"
            },
            {
              "type": "Literal",
              "value": "        },"
            },
            {
              "type": "Literal",
              "value": "        */"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        Configuration object passed to the class constructor in `footerView`"
            },
            {
              "type": "Literal",
              "value": "        during render."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @attribute footerConfig"
            },
            {
              "type": "Literal",
              "value": "        @type {Object}"
            },
            {
              "type": "Literal",
              "value": "        @default undefined (initially unset)"
            },
            {
              "type": "Literal",
              "value": "        @protected"
            },
            {
              "type": "Literal",
              "value": "        @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        //footerConfig: {},"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        If the View class assigned to the DataTable's `view` attribute supports"
            },
            {
              "type": "Literal",
              "value": "        it, this class will be used for rendering the contents of the `<tbody>`"
            },
            {
              "type": "Literal",
              "value": "        including all data rows."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        Similar to `view`, the instance of this View will be assigned to the"
            },
            {
              "type": "Literal",
              "value": "        DataTable instance's `body` property."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        It is not strictly necessary that the class function assigned here be"
            },
            {
              "type": "Literal",
              "value": "        a View subclass.  It must however have a `render()` method."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @attribute bodyView"
            },
            {
              "type": "Literal",
              "value": "        @type {Function}"
            },
            {
              "type": "Literal",
              "value": "        @default Y.DataTable.BodyView"
            },
            {
              "type": "Literal",
              "value": "        @since 3.5.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        /*"
            },
            {
              "type": "Literal",
              "value": "        bodyView: {"
            },
            {
              "type": "Literal",
              "value": "            value: Y.DataTable.BodyView,"
            },
            {
              "type": "Literal",
              "value": "            validator: '_validateView'"
            },
            {
              "type": "Literal",
              "value": "        },"
            },
            {
              "type": "Literal",
              "value": "        */"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        /**"
            },
            {
              "type": "Literal",
              "value": "        Configuration object passed to the class constructor in `bodyView`"
            },
            {
              "type": "Literal",
              "value": "        during render."
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "        @attribute bodyConfig"
            },
            {
              "type": "Literal",
              "value": "        @type {Object}"
            },
            {
              "type": "Literal",
              "value": "        @default undefined (initially unset)"
            },
            {
              "type": "Literal",
              "value": "        @protected"
            },
            {
              "type": "Literal",
              "value": "        @since 3.6.0"
            },
            {
              "type": "Literal",
              "value": "        **/"
            },
            {
              "type": "Literal",
              "value": "        //bodyConfig: {}"
            },
            {
              "type": "Literal",
              "value": "    }"
            },
            {
              "type": "Literal",
              "value": "});"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "// The DataTable API docs are above DataTable.Base docs."
            },
            {
              "type": "Literal",
              "value": "Y.DataTable = Y.mix("
            },
            {
              "type": "Literal",
              "value": "    Y.Base.create('datatable', Y.DataTable.Base, []), // Create the class"
            },
            {
              "type": "Literal",
              "value": "    Y.DataTable); // Migrate static and namespaced classes"
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": ""
            },
            {
              "type": "Literal",
              "value": "}, '@VERSION@', {"
            },
            {
              "type": "Literal",
              "value": "    \"requires\": ["
            },
            {
              "type": "Literal",
              "value": "        \"datatable-core\","
            },
            {
              "type": "Literal",
              "value": "        \"datatable-table\","
            },
            {
              "type": "Literal",
              "value": "        \"datatable-head\","
            },
            {
              "type": "Literal",
              "value": "        \"datatable-body\","
            },
            {
              "type": "Literal",
              "value": "        \"base-build\","
            },
            {
              "type": "Literal",
              "value": "        \"widget\""
            },
            {
              "type": "Literal",
              "value": "    ],"
            },
            {
              "type": "Literal",
              "value": "    \"skinnable\": true"
            },
            {
              "type": "Literal",
              "value": "});"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "MemberExpression",
            "computed": true,
            "object": {
              "type": "Identifier",
              "name": "_yuitest_coverage"
            },
            "property": {
              "type": "Literal",
              "value": "build/datatable-base/datatable-base.js"
            }
          },
          "property": {
            "type": "Identifier",
            "name": "lines"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "1"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "219"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "237"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "239"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "250"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "251"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "285"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "303"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "318"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "329"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "347"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "361"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "363"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "364"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "366"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "367"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "369"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "370"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "372"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "377"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "387"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "399"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "405"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "410"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "422"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "424"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "436"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "439"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "440"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "453"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "454"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "456"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "457"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "461"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "464"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "465"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "466"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "469"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "470"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "471"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "476"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "478"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "486"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "489"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "490"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "494"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "495"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "499"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "500"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "510"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "521"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "522"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "536"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "679"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "MemberExpression",
            "computed": true,
            "object": {
              "type": "Identifier",
              "name": "_yuitest_coverage"
            },
            "property": {
              "type": "Literal",
              "value": "build/datatable-base/datatable-base.js"
            }
          },
          "property": {
            "type": "Identifier",
            "name": "functions"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "delegate:236"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "destructor:249"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "getCell:284"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "getRow:302"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "_afterDisplayColumnsChange:317"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "bindUI:328"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "_defRenderViewFn:346"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "process:363"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "_extractDisplayColumns:360"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "initializer:398"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "_relayCoreAttrChange:421"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "renderHeader:455"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "renderFooter:463"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "renderBody:468"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "renderTable:475"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "renderUI:435"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "syncUI:520"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "_validateView:534"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "(anonymous 1):1"
              },
              "value": {
                "type": "Literal",
                "value": 0
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "MemberExpression",
            "computed": true,
            "object": {
              "type": "Identifier",
              "name": "_yuitest_coverage"
            },
            "property": {
              "type": "Literal",
              "value": "build/datatable-base/datatable-base.js"
            }
          },
          "property": {
            "type": "Identifier",
            "name": "coveredLines"
          }
        },
        "right": {
          "type": "Literal",
          "value": 54
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "MemberExpression",
            "computed": true,
            "object": {
              "type": "Identifier",
              "name": "_yuitest_coverage"
            },
            "property": {
              "type": "Literal",
              "value": "build/datatable-base/datatable-base.js"
            }
          },
          "property": {
            "type": "Identifier",
            "name": "coveredFunctions"
          }
        },
        "right": {
          "type": "Literal",
          "value": 19
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "_yuitest_coverline"
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "build/datatable-base/datatable-base.js"
          },
          {
            "type": "Literal",
            "value": 1
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "YUI"
          },
          "property": {
            "type": "Identifier",
            "name": "add"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "datatable-base"
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "Y"
              },
              {
                "type": "Identifier",
                "name": "NAME"
              }
            ],
            "defaults": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "_yuitest_coverfunc"
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "build/datatable-base/datatable-base.js"
                      },
                      {
                        "type": "Literal",
                        "value": "(anonymous 1)"
                      },
                      {
                        "type": "Literal",
                        "value": 1
                      }
                    ]
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "_yuitest_coverline"
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "build/datatable-base/datatable-base.js"
                      },
                      {
                        "type": "Literal",
                        "value": 219
                      }
                    ]
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Y"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "DataTable"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "Base"
                      }
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Y"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "Base"
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "create"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "datatable"
                        },
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Y"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "Widget"
                          }
                        },
                        {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Y"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "DataTable"
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "Core"
                              }
                            }
                          ]
                        },
                        {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "delegate"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "delegate"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 236
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 237
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "contentBox"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "ThisExpression"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "get"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "contentBox"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 239
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "contentBox"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "delegate"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "apply"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "contentBox"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "arguments"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "destructor"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "destructor"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 249
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 250
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "view"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_yuitest_coverline"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "build/datatable-base/datatable-base.js"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 251
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "ThisExpression"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "view"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "destroy"
                                                }
                                              },
                                              "arguments": []
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "getCell"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "getCell"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 284
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 285
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "LogicalExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "view"
                                            }
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "ThisExpression"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "view"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "getCell"
                                            }
                                          }
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "view"
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "getCell"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "apply"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "ThisExpression"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "view"
                                              }
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "arguments"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "getRow"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "getRow"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 302
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 303
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "LogicalExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "view"
                                            }
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "ThisExpression"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "view"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "getRow"
                                            }
                                          }
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "view"
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "getRow"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "apply"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "ThisExpression"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "view"
                                              }
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "arguments"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "_afterDisplayColumnsChange"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "e"
                                  }
                                ],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "_afterDisplayColumnsChange"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 317
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 318
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "ThisExpression"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_extractDisplayColumns"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "LogicalExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "e"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "newVal"
                                              }
                                            },
                                            "right": {
                                              "type": "ArrayExpression",
                                              "elements": []
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "bindUI"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "bindUI"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 328
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 329
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "_eventHandles"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "relayCoreChanges"
                                          }
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "after"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "ArrayExpression",
                                              "elements": [
                                                {
                                                  "type": "Literal",
                                                  "value": "columnsChange"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "dataChange"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "summaryChange"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "captionChange"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "widthChange"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "Y"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "bind"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "_relayCoreAttrChange"
                                                },
                                                {
                                                  "type": "ThisExpression"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "_defRenderViewFn"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "e"
                                  }
                                ],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "_defRenderViewFn"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 346
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 347
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "e"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "view"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "render"
                                          }
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "_extractDisplayColumns"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "columns"
                                  }
                                ],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "_extractDisplayColumns"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 360
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 361
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "displayColumns"
                                          },
                                          "init": {
                                            "type": "ArrayExpression",
                                            "elements": []
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 363
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "FunctionDeclaration",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "process"
                                      },
                                      "params": [
                                        {
                                          "type": "Identifier",
                                          "name": "cols"
                                        }
                                      ],
                                      "defaults": [],
                                      "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_yuitest_coverfunc"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "build/datatable-base/datatable-base.js"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "process"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 363
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_yuitest_coverline"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "build/datatable-base/datatable-base.js"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 364
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "i"
                                                },
                                                "init": null
                                              },
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "len"
                                                },
                                                "init": null
                                              },
                                              {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                  "type": "Identifier",
                                                  "name": "col"
                                                },
                                                "init": null
                                              }
                                            ],
                                            "kind": "var"
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_yuitest_coverline"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "build/datatable-base/datatable-base.js"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 366
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ForStatement",
                                            "init": {
                                              "type": "SequenceExpression",
                                              "expressions": [
                                                {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": 0
                                                  }
                                                },
                                                {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "len"
                                                  },
                                                  "right": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "cols"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "length"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "<",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "i"
                                              },
                                              "right": {
                                                "type": "Identifier",
                                                "name": "len"
                                              }
                                            },
                                            "update": {
                                              "type": "UpdateExpression",
                                              "operator": "++",
                                              "argument": {
                                                "type": "Identifier",
                                                "name": "i"
                                              },
                                              "prefix": true
                                            },
                                            "body": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "_yuitest_coverline"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "build/datatable-base/datatable-base.js"
                                                      },
                                                      {
                                                        "type": "Literal",
                                                        "value": 367
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "col"
                                                    },
                                                    "right": {
                                                      "type": "MemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "cols"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "i"
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "_yuitest_coverline"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "build/datatable-base/datatable-base.js"
                                                      },
                                                      {
                                                        "type": "Literal",
                                                        "value": 369
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "IfStatement",
                                                  "test": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "Y"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "Lang"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "isArray"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "col"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "children"
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "consequent": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "_yuitest_coverline"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": "build/datatable-base/datatable-base.js"
                                                            },
                                                            {
                                                              "type": "Literal",
                                                              "value": 370
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "process"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "col"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "children"
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "alternate": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "Identifier",
                                                            "name": "_yuitest_coverline"
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Literal",
                                                              "value": "build/datatable-base/datatable-base.js"
                                                            },
                                                            {
                                                              "type": "Literal",
                                                              "value": 372
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "displayColumns"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "push"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "col"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "rest": null,
                                      "generator": false,
                                      "expression": false
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 377
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "process"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "columns"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 387
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "ThisExpression"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_displayColumns"
                                          }
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "displayColumns"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "initializer"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "initializer"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 398
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 399
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "ThisExpression"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "publish"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "renderView"
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "defaultFn"
                                                },
                                                "value": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "Y"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "bind"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "_defRenderViewFn"
                                                    },
                                                    {
                                                      "type": "ThisExpression"
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 405
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "ThisExpression"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "_extractDisplayColumns"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "LogicalExpression",
                                            "operator": "||",
                                            "left": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "get"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "columns"
                                                }
                                              ]
                                            },
                                            "right": {
                                              "type": "ArrayExpression",
                                              "elements": []
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 410
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "ThisExpression"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "after"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "columnsChange"
                                          },
                                          {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Y"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "bind"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "_afterDisplayColumnsChange"
                                              },
                                              {
                                                "type": "ThisExpression"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "_relayCoreAttrChange"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "e"
                                  }
                                ],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "_relayCoreAttrChange"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 421
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 422
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "attr"
                                          },
                                          "init": {
                                            "type": "ConditionalExpression",
                                            "test": {
                                              "type": "BinaryExpression",
                                              "operator": "===",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "e"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "attrName"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "data"
                                              }
                                            },
                                            "consequent": {
                                              "type": "Literal",
                                              "value": "modelList"
                                            },
                                            "alternate": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "e"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "attrName"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 424
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "ThisExpression"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "view"
                                            }
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "set"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "attr"
                                          },
                                          {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "e"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "newVal"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "renderUI"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "renderUI"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 435
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 436
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "self"
                                          },
                                          "init": {
                                            "type": "ThisExpression"
                                          }
                                        },
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "View"
                                          },
                                          "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "ThisExpression"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "get"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "view"
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "var"
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 439
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "View"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_yuitest_coverline"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "build/datatable-base/datatable-base.js"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 440
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "view"
                                                }
                                              },
                                              "right": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "View"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "Y"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "merge"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "ThisExpression"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "getAttrs"
                                                          }
                                                        },
                                                        "arguments": []
                                                      },
                                                      {
                                                        "type": "ObjectExpression",
                                                        "properties": [
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "host"
                                                            },
                                                            "value": {
                                                              "type": "ThisExpression"
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "container"
                                                            },
                                                            "value": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "ThisExpression"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "get"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "contentBox"
                                                                }
                                                              ]
                                                            },
                                                            "kind": "init"
                                                          },
                                                          {
                                                            "type": "Property",
                                                            "key": {
                                                              "type": "Identifier",
                                                              "name": "modelList"
                                                            },
                                                            "value": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "ThisExpression"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "data"
                                                              }
                                                            },
                                                            "kind": "init"
                                                          }
                                                        ]
                                                      },
                                                      {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "ThisExpression"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "get"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": "viewConfig"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_yuitest_coverline"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "build/datatable-base/datatable-base.js"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 453
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "IfStatement",
                                            "test": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "ThisExpression"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "_eventHandles"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "legacyFeatureProps"
                                                }
                                              },
                                              "prefix": true
                                            },
                                            "consequent": {
                                              "type": "BlockStatement",
                                              "body": [
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "Identifier",
                                                      "name": "_yuitest_coverline"
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "build/datatable-base/datatable-base.js"
                                                      },
                                                      {
                                                        "type": "Literal",
                                                        "value": 454
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "ExpressionStatement",
                                                  "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "_eventHandles"
                                                        }
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "legacyFeatureProps"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "ThisExpression"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "view"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "after"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "ObjectExpression",
                                                          "properties": [
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "renderHeader"
                                                              },
                                                              "value": {
                                                                "type": "FunctionExpression",
                                                                "id": null,
                                                                "params": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "e"
                                                                  }
                                                                ],
                                                                "defaults": [],
                                                                "body": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverfunc"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "renderHeader"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 455
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 456
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "head"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "e"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "view"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 457
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_theadNode"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "e"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "view"
                                                                            }
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "theadNode"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 461
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_tableNode"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "e"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "view"
                                                                              }
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "get"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Literal",
                                                                              "value": "container"
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "rest": null,
                                                                "generator": false,
                                                                "expression": false
                                                              },
                                                              "kind": "init"
                                                            },
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "renderFooter"
                                                              },
                                                              "value": {
                                                                "type": "FunctionExpression",
                                                                "id": null,
                                                                "params": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "e"
                                                                  }
                                                                ],
                                                                "defaults": [],
                                                                "body": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverfunc"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "renderFooter"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 463
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 464
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "foot"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "e"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "view"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 465
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_tfootNode"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "e"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "view"
                                                                            }
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "tfootNode"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 466
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_tableNode"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "e"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "view"
                                                                              }
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "get"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Literal",
                                                                              "value": "container"
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "rest": null,
                                                                "generator": false,
                                                                "expression": false
                                                              },
                                                              "kind": "init"
                                                            },
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "renderBody"
                                                              },
                                                              "value": {
                                                                "type": "FunctionExpression",
                                                                "id": null,
                                                                "params": [
                                                                  {
                                                                    "type": "Identifier",
                                                                    "name": "e"
                                                                  }
                                                                ],
                                                                "defaults": [],
                                                                "body": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverfunc"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "renderBody"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 468
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 469
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "body"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "e"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "view"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 470
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_tbodyNode"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "e"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "view"
                                                                            }
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "tbodyNode"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 471
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_tableNode"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "CallExpression",
                                                                          "callee": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "e"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "view"
                                                                              }
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "get"
                                                                            }
                                                                          },
                                                                          "arguments": [
                                                                            {
                                                                              "type": "Literal",
                                                                              "value": "container"
                                                                            }
                                                                          ]
                                                                        }
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "rest": null,
                                                                "generator": false,
                                                                "expression": false
                                                              },
                                                              "kind": "init"
                                                            },
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "renderTable"
                                                              },
                                                              "value": {
                                                                "type": "FunctionExpression",
                                                                "id": null,
                                                                "params": [],
                                                                "defaults": [],
                                                                "body": {
                                                                  "type": "BlockStatement",
                                                                  "body": [
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverfunc"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "renderTable"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 475
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 476
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "VariableDeclaration",
                                                                      "declarations": [
                                                                        {
                                                                          "type": "VariableDeclarator",
                                                                          "id": {
                                                                            "type": "Identifier",
                                                                            "name": "contentBox"
                                                                          },
                                                                          "init": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "ThisExpression"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "get"
                                                                              }
                                                                            },
                                                                            "arguments": [
                                                                              {
                                                                                "type": "Literal",
                                                                                "value": "container"
                                                                              }
                                                                            ]
                                                                          }
                                                                        }
                                                                      ],
                                                                      "kind": "var"
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 478
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_tableNode"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "LogicalExpression",
                                                                          "operator": "||",
                                                                          "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "tableNode"
                                                                            }
                                                                          },
                                                                          "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "contentBox"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "one"
                                                                              }
                                                                            },
                                                                            "arguments": [
                                                                              {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "+",
                                                                                "left": {
                                                                                  "type": "BinaryExpression",
                                                                                  "operator": "+",
                                                                                  "left": {
                                                                                    "type": "Literal",
                                                                                    "value": "."
                                                                                  },
                                                                                  "right": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                      "type": "MemberExpression",
                                                                                      "computed": false,
                                                                                      "object": {
                                                                                        "type": "ThisExpression"
                                                                                      },
                                                                                      "property": {
                                                                                        "type": "Identifier",
                                                                                        "name": "getClassName"
                                                                                      }
                                                                                    },
                                                                                    "arguments": [
                                                                                      {
                                                                                        "type": "Literal",
                                                                                        "value": "table"
                                                                                      }
                                                                                    ]
                                                                                  }
                                                                                },
                                                                                "right": {
                                                                                  "type": "Literal",
                                                                                  "value": ", table"
                                                                                }
                                                                              }
                                                                            ]
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 486
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "AssignmentExpression",
                                                                        "operator": "=",
                                                                        "left": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_captionNode"
                                                                          }
                                                                        },
                                                                        "right": {
                                                                          "type": "LogicalExpression",
                                                                          "operator": "||",
                                                                          "left": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "ThisExpression"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "captionNode"
                                                                            }
                                                                          },
                                                                          "right": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                              "type": "MemberExpression",
                                                                              "computed": false,
                                                                              "object": {
                                                                                "type": "Identifier",
                                                                                "name": "contentBox"
                                                                              },
                                                                              "property": {
                                                                                "type": "Identifier",
                                                                                "name": "one"
                                                                              }
                                                                            },
                                                                            "arguments": [
                                                                              {
                                                                                "type": "Literal",
                                                                                "value": "caption"
                                                                              }
                                                                            ]
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 489
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "IfStatement",
                                                                      "test": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "!",
                                                                        "argument": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_theadNode"
                                                                          }
                                                                        },
                                                                        "prefix": true
                                                                      },
                                                                      "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                          {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "_yuitest_coverline"
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": "build/datatable-base/datatable-base.js"
                                                                                },
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": 490
                                                                                }
                                                                              ]
                                                                            }
                                                                          },
                                                                          {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                              "type": "AssignmentExpression",
                                                                              "operator": "=",
                                                                              "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "self"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "_theadNode"
                                                                                }
                                                                              },
                                                                              "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "contentBox"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "one"
                                                                                  }
                                                                                },
                                                                                "arguments": [
                                                                                  {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                      "type": "BinaryExpression",
                                                                                      "operator": "+",
                                                                                      "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "."
                                                                                      },
                                                                                      "right": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                          "type": "MemberExpression",
                                                                                          "computed": false,
                                                                                          "object": {
                                                                                            "type": "ThisExpression"
                                                                                          },
                                                                                          "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "getClassName"
                                                                                          }
                                                                                        },
                                                                                        "arguments": [
                                                                                          {
                                                                                            "type": "Literal",
                                                                                            "value": "columns"
                                                                                          }
                                                                                        ]
                                                                                      }
                                                                                    },
                                                                                    "right": {
                                                                                      "type": "Literal",
                                                                                      "value": ", thead"
                                                                                    }
                                                                                  }
                                                                                ]
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      },
                                                                      "alternate": null
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 494
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "IfStatement",
                                                                      "test": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "!",
                                                                        "argument": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_tbodyNode"
                                                                          }
                                                                        },
                                                                        "prefix": true
                                                                      },
                                                                      "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                          {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "_yuitest_coverline"
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": "build/datatable-base/datatable-base.js"
                                                                                },
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": 495
                                                                                }
                                                                              ]
                                                                            }
                                                                          },
                                                                          {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                              "type": "AssignmentExpression",
                                                                              "operator": "=",
                                                                              "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "self"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "_tbodyNode"
                                                                                }
                                                                              },
                                                                              "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "contentBox"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "one"
                                                                                  }
                                                                                },
                                                                                "arguments": [
                                                                                  {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                      "type": "BinaryExpression",
                                                                                      "operator": "+",
                                                                                      "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "."
                                                                                      },
                                                                                      "right": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                          "type": "MemberExpression",
                                                                                          "computed": false,
                                                                                          "object": {
                                                                                            "type": "ThisExpression"
                                                                                          },
                                                                                          "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "getClassName"
                                                                                          }
                                                                                        },
                                                                                        "arguments": [
                                                                                          {
                                                                                            "type": "Literal",
                                                                                            "value": "data"
                                                                                          }
                                                                                        ]
                                                                                      }
                                                                                    },
                                                                                    "right": {
                                                                                      "type": "Literal",
                                                                                      "value": ", tbody"
                                                                                    }
                                                                                  }
                                                                                ]
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      },
                                                                      "alternate": null
                                                                    },
                                                                    {
                                                                      "type": "ExpressionStatement",
                                                                      "expression": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "Identifier",
                                                                          "name": "_yuitest_coverline"
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "build/datatable-base/datatable-base.js"
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": 499
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    {
                                                                      "type": "IfStatement",
                                                                      "test": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "!",
                                                                        "argument": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "self"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_tfootNode"
                                                                          }
                                                                        },
                                                                        "prefix": true
                                                                      },
                                                                      "consequent": {
                                                                        "type": "BlockStatement",
                                                                        "body": [
                                                                          {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                              "type": "CallExpression",
                                                                              "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "_yuitest_coverline"
                                                                              },
                                                                              "arguments": [
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": "build/datatable-base/datatable-base.js"
                                                                                },
                                                                                {
                                                                                  "type": "Literal",
                                                                                  "value": 500
                                                                                }
                                                                              ]
                                                                            }
                                                                          },
                                                                          {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                              "type": "AssignmentExpression",
                                                                              "operator": "=",
                                                                              "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": false,
                                                                                "object": {
                                                                                  "type": "Identifier",
                                                                                  "name": "self"
                                                                                },
                                                                                "property": {
                                                                                  "type": "Identifier",
                                                                                  "name": "_tfootNode"
                                                                                }
                                                                              },
                                                                              "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                  "type": "MemberExpression",
                                                                                  "computed": false,
                                                                                  "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "contentBox"
                                                                                  },
                                                                                  "property": {
                                                                                    "type": "Identifier",
                                                                                    "name": "one"
                                                                                  }
                                                                                },
                                                                                "arguments": [
                                                                                  {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "+",
                                                                                    "left": {
                                                                                      "type": "BinaryExpression",
                                                                                      "operator": "+",
                                                                                      "left": {
                                                                                        "type": "Literal",
                                                                                        "value": "."
                                                                                      },
                                                                                      "right": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                          "type": "MemberExpression",
                                                                                          "computed": false,
                                                                                          "object": {
                                                                                            "type": "ThisExpression"
                                                                                          },
                                                                                          "property": {
                                                                                            "type": "Identifier",
                                                                                            "name": "getClassName"
                                                                                          }
                                                                                        },
                                                                                        "arguments": [
                                                                                          {
                                                                                            "type": "Literal",
                                                                                            "value": "footer"
                                                                                          }
                                                                                        ]
                                                                                      }
                                                                                    },
                                                                                    "right": {
                                                                                      "type": "Literal",
                                                                                      "value": ", tfoot"
                                                                                    }
                                                                                  }
                                                                                ]
                                                                              }
                                                                            }
                                                                          }
                                                                        ]
                                                                      },
                                                                      "alternate": null
                                                                    }
                                                                  ]
                                                                },
                                                                "rest": null,
                                                                "generator": false,
                                                                "expression": false
                                                              },
                                                              "kind": "init"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "alternate": null
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_yuitest_coverline"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "build/datatable-base/datatable-base.js"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 510
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "ThisExpression"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "view"
                                                  }
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "addTarget"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "ThisExpression"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "syncUI"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "syncUI"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 520
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 521
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "view"
                                        }
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "_yuitest_coverline"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "build/datatable-base/datatable-base.js"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": 522
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "fire"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "renderView"
                                                },
                                                {
                                                  "type": "ObjectExpression",
                                                  "properties": [
                                                    {
                                                      "type": "Property",
                                                      "key": {
                                                        "type": "Identifier",
                                                        "name": "view"
                                                      },
                                                      "value": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "ThisExpression"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "view"
                                                        }
                                                      },
                                                      "kind": "init"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": null
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "_validateView"
                              },
                              "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "val"
                                  }
                                ],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverfunc"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": "_validateView"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 534
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "_yuitest_coverline"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "build/datatable-base/datatable-base.js"
                                          },
                                          {
                                            "type": "Literal",
                                            "value": 536
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "ReturnStatement",
                                      "argument": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "===",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "val"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": null
                                          }
                                        },
                                        "right": {
                                          "type": "LogicalExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "Y"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "Lang"
                                                }
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "isFunction"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "val"
                                              }
                                            ]
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "val"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "prototype"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "render"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false
                              },
                              "kind": "init"
                            }
                          ]
                        },
                        {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "ATTRS"
                              },
                              "value": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "view"
                                    },
                                    "value": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "value"
                                          },
                                          "value": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "Y"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "DataTable"
                                              }
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "TableView"
                                            }
                                          },
                                          "kind": "init"
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "validator"
                                          },
                                          "value": {
                                            "type": "Literal",
                                            "value": "_validateView"
                                          },
                                          "kind": "init"
                                        }
                                      ]
                                    },
                                    "kind": "init"
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "viewConfig"
                                    },
                                    "value": {
                                      "type": "ObjectExpression",
                                      "properties": []
                                    },
                                    "kind": "init"
                                  }
                                ]
                              },
                              "kind": "init"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "_yuitest_coverline"
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "build/datatable-base/datatable-base.js"
                      },
                      {
                        "type": "Literal",
                        "value": 679
                      }
                    ]
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Y"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "DataTable"
                      }
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Y"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "mix"
                        }
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Y"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "Base"
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "create"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "datatable"
                            },
                            {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Y"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "DataTable"
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "Base"
                              }
                            },
                            {
                              "type": "ArrayExpression",
                              "elements": []
                            }
                          ]
                        },
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Y"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "DataTable"
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "rest": null,
            "generator": false,
            "expression": false
          },
          {
            "type": "Literal",
            "value": "@VERSION@"
          },
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": "requires"
                },
                "value": {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "Literal",
                      "value": "datatable-core"
                    },
                    {
                      "type": "Literal",
                      "value": "datatable-table"
                    },
                    {
                      "type": "Literal",
                      "value": "datatable-head"
                    },
                    {
                      "type": "Literal",
                      "value": "datatable-body"
                    },
                    {
                      "type": "Literal",
                      "value": "base-build"
                    },
                    {
                      "type": "Literal",
                      "value": "widget"
                    }
                  ]
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": "skinnable"
                },
                "value": {
                  "type": "Literal",
                  "value": true
                },
                "kind": "init"
              }
            ]
          }
        ]
      }
    }
  ]
}