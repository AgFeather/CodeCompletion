{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "FunctionExpression",
          "id": null,
          "params": [],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "DOM"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "tinymce"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "DOM"
                      }
                    }
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "Event"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "tinymce"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "dom"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "Event"
                      }
                    }
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "extend"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "tinymce"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "extend"
                      }
                    }
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "each"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "tinymce"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "each"
                      }
                    }
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "Cookie"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "tinymce"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "util"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "Cookie"
                      }
                    }
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "explode"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "tinymce"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "explode"
                      }
                    }
                  }
                ],
                "kind": "var"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "tinymce"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "create"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "tinymce.plugins.FontSelectPlugin"
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "fonts"
                          },
                          "value": {
                            "type": "Literal",
                            "value": "Andale Mono=andale mono,times;Arial=arial,helvetica,sans-serif;Arial Black=arial black,avant garde;Book Antiqua=book antiqua,palatino;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier;Georgia=georgia,palatino;Helvetica=helvetica;Impact=impact,chicago;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco;Times New Roman=times new roman,times;Trebuchet MS=trebuchet ms,geneva;Verdana=verdana,geneva;Webdings=webdings;Wingdings=wingdings,zapf dingbats"
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "init"
                          },
                          "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "ed"
                              },
                              {
                                "type": "Identifier",
                                "name": "url"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "self"
                                      },
                                      "init": {
                                        "type": "ThisExpression"
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "ThisExpression"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "editor"
                                      }
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "ed"
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "ed"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "onNodeChange"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "add"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                          {
                                            "type": "Identifier",
                                            "name": "ed"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "cm"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "n"
                                          }
                                        ],
                                        "defaults": [],
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "c"
                                                  },
                                                  "init": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "cm"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "get"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": "fontselect"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "fn"
                                                  },
                                                  "init": null
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "c"
                                                },
                                                "right": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "n"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "style"
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "LogicalExpression",
                                                      "operator": "&&",
                                                      "left": {
                                                        "type": "UnaryExpression",
                                                        "operator": "!",
                                                        "argument": {
                                                          "type": "Identifier",
                                                          "name": "fn"
                                                        },
                                                        "prefix": true
                                                      },
                                                      "right": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "n"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "style"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "fontFamily"
                                                        }
                                                      }
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "fn"
                                                            },
                                                            "right": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "CallExpression",
                                                                  "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": false,
                                                                    "object": {
                                                                      "type": "CallExpression",
                                                                      "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": false,
                                                                        "object": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": false,
                                                                            "object": {
                                                                              "type": "Identifier",
                                                                              "name": "n"
                                                                            },
                                                                            "property": {
                                                                              "type": "Identifier",
                                                                              "name": "style"
                                                                            }
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "fontFamily"
                                                                          }
                                                                        },
                                                                        "property": {
                                                                          "type": "Identifier",
                                                                          "name": "replace"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "type": "Literal",
                                                                          "value": {}
                                                                        },
                                                                        {
                                                                          "type": "Literal",
                                                                          "value": ""
                                                                        }
                                                                      ]
                                                                    },
                                                                    "property": {
                                                                      "type": "Identifier",
                                                                      "name": "replace"
                                                                    }
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "type": "Literal",
                                                                      "value": {}
                                                                    },
                                                                    {
                                                                      "type": "Literal",
                                                                      "value": "$1"
                                                                    }
                                                                  ]
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "toLowerCase"
                                                                }
                                                              },
                                                              "arguments": []
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "c"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "select"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "FunctionExpression",
                                                          "id": null,
                                                          "params": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "v"
                                                            }
                                                          ],
                                                          "defaults": [],
                                                          "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                              {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "==",
                                                                  "left": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "CallExpression",
                                                                        "callee": {
                                                                          "type": "MemberExpression",
                                                                          "computed": false,
                                                                          "object": {
                                                                            "type": "Identifier",
                                                                            "name": "v"
                                                                          },
                                                                          "property": {
                                                                            "type": "Identifier",
                                                                            "name": "replace"
                                                                          }
                                                                        },
                                                                        "arguments": [
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": {}
                                                                          },
                                                                          {
                                                                            "type": "Literal",
                                                                            "value": "$1"
                                                                          }
                                                                        ]
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "toLowerCase"
                                                                      }
                                                                    },
                                                                    "arguments": []
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "fn"
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "rest": null,
                                                          "generator": false,
                                                          "expression": false
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        },
                                        "rest": null,
                                        "generator": false,
                                        "expression": false
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "createControl"
                          },
                          "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "n"
                              },
                              {
                                "type": "Identifier",
                                "name": "cf"
                              }
                            ],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "ed"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "editor"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "SwitchStatement",
                                  "discriminant": {
                                    "type": "Identifier",
                                    "name": "n"
                                  },
                                  "cases": [
                                    {
                                      "type": "SwitchCase",
                                      "test": {
                                        "type": "Literal",
                                        "value": "fontselect"
                                      },
                                      "consequent": [
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "ed"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "getParam"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "fontselect_fonts"
                                              }
                                            ]
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "ThisExpression"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "_createFontSelect"
                                                    }
                                                  },
                                                  "arguments": []
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        },
                                        {
                                          "type": "BreakStatement",
                                          "label": null
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          "kind": "init"
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "_createFontSelect"
                          },
                          "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "defaults": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "c"
                                      },
                                      "init": null
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "self"
                                      },
                                      "init": {
                                        "type": "ThisExpression"
                                      }
                                    },
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "ed"
                                      },
                                      "init": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "self"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "editor"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "var"
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "c"
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "ed"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "controlManager"
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "createListBox"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Literal",
                                          "value": "fontselect"
                                        },
                                        {
                                          "type": "ObjectExpression",
                                          "properties": [
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "title"
                                              },
                                              "value": {
                                                "type": "Literal",
                                                "value": "advanced.fontdefault"
                                              },
                                              "kind": "init"
                                            },
                                            {
                                              "type": "Property",
                                              "key": {
                                                "type": "Identifier",
                                                "name": "onselect"
                                              },
                                              "value": {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "v"
                                                  }
                                                ],
                                                "defaults": [],
                                                "body": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "VariableDeclaration",
                                                      "declarations": [
                                                        {
                                                          "type": "VariableDeclarator",
                                                          "id": {
                                                            "type": "Identifier",
                                                            "name": "cur"
                                                          },
                                                          "init": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "c"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "items"
                                                              }
                                                            },
                                                            "property": {
                                                              "type": "MemberExpression",
                                                              "computed": false,
                                                              "object": {
                                                                "type": "Identifier",
                                                                "name": "c"
                                                              },
                                                              "property": {
                                                                "type": "Identifier",
                                                                "name": "selectedIndex"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ],
                                                      "kind": "var"
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                          "type": "UnaryExpression",
                                                          "operator": "!",
                                                          "argument": {
                                                            "type": "Identifier",
                                                            "name": "v"
                                                          },
                                                          "prefix": true
                                                        },
                                                        "right": {
                                                          "type": "Identifier",
                                                          "name": "cur"
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "ed"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "execCommand"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": "FontName"
                                                                },
                                                                {
                                                                  "type": "Literal",
                                                                  "value": false
                                                                },
                                                                {
                                                                  "type": "MemberExpression",
                                                                  "computed": false,
                                                                  "object": {
                                                                    "type": "Identifier",
                                                                    "name": "cur"
                                                                  },
                                                                  "property": {
                                                                    "type": "Identifier",
                                                                    "name": "value"
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "ReturnStatement",
                                                            "argument": null
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "ed"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "execCommand"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "Literal",
                                                            "value": "FontName"
                                                          },
                                                          {
                                                            "type": "Literal",
                                                            "value": false
                                                          },
                                                          {
                                                            "type": "Identifier",
                                                            "name": "v"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "c"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "select"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "FunctionExpression",
                                                            "id": null,
                                                            "params": [
                                                              {
                                                                "type": "Identifier",
                                                                "name": "sv"
                                                              }
                                                            ],
                                                            "defaults": [],
                                                            "body": {
                                                              "type": "BlockStatement",
                                                              "body": [
                                                                {
                                                                  "type": "ReturnStatement",
                                                                  "argument": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "==",
                                                                    "left": {
                                                                      "type": "Identifier",
                                                                      "name": "v"
                                                                    },
                                                                    "right": {
                                                                      "type": "Identifier",
                                                                      "name": "sv"
                                                                    }
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "rest": null,
                                                            "generator": false,
                                                            "expression": false
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "IfStatement",
                                                      "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                          "type": "Identifier",
                                                          "name": "cur"
                                                        },
                                                        "right": {
                                                          "type": "BinaryExpression",
                                                          "operator": "==",
                                                          "left": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "cur"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "value"
                                                            }
                                                          },
                                                          "right": {
                                                            "type": "Identifier",
                                                            "name": "v"
                                                          }
                                                        }
                                                      },
                                                      "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                          {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                              "type": "CallExpression",
                                                              "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": false,
                                                                "object": {
                                                                  "type": "Identifier",
                                                                  "name": "c"
                                                                },
                                                                "property": {
                                                                  "type": "Identifier",
                                                                  "name": "select"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "type": "Literal",
                                                                  "value": null
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "alternate": null
                                                    },
                                                    {
                                                      "type": "ReturnStatement",
                                                      "argument": {
                                                        "type": "Literal",
                                                        "value": false
                                                      }
                                                    }
                                                  ]
                                                },
                                                "rest": null,
                                                "generator": false,
                                                "expression": false
                                              },
                                              "kind": "init"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "c"
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "each"
                                          },
                                          "arguments": [
                                            {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "ed"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "getParam"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": "fontselect_fonts"
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": ""
                                                },
                                                {
                                                  "type": "Literal",
                                                  "value": "hash"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "FunctionExpression",
                                              "id": null,
                                              "params": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "v"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "k"
                                                }
                                              ],
                                              "defaults": [],
                                              "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "IfStatement",
                                                    "test": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Literal",
                                                          "value": {}
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "test"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "v"
                                                        }
                                                      ]
                                                    },
                                                    "consequent": {
                                                      "type": "BlockStatement",
                                                      "body": [
                                                        {
                                                          "type": "ExpressionStatement",
                                                          "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "v"
                                                            },
                                                            "right": {
                                                              "type": "BinaryExpression",
                                                              "operator": "+",
                                                              "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                  "type": "Literal",
                                                                  "value": "'"
                                                                },
                                                                "right": {
                                                                  "type": "Identifier",
                                                                  "name": "v"
                                                                }
                                                              },
                                                              "right": {
                                                                "type": "Literal",
                                                                "value": "'"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "alternate": null
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "c"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "add"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "CallExpression",
                                                          "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "ed"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "translate"
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "type": "Identifier",
                                                              "name": "k"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "Identifier",
                                                          "name": "v"
                                                        },
                                                        {
                                                          "type": "ObjectExpression",
                                                          "properties": [
                                                            {
                                                              "type": "Property",
                                                              "key": {
                                                                "type": "Identifier",
                                                                "name": "style"
                                                              },
                                                              "value": {
                                                                "type": "ConditionalExpression",
                                                                "test": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "==",
                                                                  "left": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                      "type": "MemberExpression",
                                                                      "computed": false,
                                                                      "object": {
                                                                        "type": "Identifier",
                                                                        "name": "v"
                                                                      },
                                                                      "property": {
                                                                        "type": "Identifier",
                                                                        "name": "indexOf"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "type": "Literal",
                                                                        "value": "dings"
                                                                      }
                                                                    ]
                                                                  },
                                                                  "right": {
                                                                    "type": "UnaryExpression",
                                                                    "operator": "-",
                                                                    "argument": {
                                                                      "type": "Literal",
                                                                      "value": 1
                                                                    },
                                                                    "prefix": true
                                                                  }
                                                                },
                                                                "consequent": {
                                                                  "type": "BinaryExpression",
                                                                  "operator": "+",
                                                                  "left": {
                                                                    "type": "Literal",
                                                                    "value": "font-family:"
                                                                  },
                                                                  "right": {
                                                                    "type": "Identifier",
                                                                    "name": "v"
                                                                  }
                                                                },
                                                                "alternate": {
                                                                  "type": "Literal",
                                                                  "value": ""
                                                                }
                                                              },
                                                              "kind": "init"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "rest": null,
                                              "generator": false,
                                              "expression": false
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "c"
                                  }
                                }
                              ]
                            },
                            "rest": null,
                            "generator": false,
                            "expression": false
                          },
                          "kind": "init"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "tinymce"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "PluginManager"
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "add"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "fontselect"
                    },
                    {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "tinymce"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "plugins"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "FontSelectPlugin"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "rest": null,
          "generator": false,
          "expression": false
        },
        "arguments": []
      }
    }
  ]
}