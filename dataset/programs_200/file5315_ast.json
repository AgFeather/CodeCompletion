{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "ace"
          },
          "property": {
            "type": "Identifier",
            "name": "define"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "ace/mode/pascal"
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "require"
              },
              {
                "type": "Literal",
                "value": "exports"
              },
              {
                "type": "Literal",
                "value": "module"
              },
              {
                "type": "Literal",
                "value": "ace/lib/oop"
              },
              {
                "type": "Literal",
                "value": "ace/mode/text"
              },
              {
                "type": "Literal",
                "value": "ace/tokenizer"
              },
              {
                "type": "Literal",
                "value": "ace/mode/pascal_highlight_rules"
              },
              {
                "type": "Literal",
                "value": "ace/mode/folding/coffee"
              }
            ]
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "require"
              },
              {
                "type": "Identifier",
                "name": "exports"
              },
              {
                "type": "Identifier",
                "name": "module"
              }
            ],
            "defaults": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "oop"
                      },
                      "init": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "require"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "../lib/oop"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "TextMode"
                      },
                      "init": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "require"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "./text"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "Mode"
                        }
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "Tokenizer"
                      },
                      "init": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "require"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "../tokenizer"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "Tokenizer"
                        }
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "PascalHighlightRules"
                      },
                      "init": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "require"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "./pascal_highlight_rules"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "PascalHighlightRules"
                        }
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "FoldMode"
                      },
                      "init": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "require"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "./folding/coffee"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "FoldMode"
                        }
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "Mode"
                      },
                      "init": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "defaults": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "HighlightRules"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "PascalHighlightRules"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "foldingRules"
                                  }
                                },
                                "right": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "FoldMode"
                                  },
                                  "arguments": []
                                }
                              }
                            }
                          ]
                        },
                        "rest": null,
                        "generator": false,
                        "expression": false
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "oop"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "inherits"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "Mode"
                      },
                      {
                        "type": "Identifier",
                        "name": "TextMode"
                      }
                    ]
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "defaults": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "lineCommentStart"
                                  }
                                },
                                "right": {
                                  "type": "ArrayExpression",
                                  "elements": [
                                    {
                                      "type": "Literal",
                                      "value": "--"
                                    },
                                    {
                                      "type": "Literal",
                                      "value": "//"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "blockComment"
                                  }
                                },
                                "right": {
                                  "type": "ArrayExpression",
                                  "elements": [
                                    {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "start"
                                          },
                                          "value": {
                                            "type": "Literal",
                                            "value": "(*"
                                          },
                                          "kind": "init"
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "end"
                                          },
                                          "value": {
                                            "type": "Literal",
                                            "value": "*)"
                                          },
                                          "kind": "init"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "ObjectExpression",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "start"
                                          },
                                          "value": {
                                            "type": "Literal",
                                            "value": "{"
                                          },
                                          "kind": "init"
                                        },
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "end"
                                          },
                                          "value": {
                                            "type": "Literal",
                                            "value": "}"
                                          },
                                          "kind": "init"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "$id"
                                  }
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "ace/mode/pascal"
                                }
                              }
                            }
                          ]
                        },
                        "rest": null,
                        "generator": false,
                        "expression": false
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call"
                      }
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Mode"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "exports"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "Mode"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "Mode"
                    }
                  }
                }
              ]
            },
            "rest": null,
            "generator": false,
            "expression": false
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "ace"
          },
          "property": {
            "type": "Identifier",
            "name": "define"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "ace/mode/pascal_highlight_rules"
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "require"
              },
              {
                "type": "Literal",
                "value": "exports"
              },
              {
                "type": "Literal",
                "value": "module"
              },
              {
                "type": "Literal",
                "value": "ace/lib/oop"
              },
              {
                "type": "Literal",
                "value": "ace/mode/text_highlight_rules"
              }
            ]
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "require"
              },
              {
                "type": "Identifier",
                "name": "exports"
              },
              {
                "type": "Identifier",
                "name": "module"
              }
            ],
            "defaults": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "oop"
                      },
                      "init": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "require"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "../lib/oop"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "TextHighlightRules"
                      },
                      "init": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "require"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "./text_highlight_rules"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "TextHighlightRules"
                        }
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "PascalHighlightRules"
                      },
                      "init": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "defaults": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "$rules"
                                  }
                                },
                                "right": {
                                  "type": "ObjectExpression",
                                  "properties": [
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "start"
                                      },
                                      "value": {
                                        "type": "ArrayExpression",
                                        "elements": [
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "caseInsensitive"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": true
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "keyword.control.pascal"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "\\b(?:(absolute|abstract|all|and|and_then|array|as|asm|attribute|begin|bindable|case|class|const|constructor|destructor|div|do|do|else|end|except|export|exports|external|far|file|finalization|finally|for|forward|goto|if|implementation|import|in|inherited|initialization|interface|interrupt|is|label|library|mod|module|name|near|nil|not|object|of|only|operator|or|or_else|otherwise|packed|pow|private|program|property|protected|public|published|qualified|record|repeat|resident|restricted|segment|set|shl|shr|then|to|try|type|unit|until|uses|value|var|view|virtual|while|with|xor))\\b"
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "caseInsensitive"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": true
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "variable.pascal"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "text"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "storage.type.prototype.pascal"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "entity.name.function.prototype.pascal"
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "\\b(function|procedure)(\\s+)(\\w+)(\\.\\w+)?(?=(?:\\(.*?\\))?;\\s*(?:attribute|forward|external))"
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "caseInsensitive"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": true
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "Literal",
                                                      "value": "variable.pascal"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "text"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "storage.type.function.pascal"
                                                    },
                                                    {
                                                      "type": "Literal",
                                                      "value": "entity.name.function.pascal"
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "\\b(function|procedure)(\\s+)(\\w+)(\\.\\w+)?"
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "constant.numeric.pascal"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "punctuation.definition.comment.pascal"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "--.*$"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "push_"
                                                },
                                                "value": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "token"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "comment.line.double-dash.pascal.one"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "$"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "next"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "pop"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "defaultToken"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "comment.line.double-dash.pascal.one"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "punctuation.definition.comment.pascal"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "//.*$"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "push_"
                                                },
                                                "value": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "token"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "comment.line.double-slash.pascal.two"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "$"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "next"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "pop"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "defaultToken"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "comment.line.double-slash.pascal.two"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "punctuation.definition.comment.pascal"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "\\(\\*"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "push"
                                                },
                                                "value": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "token"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "punctuation.definition.comment.pascal"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "\\*\\)"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "next"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "pop"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "defaultToken"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "comment.block.pascal.one"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "punctuation.definition.comment.pascal"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "\\{"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "push"
                                                },
                                                "value": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "token"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "punctuation.definition.comment.pascal"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "\\}"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "next"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "pop"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "defaultToken"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "comment.block.pascal.two"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "punctuation.definition.string.begin.pascal"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "\""
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "push"
                                                },
                                                "value": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "token"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "constant.character.escape.pascal"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "\\\\."
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "token"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "punctuation.definition.string.end.pascal"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "\""
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "next"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "pop"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "defaultToken"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "string.quoted.double.pascal"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "punctuation.definition.string.begin.pascal"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "'"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "push"
                                                },
                                                "value": {
                                                  "type": "ArrayExpression",
                                                  "elements": [
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "token"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "constant.character.escape.apostrophe.pascal"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "''"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "token"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "punctuation.definition.string.end.pascal"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "regex"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "'"
                                                          },
                                                          "kind": "init"
                                                        },
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "next"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "pop"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "ObjectExpression",
                                                      "properties": [
                                                        {
                                                          "type": "Property",
                                                          "key": {
                                                            "type": "Identifier",
                                                            "name": "defaultToken"
                                                          },
                                                          "value": {
                                                            "type": "Literal",
                                                            "value": "string.quoted.single.pascal"
                                                          },
                                                          "kind": "init"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "token"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "keyword.operator"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "regex"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "[+\\-;,/*%]|:=|="
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "kind": "init"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "normalizeRules"
                                  }
                                },
                                "arguments": []
                              }
                            }
                          ]
                        },
                        "rest": null,
                        "generator": false,
                        "expression": false
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "oop"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "inherits"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "PascalHighlightRules"
                      },
                      {
                        "type": "Identifier",
                        "name": "TextHighlightRules"
                      }
                    ]
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "exports"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "PascalHighlightRules"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "PascalHighlightRules"
                    }
                  }
                }
              ]
            },
            "rest": null,
            "generator": false,
            "expression": false
          }
        ]
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "ace"
          },
          "property": {
            "type": "Identifier",
            "name": "define"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "ace/mode/folding/coffee"
          },
          {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "require"
              },
              {
                "type": "Literal",
                "value": "exports"
              },
              {
                "type": "Literal",
                "value": "module"
              },
              {
                "type": "Literal",
                "value": "ace/lib/oop"
              },
              {
                "type": "Literal",
                "value": "ace/mode/folding/fold_mode"
              },
              {
                "type": "Literal",
                "value": "ace/range"
              }
            ]
          },
          {
            "type": "FunctionExpression",
            "id": null,
            "params": [
              {
                "type": "Identifier",
                "name": "require"
              },
              {
                "type": "Identifier",
                "name": "exports"
              },
              {
                "type": "Identifier",
                "name": "module"
              }
            ],
            "defaults": [],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "oop"
                      },
                      "init": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "require"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "../../lib/oop"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "BaseFoldMode"
                      },
                      "init": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "require"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "./fold_mode"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "FoldMode"
                        }
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "Range"
                      },
                      "init": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "require"
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": "../../range"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "Range"
                        }
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "FoldMode"
                      },
                      "init": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "exports"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "FoldMode"
                          }
                        },
                        "right": {
                          "type": "FunctionExpression",
                          "id": null,
                          "params": [],
                          "defaults": [],
                          "body": {
                            "type": "BlockStatement",
                            "body": []
                          },
                          "rest": null,
                          "generator": false,
                          "expression": false
                        }
                      }
                    }
                  ],
                  "kind": "var"
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "oop"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "inherits"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "FoldMode"
                      },
                      {
                        "type": "Identifier",
                        "name": "BaseFoldMode"
                      }
                    ]
                  }
                },
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "defaults": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "getFoldWidgetRange"
                                  }
                                },
                                "right": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "Identifier",
                                      "name": "session"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "foldStyle"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "row"
                                    }
                                  ],
                                  "defaults": [],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "range"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "ThisExpression"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "indentationBlock"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "session"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "row"
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "range"
                                        },
                                        "consequent": {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "range"
                                          }
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "re"
                                            },
                                            "init": {
                                              "type": "Literal",
                                              "value": {}
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "line"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "session"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "getLine"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "row"
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "startLevel"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "line"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "search"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "re"
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "LogicalExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "==",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "startLevel"
                                            },
                                            "right": {
                                              "type": "UnaryExpression",
                                              "operator": "-",
                                              "argument": {
                                                "type": "Literal",
                                                "value": 1
                                              },
                                              "prefix": true
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "!=",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "line"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "startLevel"
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "#"
                                            }
                                          }
                                        },
                                        "consequent": {
                                          "type": "ReturnStatement",
                                          "argument": null
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "startColumn"
                                            },
                                            "init": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "line"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "length"
                                              }
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "maxRow"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "session"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "getLength"
                                                }
                                              },
                                              "arguments": []
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "startRow"
                                            },
                                            "init": {
                                              "type": "Identifier",
                                              "name": "row"
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "endRow"
                                            },
                                            "init": {
                                              "type": "Identifier",
                                              "name": "row"
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "WhileStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "UpdateExpression",
                                            "operator": "++",
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "row"
                                            },
                                            "prefix": true
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "maxRow"
                                          }
                                        },
                                        "body": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "line"
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "session"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "getLine"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "row"
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "level"
                                                  },
                                                  "init": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "line"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "search"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Identifier",
                                                        "name": "re"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "BinaryExpression",
                                                "operator": "==",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "level"
                                                },
                                                "right": {
                                                  "type": "UnaryExpression",
                                                  "operator": "-",
                                                  "argument": {
                                                    "type": "Literal",
                                                    "value": 1
                                                  },
                                                  "prefix": true
                                                }
                                              },
                                              "consequent": {
                                                "type": "ContinueStatement",
                                                "label": null
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "BinaryExpression",
                                                "operator": "!=",
                                                "left": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "line"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "level"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "#"
                                                }
                                              },
                                              "consequent": {
                                                "type": "BreakStatement",
                                                "label": null
                                              },
                                              "alternate": null
                                            },
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "endRow"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "row"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": ">",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "endRow"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "startRow"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "VariableDeclaration",
                                              "declarations": [
                                                {
                                                  "type": "VariableDeclarator",
                                                  "id": {
                                                    "type": "Identifier",
                                                    "name": "endColumn"
                                                  },
                                                  "init": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "CallExpression",
                                                      "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": false,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "session"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "getLine"
                                                        }
                                                      },
                                                      "arguments": [
                                                        {
                                                          "type": "Identifier",
                                                          "name": "endRow"
                                                        }
                                                      ]
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "length"
                                                    }
                                                  }
                                                }
                                              ],
                                              "kind": "var"
                                            },
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "NewExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "Range"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "startRow"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "startColumn"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "endRow"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "endColumn"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    ]
                                  },
                                  "rest": null,
                                  "generator": false,
                                  "expression": false
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "getFoldWidget"
                                  }
                                },
                                "right": {
                                  "type": "FunctionExpression",
                                  "id": null,
                                  "params": [
                                    {
                                      "type": "Identifier",
                                      "name": "session"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "foldStyle"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "row"
                                    }
                                  ],
                                  "defaults": [],
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "line"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "session"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "getLine"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "row"
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "indent"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "line"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "search"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": {}
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "next"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "session"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "getLine"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "+",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "row"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": 1
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "prev"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "session"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "getLine"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "BinaryExpression",
                                                  "operator": "-",
                                                  "left": {
                                                    "type": "Identifier",
                                                    "name": "row"
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": 1
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "prevIndent"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "prev"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "search"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": {}
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "nextIndent"
                                            },
                                            "init": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "next"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "search"
                                                }
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Literal",
                                                  "value": {}
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "kind": "var"
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "==",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "indent"
                                          },
                                          "right": {
                                            "type": "UnaryExpression",
                                            "operator": "-",
                                            "argument": {
                                              "type": "Literal",
                                              "value": 1
                                            },
                                            "prefix": true
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "session"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "foldWidgets"
                                                    }
                                                  },
                                                  "property": {
                                                    "type": "BinaryExpression",
                                                    "operator": "-",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "row"
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": 1
                                                    }
                                                  }
                                                },
                                                "right": {
                                                  "type": "ConditionalExpression",
                                                  "test": {
                                                    "type": "LogicalExpression",
                                                    "operator": "&&",
                                                    "left": {
                                                      "type": "BinaryExpression",
                                                      "operator": "!=",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "prevIndent"
                                                      },
                                                      "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "-",
                                                        "argument": {
                                                          "type": "Literal",
                                                          "value": 1
                                                        },
                                                        "prefix": true
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "BinaryExpression",
                                                      "operator": "<",
                                                      "left": {
                                                        "type": "Identifier",
                                                        "name": "prevIndent"
                                                      },
                                                      "right": {
                                                        "type": "Identifier",
                                                        "name": "nextIndent"
                                                      }
                                                    }
                                                  },
                                                  "consequent": {
                                                    "type": "Literal",
                                                    "value": "start"
                                                  },
                                                  "alternate": {
                                                    "type": "Literal",
                                                    "value": ""
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "ReturnStatement",
                                              "argument": {
                                                "type": "Literal",
                                                "value": ""
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "==",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "prevIndent"
                                          },
                                          "right": {
                                            "type": "UnaryExpression",
                                            "operator": "-",
                                            "argument": {
                                              "type": "Literal",
                                              "value": 1
                                            },
                                            "prefix": true
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "IfStatement",
                                              "test": {
                                                "type": "LogicalExpression",
                                                "operator": "&&",
                                                "left": {
                                                  "type": "LogicalExpression",
                                                  "operator": "&&",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "==",
                                                    "left": {
                                                      "type": "Identifier",
                                                      "name": "indent"
                                                    },
                                                    "right": {
                                                      "type": "Identifier",
                                                      "name": "nextIndent"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "==",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "line"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "indent"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "Literal",
                                                      "value": "#"
                                                    }
                                                  }
                                                },
                                                "right": {
                                                  "type": "BinaryExpression",
                                                  "operator": "==",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "next"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "indent"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": "#"
                                                  }
                                                }
                                              },
                                              "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "session"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "foldWidgets"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "BinaryExpression",
                                                          "operator": "-",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "row"
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": 1
                                                          }
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": ""
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "session"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "foldWidgets"
                                                          }
                                                        },
                                                        "property": {
                                                          "type": "BinaryExpression",
                                                          "operator": "+",
                                                          "left": {
                                                            "type": "Identifier",
                                                            "name": "row"
                                                          },
                                                          "right": {
                                                            "type": "Literal",
                                                            "value": 1
                                                          }
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": ""
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                      "type": "Literal",
                                                      "value": "start"
                                                    }
                                                  }
                                                ]
                                              },
                                              "alternate": null
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "LogicalExpression",
                                              "operator": "&&",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "==",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "prevIndent"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "indent"
                                                }
                                              },
                                              "right": {
                                                "type": "BinaryExpression",
                                                "operator": "==",
                                                "left": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "line"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "indent"
                                                  }
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": "#"
                                                }
                                              }
                                            },
                                            "right": {
                                              "type": "BinaryExpression",
                                              "operator": "==",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "prev"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "indent"
                                                }
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "#"
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "IfStatement",
                                                "test": {
                                                  "type": "BinaryExpression",
                                                  "operator": "==",
                                                  "left": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                      "type": "MemberExpression",
                                                      "computed": false,
                                                      "object": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                          "type": "MemberExpression",
                                                          "computed": false,
                                                          "object": {
                                                            "type": "Identifier",
                                                            "name": "session"
                                                          },
                                                          "property": {
                                                            "type": "Identifier",
                                                            "name": "getLine"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "type": "BinaryExpression",
                                                            "operator": "-",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "row"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": 2
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "search"
                                                      }
                                                    },
                                                    "arguments": [
                                                      {
                                                        "type": "Literal",
                                                        "value": {}
                                                      }
                                                    ]
                                                  },
                                                  "right": {
                                                    "type": "UnaryExpression",
                                                    "operator": "-",
                                                    "argument": {
                                                      "type": "Literal",
                                                      "value": 1
                                                    },
                                                    "prefix": true
                                                  }
                                                },
                                                "consequent": {
                                                  "type": "BlockStatement",
                                                  "body": [
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "MemberExpression",
                                                          "computed": true,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "session"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "foldWidgets"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "BinaryExpression",
                                                            "operator": "-",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "row"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": 1
                                                            }
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": "start"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ExpressionStatement",
                                                      "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                          "type": "MemberExpression",
                                                          "computed": true,
                                                          "object": {
                                                            "type": "MemberExpression",
                                                            "computed": false,
                                                            "object": {
                                                              "type": "Identifier",
                                                              "name": "session"
                                                            },
                                                            "property": {
                                                              "type": "Identifier",
                                                              "name": "foldWidgets"
                                                            }
                                                          },
                                                          "property": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                              "type": "Identifier",
                                                              "name": "row"
                                                            },
                                                            "right": {
                                                              "type": "Literal",
                                                              "value": 1
                                                            }
                                                          }
                                                        },
                                                        "right": {
                                                          "type": "Literal",
                                                          "value": ""
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "ReturnStatement",
                                                      "argument": {
                                                        "type": "Literal",
                                                        "value": ""
                                                      }
                                                    }
                                                  ]
                                                },
                                                "alternate": null
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "LogicalExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "!=",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "prevIndent"
                                            },
                                            "right": {
                                              "type": "UnaryExpression",
                                              "operator": "-",
                                              "argument": {
                                                "type": "Literal",
                                                "value": 1
                                              },
                                              "prefix": true
                                            }
                                          },
                                          "right": {
                                            "type": "BinaryExpression",
                                            "operator": "<",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "prevIndent"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "indent"
                                            }
                                          }
                                        },
                                        "consequent": {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "session"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "foldWidgets"
                                                }
                                              },
                                              "property": {
                                                "type": "BinaryExpression",
                                                "operator": "-",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "row"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": 1
                                                }
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": "start"
                                            }
                                          }
                                        },
                                        "alternate": {
                                          "type": "ExpressionStatement",
                                          "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "session"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "foldWidgets"
                                                }
                                              },
                                              "property": {
                                                "type": "BinaryExpression",
                                                "operator": "-",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "row"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": 1
                                                }
                                              }
                                            },
                                            "right": {
                                              "type": "Literal",
                                              "value": ""
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "indent"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "nextIndent"
                                          }
                                        },
                                        "consequent": {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "Literal",
                                            "value": "start"
                                          }
                                        },
                                        "alternate": {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "Literal",
                                            "value": ""
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "rest": null,
                                  "generator": false,
                                  "expression": false
                                }
                              }
                            }
                          ]
                        },
                        "rest": null,
                        "generator": false,
                        "expression": false
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call"
                      }
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "FoldMode"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "rest": null,
            "generator": false,
            "expression": false
          }
        ]
      }
    }
  ]
}