{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "label"
          },
          "init": {
            "type": "Literal",
            "value": "Aquarius Party Pack Taster"
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "version"
          },
          "init": {
            "type": "Literal",
            "value": "1353015802"
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "name_single"
          },
          "init": {
            "type": "Literal",
            "value": "Aquarius Party Pack Taster"
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "name_plural"
          },
          "init": {
            "type": "Literal",
            "value": "Aquarius Party Pack Taster"
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "article"
          },
          "init": {
            "type": "Literal",
            "value": "an"
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "description"
          },
          "init": {
            "type": "Literal",
            "value": "Swim, float & drift your way around this quoin-laden party space. And, remember â€¦ quoining is always more fun with friends!"
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "is_hidden"
          },
          "init": {
            "type": "Literal",
            "value": false
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "has_info"
          },
          "init": {
            "type": "Literal",
            "value": true
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "has_infopage"
          },
          "init": {
            "type": "Literal",
            "value": true
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "proxy_item"
          },
          "init": {
            "type": "Literal",
            "value": null
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "is_routable"
          },
          "init": {
            "type": "Literal",
            "value": false
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "adjusted_scale"
          },
          "init": {
            "type": "Literal",
            "value": 1
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "stackmax"
          },
          "init": {
            "type": "Literal",
            "value": 1
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "base_cost"
          },
          "init": {
            "type": "Literal",
            "value": 200
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "input_for"
          },
          "init": {
            "type": "ArrayExpression",
            "elements": []
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "parent_classes"
          },
          "init": {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "party_pack_taster_aquarius"
              },
              {
                "type": "Literal",
                "value": "party_pack_aquarius"
              },
              {
                "type": "Literal",
                "value": "party_pack"
              },
              {
                "type": "Literal",
                "value": "takeable"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "has_instance_props"
          },
          "init": {
            "type": "Literal",
            "value": false
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "classProps"
          },
          "init": {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": "collection_id"
                },
                "value": {
                  "type": "Literal",
                  "value": ""
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Literal",
                  "value": "party_id"
                },
                "value": {
                  "type": "Literal",
                  "value": "aquarius"
                },
                "kind": "init"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "instancePropsDef"
          },
          "init": {
            "type": "ObjectExpression",
            "properties": []
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "verbs"
          },
          "init": {
            "type": "ObjectExpression",
            "properties": []
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "verbs"
          },
          "property": {
            "type": "Identifier",
            "name": "pickup"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "name"
              },
              "value": {
                "type": "Literal",
                "value": "pick up"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "ok_states"
              },
              "value": {
                "type": "ArrayExpression",
                "elements": [
                  {
                    "type": "Literal",
                    "value": "in_location"
                  }
                ]
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "requires_target_pc"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "requires_target_item"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "include_target_items_from_location"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_default"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_emote"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "sort_on"
              },
              "value": {
                "type": "Literal",
                "value": 50
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "tooltip"
              },
              "value": {
                "type": "Literal",
                "value": "Put it in your pack"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_drop_target"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "proximity_override"
              },
              "value": {
                "type": "Literal",
                "value": 800
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "conditions"
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pc"
                  },
                  {
                    "type": "Identifier",
                    "name": "drop_stack"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "takeable_pickup_conditions"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "pc"
                          },
                          {
                            "type": "Identifier",
                            "name": "drop_stack"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "handler"
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pc"
                  },
                  {
                    "type": "Identifier",
                    "name": "msg"
                  },
                  {
                    "type": "Identifier",
                    "name": "suppress_activity"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "takeable_pickup"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "pc"
                          },
                          {
                            "type": "Identifier",
                            "name": "msg"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "verbs"
          },
          "property": {
            "type": "Identifier",
            "name": "give"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "name"
              },
              "value": {
                "type": "Literal",
                "value": "give"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "ok_states"
              },
              "value": {
                "type": "ArrayExpression",
                "elements": [
                  {
                    "type": "Literal",
                    "value": "in_pack"
                  }
                ]
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "requires_target_pc"
              },
              "value": {
                "type": "Literal",
                "value": true
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "requires_target_item"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "include_target_items_from_location"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_default"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_emote"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "sort_on"
              },
              "value": {
                "type": "Literal",
                "value": 51
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "tooltip"
              },
              "value": {
                "type": "Literal",
                "value": "Or, drag item to player"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_drop_target"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "conditions"
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pc"
                  },
                  {
                    "type": "Identifier",
                    "name": "drop_stack"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "takeable_give_conditions"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "pc"
                          },
                          {
                            "type": "Identifier",
                            "name": "drop_stack"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "handler"
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pc"
                  },
                  {
                    "type": "Identifier",
                    "name": "msg"
                  },
                  {
                    "type": "Identifier",
                    "name": "suppress_activity"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "takeable_give"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "pc"
                          },
                          {
                            "type": "Identifier",
                            "name": "msg"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "verbs"
          },
          "property": {
            "type": "Identifier",
            "name": "drop"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "name"
              },
              "value": {
                "type": "Literal",
                "value": "drop"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "ok_states"
              },
              "value": {
                "type": "ArrayExpression",
                "elements": [
                  {
                    "type": "Literal",
                    "value": "in_pack"
                  }
                ]
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "requires_target_pc"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "requires_target_item"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "include_target_items_from_location"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_default"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_emote"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "sort_on"
              },
              "value": {
                "type": "Literal",
                "value": 52
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "tooltip"
              },
              "value": {
                "type": "Literal",
                "value": "Drop it on the ground"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_drop_target"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "conditions"
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pc"
                  },
                  {
                    "type": "Identifier",
                    "name": "drop_stack"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "takeable_drop_conditions"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "pc"
                          },
                          {
                            "type": "Identifier",
                            "name": "drop_stack"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "handler"
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pc"
                  },
                  {
                    "type": "Identifier",
                    "name": "msg"
                  },
                  {
                    "type": "Identifier",
                    "name": "suppress_activity"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "takeable_drop"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "pc"
                          },
                          {
                            "type": "Identifier",
                            "name": "msg"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "verbs"
          },
          "property": {
            "type": "Identifier",
            "name": "activate"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "name"
              },
              "value": {
                "type": "Literal",
                "value": "activate"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "ok_states"
              },
              "value": {
                "type": "ArrayExpression",
                "elements": [
                  {
                    "type": "Literal",
                    "value": "in_pack"
                  }
                ]
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "requires_target_pc"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "requires_target_item"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "include_target_items_from_location"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_default"
              },
              "value": {
                "type": "Literal",
                "value": true
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_emote"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "sort_on"
              },
              "value": {
                "type": "Literal",
                "value": 53
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "tooltip"
              },
              "value": {
                "type": "Literal",
                "value": "Start party. GOOD NEWS: permit requirements temporarily lifted for parties"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "is_drop_target"
              },
              "value": {
                "type": "Literal",
                "value": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "conditions"
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pc"
                  },
                  {
                    "type": "Identifier",
                    "name": "drop_stack"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "pc"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "party_has_space"
                          }
                        },
                        "arguments": []
                      },
                      "consequent": {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "state"
                              },
                              "value": {
                                "type": "Literal",
                                "value": "disabled"
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "reason"
                              },
                              "value": {
                                "type": "Literal",
                                "value": "Your party already has a Party Space going."
                              },
                              "kind": "init"
                            }
                          ]
                        }
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "instructions_read"
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "state"
                              },
                              "value": {
                                "type": "Literal",
                                "value": "enabled"
                              },
                              "kind": "init"
                            }
                          ]
                        }
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "pc"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "party_is_in"
                            }
                          },
                          "arguments": []
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "state"
                              },
                              "value": {
                                "type": "Literal",
                                "value": "disabled"
                              },
                              "kind": "init"
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Identifier",
                                "name": "reason"
                              },
                              "value": {
                                "type": "Literal",
                                "value": "You must be in a party to activate. Didn't you read the instructions?"
                              },
                              "kind": "init"
                            }
                          ]
                        }
                      },
                      "alternate": null
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ObjectExpression",
                        "properties": [
                          {
                            "type": "Property",
                            "key": {
                              "type": "Identifier",
                              "name": "state"
                            },
                            "value": {
                              "type": "Literal",
                              "value": "enabled"
                            },
                            "kind": "init"
                          }
                        ]
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "handler"
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pc"
                  },
                  {
                    "type": "Identifier",
                    "name": "msg"
                  },
                  {
                    "type": "Identifier",
                    "name": "suppress_activity"
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "failed"
                          },
                          "init": {
                            "type": "Literal",
                            "value": 0
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "orig_count"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "count"
                            }
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "self_msgs"
                          },
                          "init": {
                            "type": "ArrayExpression",
                            "elements": []
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "self_effects"
                          },
                          "init": {
                            "type": "ArrayExpression",
                            "elements": []
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "they_effects"
                          },
                          "init": {
                            "type": "ArrayExpression",
                            "elements": []
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "instructions_read"
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "can_activate"
                                },
                                "init": {
                                  "type": "LogicalExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "pc"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "party_has_space"
                                        }
                                      },
                                      "arguments": []
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "pc"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "party_is_in"
                                      }
                                    },
                                    "arguments": []
                                  }
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "pc"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "prompts_add"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "ObjectExpression",
                                  "properties": [
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "title"
                                      },
                                      "value": {
                                        "type": "Literal",
                                        "value": "PARTY SPACE ASSEMBLY INSTRUCTIONS"
                                      },
                                      "kind": "init"
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "txt"
                                      },
                                      "value": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                          "type": "BinaryExpression",
                                          "operator": "+",
                                          "left": {
                                            "type": "Literal",
                                            "value": "1. Assemble the desired group of party attendees by clicking on Glitches in person or in chat, and selecting \"Invite to Party\" to invite.\n\n2. Continue until your party has reached Maximum Fun Capacity Level. While waiting for party pack activation, the party chat channel can be used for smalltalk and metaphorical icebreaking. \n\n3. Once Party Participants are assembled, activate party pack. Do this by clicking 'Activate' on party pack. \n\n4. Every guest in party chat will be sent an offer to create a teleportation portal that will take them directly your private party space, regardless of their current location. Party Participants have a limited time to join, so ensure everyone is ready to party. \n\n5. PARTY HARD. \n\n<font size=\"10\">SMALL PRINT: \n* A single-activation party pack gives a party of limited duration. To extend party length, insert currants into the machine inside your private party space. CORRECT CURRANTS ONLY. NO CHANGE GIVEN. Parties limited to "
                                          },
                                          "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "config"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "max_party_size"
                                            }
                                          }
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": " participants.\n* Please note, due to physical funness capacity, individuals can only participate in one party at a time.\n* The giants and their representatives are not responsible for the level of fun experienced at parties. No refunds for bad parties.</font>"
                                        }
                                      },
                                      "kind": "init"
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "max_w"
                                      },
                                      "value": {
                                        "type": "Literal",
                                        "value": 550
                                      },
                                      "kind": "init"
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "is_modal"
                                      },
                                      "value": {
                                        "type": "Literal",
                                        "value": true
                                      },
                                      "kind": "init"
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "icon_buttons"
                                      },
                                      "value": {
                                        "type": "Literal",
                                        "value": false
                                      },
                                      "kind": "init"
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "choices"
                                      },
                                      "value": {
                                        "type": "ArrayExpression",
                                        "elements": [
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "value"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "ok"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "label"
                                                },
                                                "value": {
                                                  "type": "ConditionalExpression",
                                                  "test": {
                                                    "type": "Identifier",
                                                    "name": "can_activate"
                                                  },
                                                  "consequent": {
                                                    "type": "Literal",
                                                    "value": "Activate"
                                                  },
                                                  "alternate": {
                                                    "type": "Literal",
                                                    "value": "Understood"
                                                  }
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          },
                                          {
                                            "type": "ObjectExpression",
                                            "properties": [
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "value"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "cancel"
                                                },
                                                "kind": "init"
                                              },
                                              {
                                                "type": "Property",
                                                "key": {
                                                  "type": "Identifier",
                                                  "name": "label"
                                                },
                                                "value": {
                                                  "type": "Literal",
                                                  "value": "Nevermind"
                                                },
                                                "kind": "init"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "kind": "init"
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "callback"
                                      },
                                      "value": {
                                        "type": "Literal",
                                        "value": "prompts_itemstack_modal_callback"
                                      },
                                      "kind": "init"
                                    },
                                    {
                                      "type": "Property",
                                      "key": {
                                        "type": "Identifier",
                                        "name": "itemstack_tsid"
                                      },
                                      "value": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "tsid"
                                        }
                                      },
                                      "kind": "init"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "log"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "info"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "+",
                                  "left": {
                                    "type": "Literal",
                                    "value": "Activating party pack for "
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "pc"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "ret"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "activate"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "pc"
                                    }
                                  ]
                                }
                              }
                            ],
                            "kind": "var"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "ret"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "ok"
                                }
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "failed"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 1
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "self_msgs"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "push"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "ret"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "error"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      }
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "pre_msg"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "buildVerbMessage"
                              }
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "msg"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "count"
                                }
                              },
                              {
                                "type": "Literal",
                                "value": "activate"
                              },
                              {
                                "type": "Literal",
                                "value": "activated"
                              },
                              {
                                "type": "Identifier",
                                "name": "failed"
                              },
                              {
                                "type": "Identifier",
                                "name": "self_msgs"
                              },
                              {
                                "type": "Identifier",
                                "name": "self_effects"
                              },
                              {
                                "type": "Identifier",
                                "name": "they_effects"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "var"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "suppress_activity"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "pre_msg"
                        }
                      },
                      "consequent": {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "pc"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "sendActivity"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "pre_msg"
                            }
                          ]
                        }
                      },
                      "alternate": null
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "failed"
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": false
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": true
                        }
                      }
                    }
                  ]
                },
                "rest": null,
                "generator": false,
                "expression": false
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "activate"
      },
      "params": [
        {
          "type": "Identifier",
          "name": "pc"
        }
      ],
      "defaults": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "template"
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "getClassProp"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "party_id"
                    }
                  ]
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "UnaryExpression",
              "operator": "!",
              "argument": {
                "type": "Identifier",
                "name": "template"
              },
              "prefix": true
            },
            "consequent": {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "template"
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "choose_one"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "array_keys"
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "config"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "party_spaces"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "alternate": null
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "UnaryExpression",
              "operator": "!",
              "argument": {
                "type": "MemberExpression",
                "computed": true,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "config"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "party_spaces"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "template"
                }
              },
              "prefix": true
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "ok"
                        },
                        "value": {
                          "type": "Literal",
                          "value": 0
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Identifier",
                          "name": "error"
                        },
                        "value": {
                          "type": "Literal",
                          "value": "Bad template"
                        },
                        "kind": "init"
                      }
                    ]
                  }
                }
              ]
            },
            "alternate": null
          },
          {
            "type": "VariableDeclaration",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "duration"
                },
                "init": {
                  "type": "BinaryExpression",
                  "operator": "*",
                  "left": {
                    "type": "Literal",
                    "value": 60
                  },
                  "right": {
                    "type": "Literal",
                    "value": 60
                  }
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "BinaryExpression",
              "operator": "==",
              "left": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "class_tsid"
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "substring"
                  }
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": 0
                  },
                  {
                    "type": "Literal",
                    "value": 18
                  }
                ]
              },
              "right": {
                "type": "Literal",
                "value": "party_pack_taster_"
              }
            },
            "consequent": {
              "type": "ExpressionStatement",
              "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "Identifier",
                  "name": "duration"
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "*",
                  "left": {
                    "type": "Literal",
                    "value": 10
                  },
                  "right": {
                    "type": "Literal",
                    "value": 60
                  }
                }
              }
            },
            "alternate": null
          },
          {
            "type": "VariableDeclaration",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "ret"
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "pc"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "party_start_space"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "template"
                    },
                    {
                      "type": "Identifier",
                      "name": "duration"
                    }
                  ]
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "ret"
              },
              "property": {
                "type": "Identifier",
                "name": "ok"
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ThisExpression"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "apiDelete"
                      }
                    },
                    "arguments": []
                  }
                }
              ]
            },
            "alternate": null
          },
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "Identifier",
              "name": "ret"
            }
          }
        ]
      },
      "rest": null,
      "generator": false,
      "expression": false
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "modal_callback"
      },
      "params": [
        {
          "type": "Identifier",
          "name": "pc"
        },
        {
          "type": "Identifier",
          "name": "value"
        },
        {
          "type": "Identifier",
          "name": "details"
        }
      ],
      "defaults": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "log"
                },
                "property": {
                  "type": "Identifier",
                  "name": "info"
                }
              },
              "arguments": [
                {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "Party pack modal call back for "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "pc"
                  }
                }
              ]
            }
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "ThisExpression"
                },
                "property": {
                  "type": "Identifier",
                  "name": "instructions_read"
                }
              },
              "right": {
                "type": "Literal",
                "value": true
              }
            }
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "LogicalExpression",
              "operator": "&&",
              "left": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Literal",
                    "value": "ok"
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "pc"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "party_is_in"
                    }
                  },
                  "arguments": []
                }
              },
              "right": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "pc"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "party_has_space"
                    }
                  },
                  "arguments": []
                },
                "prefix": true
              }
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "ret"
                      },
                      "init": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "activate"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "pc"
                          }
                        ]
                      }
                    }
                  ],
                  "kind": "var"
                }
              ]
            },
            "alternate": null
          }
        ]
      },
      "rest": null,
      "generator": false,
      "expression": false
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "getDescExtras"
      },
      "params": [
        {
          "type": "Identifier",
          "name": "pc"
        }
      ],
      "defaults": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "out"
                },
                "init": {
                  "type": "ArrayExpression",
                  "elements": []
                }
              }
            ],
            "kind": "var"
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "out"
                },
                "property": {
                  "type": "Identifier",
                  "name": "push"
                }
              },
              "arguments": [
                {
                  "type": "ArrayExpression",
                  "elements": [
                    {
                      "type": "Literal",
                      "value": 2
                    },
                    {
                      "type": "Literal",
                      "value": "This can be purchased from a <a href=\"/items/1000008/\" glitch=\"item|npc_streetspirit_toys\">Toy Vendor</a>."
                    }
                  ]
                }
              ]
            }
          },
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "Identifier",
              "name": "out"
            }
          }
        ]
      },
      "rest": null,
      "generator": false,
      "expression": false
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "tags"
          },
          "init": {
            "type": "ArrayExpression",
            "elements": [
              {
                "type": "Literal",
                "value": "no_rube"
              },
              {
                "type": "Literal",
                "value": "party"
              },
              {
                "type": "Literal",
                "value": "pack"
              },
              {
                "type": "Literal",
                "value": "toys"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "getAssetInfo"
      },
      "params": [],
      "defaults": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "ObjectExpression",
              "properties": [
                {
                  "type": "Property",
                  "key": {
                    "type": "Literal",
                    "value": "position"
                  },
                  "value": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "x"
                        },
                        "value": {
                          "type": "UnaryExpression",
                          "operator": "-",
                          "argument": {
                            "type": "Literal",
                            "value": 30
                          },
                          "prefix": true
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "y"
                        },
                        "value": {
                          "type": "UnaryExpression",
                          "operator": "-",
                          "argument": {
                            "type": "Literal",
                            "value": 35
                          },
                          "prefix": true
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "w"
                        },
                        "value": {
                          "type": "Literal",
                          "value": 60
                        },
                        "kind": "init"
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "h"
                        },
                        "value": {
                          "type": "Literal",
                          "value": 36
                        },
                        "kind": "init"
                      }
                    ]
                  },
                  "kind": "init"
                },
                {
                  "type": "Property",
                  "key": {
                    "type": "Literal",
                    "value": "thumb"
                  },
                  "value": {
                    "type": "Literal",
                    "value": "iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAALN0lEQVR42u2XaXNb1RnH/Q36EfgG\n5QVtQmoTJ94Xed9kS94tS7KsXVfrle6VZG3W4n3Da+I4sXHsBNtJSEhycaCEkJUtiRNKphQCnTJN\ngUJZOv33udckhEI7neENL3xmnrnSOUf3/M7/Wc5RWtpO22k7baf98prOeu4JrflMpkp/MlOlPZnZ\nql3LvHnzXubq2rXMxMCmMZYUuDbN81xH1zo3O3+J29q6x+ks5/pc/CvChVfuCDduvCccX9sSPME3\nBS5yW+Cj31lkq88fvW30997N7Em894S0WHmlrq+ukRcaNc8JLvrBw8niD+kFOLBwE+/eeR9DY1dA\ni2Bp+RquXd3CseNXkBo8h+WV1zA8dhYbJ67QnJewfuI6nN41lDeOw+Q9Agu3hED/CfiSp9DJHEVs\nZB29oycQHzuJvsnTmFg4ByO/CqP3KNkKjL4VuELH4O9dBB85hLTdGUZhV7oBuUVGdDtWoGePQk+T\npSe7jG7Pc9A4FtGqPoiajgGomUmo7VOI0AKitetH0aBJQqFJQanrR7NuAM2GQRjMUzDZZmCxz2Fo\n4jTs7gW4CNhDwL7AMtnR72wFbt8Cjc+AC66C7zmGAdrQ7MQKkrFxpBWU2ASCxK50PZo1Myguc6Os\nhkOtMoTyal6yqroASiucKK10oKzKiRq5HxrDCLqMY6iscaCqxo6W9hRU2hHUK1iQV2Cx9UBnCECr\nF2GTCEWGcPjIMpaPLkLXzWFldQn+YL8EvHDkMN659SqMlrAEmEhuYGFmYxuQ5XkhngrAbGMlwMIS\nF+SNYVQ39KCi1o+F1UtQtAQwNT2ElzZXsHlhFUPDKRQU6yBXRnBgfgJ3330ZFdUM2tSDcLrD+PsX\nN/H2OwL+8skbsDI9BBjGV1/fxdff/AF37l5ESxtLIXEUn32+BcYRxudf3MXmy6ceqRhPrmP50Jlt\nwD2ZNkGudKGpzYlm7SwKZE4UFOlRWaGATEaqdiRRWuXB5NQgLl85gdq6VtzeEsD5QyipYHDt+ml8\neP8SVGqG5vahrMIoAdqdQVJigECWoGzh4fFuQ/qDSXL9NLr0fbj42hl8/Oc38S/8CS5PErHUBiYP\nXMDg0CmsHjm/DZi+zyHUN7rg9HBo0c5RLDqQX2iCzlaOooI2cjkLWYUPyb4obt0+i2cyG9E/EMfA\nYIJcqcffPr0Br8+HuYPjkvJllWZS5m1YrF5SegivXTqJlo4YWC6OL/+xBS6QgpmZg9U5j06NF9/+\n8x7OCxuwOiYRjq0R4CbGx174HpBx8kKV3E1gDEprYsgpZFBWzkCjV6K+pQ0mxxTFpB+JVAR/fXAV\nKQn0HMKRMLnPiw8+vIir107h9p2XICsz0YaMBPiWZB99fBWhcBjtmiF42Bi++PI2+gfHYLDMwGid\ngpcL4Ztv34PZ7IXF6AfLbyfP+OhjgCUVrBCOBUklhwSYVcBQEuhgdMnQ1NEERWsvCko9FBdh/PH9\nV7BweJzcxCF9r4LcPkSw56XYFEGbW00olHXj08/epBDw4/5Hl1Fbb0WHZoRiMyK5fmZ2AjrTFJpa\nWFy5+iJeOLMKtYrBxPTzGBw/Qxm9hKV5AcsLL24DZmSzgtXBk/T+bcA8GxSNGuidxaiWy5FX5EK+\nzI14IoSz5xaxa08d9VmRndeN1y+vw+Gi8SKDlEQzsyPIym0nt78BtcZICbGJsYlBKFvjFJM9EuDU\n9Bg6u0YpOXySyzVaG3QaF3qC4/DxRyjUjmDlsIDDc6eQjBIg5w8KfDBAMG40dY6RSychp4zUO4ug\n0suQu78Gufk69MZ7JMCn0xshK/cht6BDcnm9sptKkR9KZaek5q7dMinTFY1aDI/04dTpJXq3gdS1\nY3xiGCazC83tCXSqHbQ5J7rULBhLBLxnGH7vKHr8Mzjw7POYn95ALDSCtLIqTsjO94CSBfVNfWhv\n9kLVJaeiXYj6xgpk76tGTo4K8gaKR7MFe9IVKCz1SmWmvdNKiutRWu5EXk4t9me3SJvJyddQsrhR\nXsVC3mSFg9fA3WOgZBlEa+ew5HKrqQ+BqBkeRwJedxw+1yCiwWkMJRcwM7aKg5NrCPmHkabqCjwY\nHAlBdHN5TQiKGhuaSJUuWyE0lgJkZVYhmwBzCqkMNTjRVGtBZbEZJSV2FJX6KHY5yEpskBUqqcS4\nUFkbIsUiqK6Pok4Rg9ZMSvm7MH7gMFITYXSZA1TQE+RKB4IJFUIpNTjeS6D9mBtbw4GJdUwMLEqQ\nAV//9bTich42RwCtKi/251glQJW2TgJs01agILcOBaRISakDpoomxPIzkMzNQCiHnqpueskEigrV\nKM5X0BwLuTsIb/A5zB55FY1tfVR6QpTFHJ2tFGf9dMK4qaBreuELd4CPquBy+DF36DzF4BTmnz2B\nA+NrSEWmMDWyAp5NCGniaeH2Buic9COLABsIsLW9GRpjKbqYPLS0dEJZSzEpq8JQ7m5MZf36B8YX\nFKEup4Y2Iqe62UqlxonR2bNYWrsKvW2S4tgKb68CXFwJPtGETq0KykYDiWIGG1CTihocXLqAaPQg\nqbeBmZFjiPhHMDm0DK8zJqTty+WxN5tFPh1xooL1VVY0t7RCbaIk0VVDQXDOwjwMZD+F6ewnfwQo\n9jFZmSjLLocypwRtOcUwlioQVihhKJBBUWWAursLnkgj2EgT2FAHdFo7PMEm+CLNcLitsBpisJl6\nMUsunhpeRYgbwkT/ElhnVJBcrO7m0dDM0jHnQdgcBFNdCl6egYDiaXC1+7CgbnoEtBllcW1uFC+y\nRtx7+TzuX38dbx2dx4a5TXqKY+Kczz76QBpbMnXC5GqAK9gIb6wBBoMDOnUAek0QVhsDd6ANLh+5\nXh/F9MhxjBNYkB3AYHweLlsPuZhuLuOTYYSjQdQ2JnBI24HNmBdiExcTF/7q80+lxQ+WpEuLigCL\n9QXSmPhdBN964TgWTWo0ZBUjnr1L6hdtPeJHt0EPm6eNVJSDjdXDwpik7+6eBrog6GDo6oHDHCe3\nrmI4cRi8O4WQbxhOMwHuzfEiI8uNhiYPXRJccDuGEZUrJcAe+W5cHI5JoGIToURlxD4R6nHA+zcu\n4/eH5qQ5i4xR2pQ0ZnPCbuuDrpNiPVwLt18DmzEGO7nUTlDuQAvC3Dgi/AQGYvNIhmbgtIRgM1Dy\nmnghrazah6x8F36XydAlgV5mSDwCHJT9Bp/cvSUBPnyKAOLnxwFHsp6UFBZtmXXjmN0g9YthsM5o\n4fbQZYQnVwaVEiDvGoKfHUE0PEsxqaIC3UtxN0aQ44gSKGOk61+3D1Y9R4BUTMUa6GI5AnT8AFCE\n+OTdW/CUFeIQ00WAY5J6Iog4JrpcDAeWxsdULVgmkCWeQ6JOjkNmPXitBwG1HSzTR9ZPQR+DM1QN\nljbBUWFOphbRQ0BBgg2Kp4hvVFKTMfXA2MXC1O0V0jL2u6RzWEUvyyvYBnRreEy6g/C36OFrs0l9\nocoKDOb+9kdZ7CvJBtOsg8NExdf80JJwW1OPzGMTbRvS5dWDdYXgcw6Acw5KavLuIQQeQn5nPmeK\nkoTKjHjE7ctlEIr6CdAuwfyUMQY68Ktr0J+fLoH2konKMk0EZ0xIgN9DJiVzWf4TtO+Rml7HAHyi\niaCkpt9NZzGdx4+rGeLGhbQ9zzCZe/ZaHlRQvcvLt/1XwEegKg+paoVby8NCZidwEdBujP8E6P9W\n08v0P/A6+gWvs1/gnAMCqXmM1OQIkmyMC3pGm6W/nk895fjVrgzjsdz/A/CRmuLTmHjA6OOCZMa4\nYDcmKD+SnN20bQ5zwugypzIfmsOSfPJn/SEvLrY3Swt8Z4whYWT0qcyH5uj+mQvstJ2203baL6/9\nG7YMgQPRal+uAAAAAElFTkSuQmCC"
                  },
                  "kind": "init"
                }
              ]
            }
          }
        ]
      },
      "rest": null,
      "generator": false,
      "expression": false
    },
    {
      "type": "EmptyStatement"
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "itemDef"
          },
          "init": {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "label"
                },
                "value": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "label"
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "name_plural"
                },
                "value": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "name_plural"
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "stackmax"
                },
                "value": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "stackmax"
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "is_hidden"
                },
                "value": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "is_hidden"
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "has_info"
                },
                "value": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "has_info"
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "adjusted_scale"
                },
                "value": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "adjusted_scale"
                  }
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "asset_swf_v"
                },
                "value": {
                  "type": "Literal",
                  "value": "http://c2.glitch.bz/items/2012-09/party_pack_taster_aquarius-1348171337.swf"
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "admin_props"
                },
                "value": {
                  "type": "Literal",
                  "value": false
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "obey_physics"
                },
                "value": {
                  "type": "Literal",
                  "value": true
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "in_background"
                },
                "value": {
                  "type": "Literal",
                  "value": false
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "in_foreground"
                },
                "value": {
                  "type": "Literal",
                  "value": false
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "has_status"
                },
                "value": {
                  "type": "Literal",
                  "value": false
                },
                "kind": "init"
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "not_selectable"
                },
                "value": {
                  "type": "Literal",
                  "value": false
                },
                "kind": "init"
              }
            ]
          }
        }
      ],
      "kind": "var"
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
          "type": "ThisExpression"
        },
        "property": {
          "type": "Identifier",
          "name": "consumable_label_single"
        }
      },
      "consequent": {
        "type": "ExpressionStatement",
        "expression": {
          "type": "AssignmentExpression",
          "operator": "=",
          "left": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "Identifier",
              "name": "itemDef"
            },
            "property": {
              "type": "Identifier",
              "name": "consumable_label_single"
            }
          },
          "right": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "ThisExpression"
            },
            "property": {
              "type": "Identifier",
              "name": "consumable_label_single"
            }
          }
        }
      },
      "alternate": null
    },
    {
      "type": "IfStatement",
      "test": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
          "type": "ThisExpression"
        },
        "property": {
          "type": "Identifier",
          "name": "consumable_label_plural"
        }
      },
      "consequent": {
        "type": "ExpressionStatement",
        "expression": {
          "type": "AssignmentExpression",
          "operator": "=",
          "left": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "Identifier",
              "name": "itemDef"
            },
            "property": {
              "type": "Identifier",
              "name": "consumable_label_plural"
            }
          },
          "right": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "ThisExpression"
            },
            "property": {
              "type": "Identifier",
              "name": "consumable_label_plural"
            }
          }
        }
      },
      "alternate": null
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "itemDef"
          },
          "property": {
            "type": "Identifier",
            "name": "verbs"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": []
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "itemDef"
          },
          "property": {
            "type": "Identifier",
            "name": "hasConditionalVerbs"
          }
        },
        "right": {
          "type": "Literal",
          "value": 1
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "itemDef"
          },
          "property": {
            "type": "Identifier",
            "name": "emote_verbs"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": []
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "itemDef"
          },
          "property": {
            "type": "Identifier",
            "name": "hasConditionalEmoteVerbs"
          }
        },
        "right": {
          "type": "Literal",
          "value": 0
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "itemDef"
          },
          "property": {
            "type": "Identifier",
            "name": "tags"
          }
        },
        "right": {
          "type": "ArrayExpression",
          "elements": [
            {
              "type": "Literal",
              "value": "no_rube"
            },
            {
              "type": "Literal",
              "value": "party"
            },
            {
              "type": "Literal",
              "value": "pack"
            },
            {
              "type": "Literal",
              "value": "toys"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "itemDef"
          },
          "property": {
            "type": "Identifier",
            "name": "keys_in_location"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "p"
              },
              "value": {
                "type": "Literal",
                "value": "pickup"
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "itemDef"
          },
          "property": {
            "type": "Identifier",
            "name": "keys_in_pack"
          }
        },
        "right": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "r"
              },
              "value": {
                "type": "Literal",
                "value": "drop"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "c"
              },
              "value": {
                "type": "Literal",
                "value": "activate"
              },
              "kind": "init"
            },
            {
              "type": "Property",
              "key": {
                "type": "Literal",
                "value": "g"
              },
              "value": {
                "type": "Literal",
                "value": "give"
              },
              "kind": "init"
            }
          ]
        }
      }
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
            "type": "Identifier",
            "name": "log"
          },
          "property": {
            "type": "Identifier",
            "name": "info"
          }
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "party_pack_taster_aquarius.js LOADED"
          }
        ]
      }
    }
  ]
}